
WT_SMART_HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000561c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e6  00800060  0000561c  000056b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800246  00800246  00005896  2**0
                  ALLOC
  3 .stab         00005688  00000000  00000000  00005898  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000206e  00000000  00000000  0000af20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000cf8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000d14e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000d362  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f974  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00010e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012150  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00012330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00012637  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013051  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__vector_1>
       8:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__vector_2>
       c:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__vector_3>
      10:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_4>
      14:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_7>
      20:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__vector_8>
      24:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_9>
      28:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_10>
      2c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 35       	cpi	r26, 0x5D	; 93
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 2a 	call	0x5508	; 0x5508 <main>
      8a:	0c 94 0c 2b 	jmp	0x5618	; 0x5618 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e2       	ldi	r26, 0x26	; 38
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f1 2a 	jmp	0x55e2	; 0x55e2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e1 2a 	jmp	0x55c2	; 0x55c2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e1 2a 	jmp	0x55c2	; 0x55c2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e2       	ldi	r24, 0x26	; 38
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f1 2a 	jmp	0x55e2	; 0x55e2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e2       	ldi	r22, 0x26	; 38
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f9 2a 	jmp	0x55f2	; 0x55f2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e1 2a 	jmp	0x55c2	; 0x55c2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e1 2a 	jmp	0x55c2	; 0x55c2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e1 2a 	jmp	0x55c2	; 0x55c2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 de 2a 	jmp	0x55bc	; 0x55bc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 e5 2a 	jmp	0x55ca	; 0x55ca <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 f9 2a 	jmp	0x55f2	; 0x55f2 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e2 5d       	subi	r30, 0xD2	; 210
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TIMERS_vInit>:

static void (*GS_TIMER2_OVF_CallBack)(void);
static void (*GS_TIMER2_COM_CallBack)(void);

void TIMERS_vInit(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
				CLEAR_BIT(TIMSK, TIMSK_OCIE1B);
			#endif

		#elif TIMER1_MODE == TIMER1_FASTPWM
			//1- Waveform Generation Mode
			CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
     ef2:	af e4       	ldi	r26, 0x4F	; 79
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ef e4       	ldi	r30, 0x4F	; 79
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8e 7f       	andi	r24, 0xFE	; 254
     efe:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, TCCR1A_WGM11);
     f00:	af e4       	ldi	r26, 0x4F	; 79
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ef e4       	ldi	r30, 0x4F	; 79
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	82 60       	ori	r24, 0x02	; 2
     f0c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, TCCR1B_WGM12);
     f0e:	ae e4       	ldi	r26, 0x4E	; 78
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ee e4       	ldi	r30, 0x4E	; 78
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	88 60       	ori	r24, 0x08	; 8
     f1a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, TCCR1B_WGM13);
     f1c:	ae e4       	ldi	r26, 0x4E	; 78
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ee e4       	ldi	r30, 0x4E	; 78
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 61       	ori	r24, 0x10	; 16
     f28:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR1A, TCCR1A_COM1A1);
				#elif TIMER1_FAST_PWM_OC1A_MODE == TOGGLE_OC
					SET_BIT(TCCR1A, TCCR1A_COM1A0);
					CLEAR_BIT(TCCR1A, TCCR1A_COM1A1);
				#elif TIMER1_FAST_PWM_OC1A_MODE == CLEAR_OC
					CLEAR_BIT(TCCR1A, TCCR1A_COM1A0);
     f2a:	af e4       	ldi	r26, 0x4F	; 79
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ef e4       	ldi	r30, 0x4F	; 79
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 7b       	andi	r24, 0xBF	; 191
     f36:	8c 93       	st	X, r24
					SET_BIT(TCCR1A, TCCR1A_COM1A1);
     f38:	af e4       	ldi	r26, 0x4F	; 79
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ef e4       	ldi	r30, 0x4F	; 79
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 68       	ori	r24, 0x80	; 128
     f44:	8c 93       	st	X, r24
					SET_BIT(TCCR1A, TCCR1A_COM1A1);
				#else
					#error "TIMER1_FAST_PWM_OC1A_MODE isn't configured properly"
				#endif
				//3- OCR1A value
				OCR1A = TIMER1_OCR1A_VALUE;
     f46:	ea e4       	ldi	r30, 0x4A	; 74
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	11 82       	std	Z+1, r1	; 0x01
     f4c:	10 82       	st	Z, r1
			#endif


		#elif TIMER2_MODE == TIMER2_FASTPWM
			//1- Waveform Generation Mode
			SET_BIT(TCCR2, TCCR2_WGM20);
     f4e:	a5 e4       	ldi	r26, 0x45	; 69
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e5 e4       	ldi	r30, 0x45	; 69
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	8c 93       	st	X, r24
			SET_BIT(TCCR2, TCCR2_WGM21);
     f5c:	a5 e4       	ldi	r26, 0x45	; 69
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e5 e4       	ldi	r30, 0x45	; 69
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	88 60       	ori	r24, 0x08	; 8
     f68:	8c 93       	st	X, r24
			//2- Compare Output Mode
			#if TIMER2_FAST_PWM_OC2_MODE == DISCONNECTED_OC
				CLEAR_BIT(TCCR2, TCCR2_COM20);
				CLEAR_BIT(TCCR2, TCCR2_COM21);
			#elif TIMER2_FAST_PWM_OC2_MODE == CLEAR_OC
				CLEAR_BIT(TCCR2, TCCR2_COM20);
     f6a:	a5 e4       	ldi	r26, 0x45	; 69
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e4       	ldi	r30, 0x45	; 69
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8f 7e       	andi	r24, 0xEF	; 239
     f76:	8c 93       	st	X, r24
				SET_BIT(TCCR2, TCCR2_COM21);
     f78:	a5 e4       	ldi	r26, 0x45	; 69
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e5 e4       	ldi	r30, 0x45	; 69
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 62       	ori	r24, 0x20	; 32
     f84:	8c 93       	st	X, r24
				SET_BIT(TCCR2, TCCR0_COM21);
			#else
				#error "TIMER2_FAST_PWM_OC2_MODE isn't configured properly"
			#endif
			//3- OCR2 value
			OCR2 = TIMER2_OCR2_VALUE;
     f86:	e3 e4       	ldi	r30, 0x43	; 67
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	10 82       	st	Z, r1
			// there is no Interrupt here in PHASE CORRECT mode
		#endif
	#endif


}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <TIMERS_vSetBusyWait_sync>:

void TIMERS_vSetBusyWait_sync(TIMER_TYPE_t TimerId, u32 Copy_u32Ticks)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <TIMERS_vSetBusyWait_sync+0x6>
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	7b 83       	std	Y+3, r23	; 0x03
     fa2:	6a 83       	std	Y+2, r22	; 0x02
	//polling
}
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <TIMERS_vStartTimer>:

void TIMERS_vStartTimer(TIMER_TYPE_t TimerId)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <TIMERS_vStartTimer+0x6>
     fb6:	0f 92       	push	r0
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	89 83       	std	Y+1, r24	; 0x01
	switch (TimerId)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3b 83       	std	Y+3, r19	; 0x03
     fc6:	2a 83       	std	Y+2, r18	; 0x02
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	31 f0       	breq	.+12     	; 0xfde <TIMERS_vStartTimer+0x2e>
     fd2:	2a 81       	ldd	r18, Y+2	; 0x02
     fd4:	3b 81       	ldd	r19, Y+3	; 0x03
     fd6:	22 30       	cpi	r18, 0x02	; 2
     fd8:	31 05       	cpc	r19, r1
     fda:	81 f0       	breq	.+32     	; 0xffc <TIMERS_vStartTimer+0x4c>
     fdc:	1d c0       	rjmp	.+58     	; 0x1018 <TIMERS_vStartTimer+0x68>
				TCCR0 |= TIMER0_PRESCALER;
			#endif
			break;
		case TIMER1:
			#if TIMER1_ENABLE == ENABLED
				TCCR1B &= ~(0b111);
     fde:	ae e4       	ldi	r26, 0x4E	; 78
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ee e4       	ldi	r30, 0x4E	; 78
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 7f       	andi	r24, 0xF8	; 248
     fea:	8c 93       	st	X, r24
				TCCR1B |= TIMER1_PRESCALER;
     fec:	ae e4       	ldi	r26, 0x4E	; 78
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ee e4       	ldi	r30, 0x4E	; 78
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	82 60       	ori	r24, 0x02	; 2
     ff8:	8c 93       	st	X, r24
     ffa:	0e c0       	rjmp	.+28     	; 0x1018 <TIMERS_vStartTimer+0x68>
			#endif
			break;
		case TIMER2:
			#if TIMER2_ENABLE == ENABLED
				TCCR2 &= ~(0b111);
     ffc:	a5 e4       	ldi	r26, 0x45	; 69
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e5 e4       	ldi	r30, 0x45	; 69
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 7f       	andi	r24, 0xF8	; 248
    1008:	8c 93       	st	X, r24
				TCCR2 |= TIMER2_PRESCALER;
    100a:	a5 e4       	ldi	r26, 0x45	; 69
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e5 e4       	ldi	r30, 0x45	; 69
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	82 60       	ori	r24, 0x02	; 2
    1016:	8c 93       	st	X, r24
			break;
		default:
			/*  Error : Invalid TIMER_TYPE_t */
			break;
	}
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <TIMERS_vStopTimer>:

void TIMERS_vStopTimer(TIMER_TYPE_t TimerId)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <TIMERS_vStopTimer+0x6>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	89 83       	std	Y+1, r24	; 0x01
	switch (TimerId)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3b 83       	std	Y+3, r19	; 0x03
    103a:	2a 83       	std	Y+2, r18	; 0x02
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	9b 81       	ldd	r25, Y+3	; 0x03
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	b9 f0       	breq	.+46     	; 0x1074 <TIMERS_vStopTimer+0x50>
    1046:	2a 81       	ldd	r18, Y+2	; 0x02
    1048:	3b 81       	ldd	r19, Y+3	; 0x03
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	01 f1       	breq	.+64     	; 0x1090 <TIMERS_vStopTimer+0x6c>
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	9b 81       	ldd	r25, Y+3	; 0x03
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	49 f5       	brne	.+82     	; 0x10aa <TIMERS_vStopTimer+0x86>
	{
		case TIMER0:
			TCCR0 &= ~(0b111);
    1058:	a3 e5       	ldi	r26, 0x53	; 83
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e3 e5       	ldi	r30, 0x53	; 83
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 7f       	andi	r24, 0xF8	; 248
    1064:	8c 93       	st	X, r24
			TCCR0 |= PS_NOCLK;
    1066:	a3 e5       	ldi	r26, 0x53	; 83
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e3 e5       	ldi	r30, 0x53	; 83
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8c 93       	st	X, r24
    1072:	1b c0       	rjmp	.+54     	; 0x10aa <TIMERS_vStopTimer+0x86>
			break;
		case TIMER1:
			TCCR1B &= ~(0b111);
    1074:	ae e4       	ldi	r26, 0x4E	; 78
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ee e4       	ldi	r30, 0x4E	; 78
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 7f       	andi	r24, 0xF8	; 248
    1080:	8c 93       	st	X, r24
			TCCR1B |= PS_NOCLK;
    1082:	ae e4       	ldi	r26, 0x4E	; 78
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ee e4       	ldi	r30, 0x4E	; 78
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8c 93       	st	X, r24
    108e:	0d c0       	rjmp	.+26     	; 0x10aa <TIMERS_vStopTimer+0x86>
			break;
		case TIMER2:
			TCCR2 &= ~(0b111);
    1090:	a5 e4       	ldi	r26, 0x45	; 69
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e4       	ldi	r30, 0x45	; 69
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 7f       	andi	r24, 0xF8	; 248
    109c:	8c 93       	st	X, r24
			TCCR2 |= PS_NOCLK;
    109e:	a5 e4       	ldi	r26, 0x45	; 69
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e4       	ldi	r30, 0x45	; 69
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8c 93       	st	X, r24
			break;
	}



}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <TIMERS_vSetCallback>:



void TIMERS_vSetCallback(TIMER_TYPE_t TimerId,void (*Copy_Fptr)(void))
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <TIMERS_vSetCallback+0x6>
    10bc:	0f 92       	push	r0
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	7b 83       	std	Y+3, r23	; 0x03
    10c6:	6a 83       	std	Y+2, r22	; 0x02
			break;
		default:
			/*  Error : Invalid TIMER_TYPE_t */
			break;
		}
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <TIMERS_vSetPreloadValue>:


void TIMERS_vSetPreloadValue(TIMER_TYPE_t TimerId, u16 Copy_u16Preload)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <TIMERS_vSetPreloadValue+0x6>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <TIMERS_vSetPreloadValue+0x8>
    10dc:	0f 92       	push	r0
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	7b 83       	std	Y+3, r23	; 0x03
    10e6:	6a 83       	std	Y+2, r22	; 0x02
	switch (TimerId)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	3d 83       	std	Y+5, r19	; 0x05
    10f0:	2c 83       	std	Y+4, r18	; 0x04
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	91 05       	cpc	r25, r1
    10fa:	71 f0       	breq	.+28     	; 0x1118 <TIMERS_vSetPreloadValue+0x44>
    10fc:	2c 81       	ldd	r18, Y+4	; 0x04
    10fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1100:	22 30       	cpi	r18, 0x02	; 2
    1102:	31 05       	cpc	r19, r1
    1104:	81 f0       	breq	.+32     	; 0x1126 <TIMERS_vSetPreloadValue+0x52>
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	81 f4       	brne	.+32     	; 0x112e <TIMERS_vSetPreloadValue+0x5a>
	{
		case TIMER0:
			TCNT0 = Copy_u16Preload;
    110e:	e2 e5       	ldi	r30, 0x52	; 82
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	0b c0       	rjmp	.+22     	; 0x112e <TIMERS_vSetPreloadValue+0x5a>
			break;
		case TIMER1:
			TCNT1 = Copy_u16Preload;
    1118:	ec e4       	ldi	r30, 0x4C	; 76
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
    1124:	04 c0       	rjmp	.+8      	; 0x112e <TIMERS_vSetPreloadValue+0x5a>
			break;
		case TIMER2:
			TCNT2 = Copy_u16Preload;
    1126:	e4 e4       	ldi	r30, 0x44	; 68
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 83       	st	Z, r24
			break;
		default:
			/*  Error : Invalid TIMER_TYPE_t */
			break;
	}
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <TIMERS_vSetCompareMatchValue>:

void TIMERS_vSetCompareMatchValue(TIMER_TYPE_t TimerId, TIMER1_Channel_t Copy_u16OcrChannel, u16 Copy_u16OcrVal)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	28 97       	sbiw	r28, 0x08	; 8
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	6a 83       	std	Y+2, r22	; 0x02
    1156:	5c 83       	std	Y+4, r21	; 0x04
    1158:	4b 83       	std	Y+3, r20	; 0x03
	switch (TimerId)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	38 87       	std	Y+8, r19	; 0x08
    1162:	2f 83       	std	Y+7, r18	; 0x07
    1164:	8f 81       	ldd	r24, Y+7	; 0x07
    1166:	98 85       	ldd	r25, Y+8	; 0x08
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	71 f0       	breq	.+28     	; 0x118a <TIMERS_vSetCompareMatchValue+0x4c>
    116e:	2f 81       	ldd	r18, Y+7	; 0x07
    1170:	38 85       	ldd	r19, Y+8	; 0x08
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	31 f1       	breq	.+76     	; 0x11c4 <TIMERS_vSetCompareMatchValue+0x86>
    1178:	8f 81       	ldd	r24, Y+7	; 0x07
    117a:	98 85       	ldd	r25, Y+8	; 0x08
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	31 f5       	brne	.+76     	; 0x11cc <TIMERS_vSetCompareMatchValue+0x8e>
	{
		case TIMER0:
			OCR0 = Copy_u16OcrVal;
    1180:	ec e5       	ldi	r30, 0x5C	; 92
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	80 83       	st	Z, r24
    1188:	21 c0       	rjmp	.+66     	; 0x11cc <TIMERS_vSetCompareMatchValue+0x8e>
			break;

		case TIMER1:
			switch (Copy_u16OcrChannel)
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	3e 83       	std	Y+6, r19	; 0x06
    1192:	2d 83       	std	Y+5, r18	; 0x05
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	31 f0       	breq	.+12     	; 0x11a8 <TIMERS_vSetCompareMatchValue+0x6a>
    119c:	2d 81       	ldd	r18, Y+5	; 0x05
    119e:	3e 81       	ldd	r19, Y+6	; 0x06
    11a0:	21 30       	cpi	r18, 0x01	; 1
    11a2:	31 05       	cpc	r19, r1
    11a4:	41 f0       	breq	.+16     	; 0x11b6 <TIMERS_vSetCompareMatchValue+0x78>
    11a6:	12 c0       	rjmp	.+36     	; 0x11cc <TIMERS_vSetCompareMatchValue+0x8e>
			{
				case Channel_A:
					OCR1A = Copy_u16OcrVal;
    11a8:	ea e4       	ldi	r30, 0x4A	; 74
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	80 83       	st	Z, r24
    11b4:	0b c0       	rjmp	.+22     	; 0x11cc <TIMERS_vSetCompareMatchValue+0x8e>
					break;
				case Channel_B:
					OCR1B = Copy_u16OcrVal;
    11b6:	e8 e4       	ldi	r30, 0x48	; 72
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	91 83       	std	Z+1, r25	; 0x01
    11c0:	80 83       	st	Z, r24
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <TIMERS_vSetCompareMatchValue+0x8e>
					break;
			}
			break;

		case TIMER2:
			OCR2 = Copy_u16OcrVal;
    11c4:	e3 e4       	ldi	r30, 0x43	; 67
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	80 83       	st	Z, r24
			break;
		default:
			/*  Error : Invalid TIMER_TYPE_t */
			break;
	}
}
    11cc:	28 96       	adiw	r28, 0x08	; 8
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <TIMERS_vSetICR>:


void TIMERS_vSetICR(u16 Copy_16IcrValue)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <TIMERS_vSetICR+0x6>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
    #if TIMER1_ENABLE == ENABLED
		ICR1 = Copy_16IcrValue; // Top value can be changed through this register in FastPWM mode
    11ec:	e6 e4       	ldi	r30, 0x46	; 70
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    #endif
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <__vector_4>:
void __vector_11(void) __attribute__((signal)); // TIMER0 OVF



void __vector_4(void)
{
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
	if(GS_TIMER2_COM_CallBack != NULL)
    122c:	80 91 52 02 	lds	r24, 0x0252
    1230:	90 91 53 02 	lds	r25, 0x0253
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	29 f0       	breq	.+10     	; 0x1242 <__vector_4+0x40>
	{
		GS_TIMER2_COM_CallBack();
    1238:	e0 91 52 02 	lds	r30, 0x0252
    123c:	f0 91 53 02 	lds	r31, 0x0253
    1240:	09 95       	icall
	}
}
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	ff 91       	pop	r31
    1248:	ef 91       	pop	r30
    124a:	bf 91       	pop	r27
    124c:	af 91       	pop	r26
    124e:	9f 91       	pop	r25
    1250:	8f 91       	pop	r24
    1252:	7f 91       	pop	r23
    1254:	6f 91       	pop	r22
    1256:	5f 91       	pop	r21
    1258:	4f 91       	pop	r20
    125a:	3f 91       	pop	r19
    125c:	2f 91       	pop	r18
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0f 90       	pop	r0
    1264:	1f 90       	pop	r1
    1266:	18 95       	reti

00001268 <__vector_5>:

void __vector_5(void)
{
    1268:	1f 92       	push	r1
    126a:	0f 92       	push	r0
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	0f 92       	push	r0
    1270:	11 24       	eor	r1, r1
    1272:	2f 93       	push	r18
    1274:	3f 93       	push	r19
    1276:	4f 93       	push	r20
    1278:	5f 93       	push	r21
    127a:	6f 93       	push	r22
    127c:	7f 93       	push	r23
    127e:	8f 93       	push	r24
    1280:	9f 93       	push	r25
    1282:	af 93       	push	r26
    1284:	bf 93       	push	r27
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
	if(GS_TIMER2_OVF_CallBack != NULL)
    1292:	80 91 50 02 	lds	r24, 0x0250
    1296:	90 91 51 02 	lds	r25, 0x0251
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	29 f0       	breq	.+10     	; 0x12a8 <__vector_5+0x40>
	{
		GS_TIMER2_OVF_CallBack();
    129e:	e0 91 50 02 	lds	r30, 0x0250
    12a2:	f0 91 51 02 	lds	r31, 0x0251
    12a6:	09 95       	icall
	}
}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <__vector_7>:


void __vector_7(void)
{
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	if(GS_TIMER1_COMA_CallBack != NULL)
    12f8:	80 91 4c 02 	lds	r24, 0x024C
    12fc:	90 91 4d 02 	lds	r25, 0x024D
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	29 f0       	breq	.+10     	; 0x130e <__vector_7+0x40>
	{
		GS_TIMER1_COMA_CallBack();
    1304:	e0 91 4c 02 	lds	r30, 0x024C
    1308:	f0 91 4d 02 	lds	r31, 0x024D
    130c:	09 95       	icall
	}
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	7f 91       	pop	r23
    1320:	6f 91       	pop	r22
    1322:	5f 91       	pop	r21
    1324:	4f 91       	pop	r20
    1326:	3f 91       	pop	r19
    1328:	2f 91       	pop	r18
    132a:	0f 90       	pop	r0
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	0f 90       	pop	r0
    1330:	1f 90       	pop	r1
    1332:	18 95       	reti

00001334 <__vector_8>:

void __vector_8(void)
{
    1334:	1f 92       	push	r1
    1336:	0f 92       	push	r0
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	0f 92       	push	r0
    133c:	11 24       	eor	r1, r1
    133e:	2f 93       	push	r18
    1340:	3f 93       	push	r19
    1342:	4f 93       	push	r20
    1344:	5f 93       	push	r21
    1346:	6f 93       	push	r22
    1348:	7f 93       	push	r23
    134a:	8f 93       	push	r24
    134c:	9f 93       	push	r25
    134e:	af 93       	push	r26
    1350:	bf 93       	push	r27
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	if(GS_TIMER1_COMB_CallBack != NULL)
    135e:	80 91 4e 02 	lds	r24, 0x024E
    1362:	90 91 4f 02 	lds	r25, 0x024F
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	29 f0       	breq	.+10     	; 0x1374 <__vector_8+0x40>
	{
		GS_TIMER1_COMB_CallBack();
    136a:	e0 91 4e 02 	lds	r30, 0x024E
    136e:	f0 91 4f 02 	lds	r31, 0x024F
    1372:	09 95       	icall
	}
}
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	ff 91       	pop	r31
    137a:	ef 91       	pop	r30
    137c:	bf 91       	pop	r27
    137e:	af 91       	pop	r26
    1380:	9f 91       	pop	r25
    1382:	8f 91       	pop	r24
    1384:	7f 91       	pop	r23
    1386:	6f 91       	pop	r22
    1388:	5f 91       	pop	r21
    138a:	4f 91       	pop	r20
    138c:	3f 91       	pop	r19
    138e:	2f 91       	pop	r18
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	0f 90       	pop	r0
    1396:	1f 90       	pop	r1
    1398:	18 95       	reti

0000139a <__vector_9>:

void __vector_9(void)
{
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	if(GS_TIMER1_OVF_CallBack != NULL)
    13c4:	80 91 4a 02 	lds	r24, 0x024A
    13c8:	90 91 4b 02 	lds	r25, 0x024B
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	29 f0       	breq	.+10     	; 0x13da <__vector_9+0x40>
	{
		GS_TIMER1_OVF_CallBack();
    13d0:	e0 91 4a 02 	lds	r30, 0x024A
    13d4:	f0 91 4b 02 	lds	r31, 0x024B
    13d8:	09 95       	icall
	}
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	ff 91       	pop	r31
    13e0:	ef 91       	pop	r30
    13e2:	bf 91       	pop	r27
    13e4:	af 91       	pop	r26
    13e6:	9f 91       	pop	r25
    13e8:	8f 91       	pop	r24
    13ea:	7f 91       	pop	r23
    13ec:	6f 91       	pop	r22
    13ee:	5f 91       	pop	r21
    13f0:	4f 91       	pop	r20
    13f2:	3f 91       	pop	r19
    13f4:	2f 91       	pop	r18
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0f 90       	pop	r0
    13fc:	1f 90       	pop	r1
    13fe:	18 95       	reti

00001400 <__vector_10>:

void __vector_10(void)
{
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	if(GS_TIMER0_COM_CallBack != NULL)
    142a:	80 91 48 02 	lds	r24, 0x0248
    142e:	90 91 49 02 	lds	r25, 0x0249
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	29 f0       	breq	.+10     	; 0x1440 <__vector_10+0x40>
	{
		GS_TIMER0_COM_CallBack();
    1436:	e0 91 48 02 	lds	r30, 0x0248
    143a:	f0 91 49 02 	lds	r31, 0x0249
    143e:	09 95       	icall
	}
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	7f 91       	pop	r23
    1452:	6f 91       	pop	r22
    1454:	5f 91       	pop	r21
    1456:	4f 91       	pop	r20
    1458:	3f 91       	pop	r19
    145a:	2f 91       	pop	r18
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <__vector_11>:

void __vector_11(void)
{
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
	if(GS_TIMER0_OVF_CallBack != NULL)
    1490:	80 91 46 02 	lds	r24, 0x0246
    1494:	90 91 47 02 	lds	r25, 0x0247
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	29 f0       	breq	.+10     	; 0x14a6 <__vector_11+0x40>
	{
		GS_TIMER0_OVF_CallBack();
    149c:	e0 91 46 02 	lds	r30, 0x0246
    14a0:	f0 91 47 02 	lds	r31, 0x0247
    14a4:	09 95       	icall
	}
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	bf 91       	pop	r27
    14b0:	af 91       	pop	r26
    14b2:	9f 91       	pop	r25
    14b4:	8f 91       	pop	r24
    14b6:	7f 91       	pop	r23
    14b8:	6f 91       	pop	r22
    14ba:	5f 91       	pop	r21
    14bc:	4f 91       	pop	r20
    14be:	3f 91       	pop	r19
    14c0:	2f 91       	pop	r18
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <I2C_vInit>:
	CLEAR_BIT(TWCR, TWCR_TWINT);
}
#endif

void I2C_vInit(void)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
	TWSR = 0x00;
    14d4:	e1 e2       	ldi	r30, 0x21	; 33
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	10 82       	st	Z, r1
	TWBR = 0x20;
    14da:	e0 e2       	ldi	r30, 0x20	; 32
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 e2       	ldi	r24, 0x20	; 32
    14e0:	80 83       	st	Z, r24
	TWCR = (1<<TWCR_TWEN);
    14e2:	e6 e5       	ldi	r30, 0x56	; 86
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	84 e0       	ldi	r24, 0x04	; 4
    14e8:	80 83       	st	Z, r24
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <I2C_vStart>:

void I2C_vStart(void)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN) | (1<<TWCR_TWSTA);
    14f8:	e6 e5       	ldi	r30, 0x56	; 86
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	84 ea       	ldi	r24, 0xA4	; 164
    14fe:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWCR_TWINT)));
    1500:	e6 e5       	ldi	r30, 0x56	; 86
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	88 23       	and	r24, r24
    1508:	dc f7       	brge	.-10     	; 0x1500 <I2C_vStart+0x10>
}
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <I2C_vWrite>:

void I2C_vWrite(u8 Copy_u8Data)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	0f 92       	push	r0
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Copy_u8Data;
    151c:	e3 e2       	ldi	r30, 0x23	; 35
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	80 83       	st	Z, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    1524:	e6 e5       	ldi	r30, 0x56	; 86
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	84 e8       	ldi	r24, 0x84	; 132
    152a:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWCR_TWINT)));
    152c:	e6 e5       	ldi	r30, 0x56	; 86
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	88 23       	and	r24, r24
    1534:	dc f7       	brge	.-10     	; 0x152c <I2C_vWrite+0x1c>
}
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <I2C_u8Read>:

u8 I2C_u8Read(void)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	TWCR  = (1<<TWCR_TWEN) | (1<<TWCR_TWINT);
    1546:	e6 e5       	ldi	r30, 0x56	; 86
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	84 e8       	ldi	r24, 0x84	; 132
    154c:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWCR_TWINT)));
    154e:	e6 e5       	ldi	r30, 0x56	; 86
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	88 23       	and	r24, r24
    1556:	dc f7       	brge	.-10     	; 0x154e <I2C_u8Read+0x10>
	return TWDR;
    1558:	e3 e2       	ldi	r30, 0x23	; 35
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
}
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <GPIO_vSetPortDirection>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"


void GPIO_vSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <GPIO_vSetPortDirection+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <GPIO_vSetPortDirection+0x8>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3c 83       	std	Y+4, r19	; 0x04
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	91 05       	cpc	r25, r1
    1586:	d9 f0       	breq	.+54     	; 0x15be <GPIO_vSetPortDirection+0x5a>
    1588:	2b 81       	ldd	r18, Y+3	; 0x03
    158a:	3c 81       	ldd	r19, Y+4	; 0x04
    158c:	23 30       	cpi	r18, 0x03	; 3
    158e:	31 05       	cpc	r19, r1
    1590:	34 f4       	brge	.+12     	; 0x159e <GPIO_vSetPortDirection+0x3a>
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	91 05       	cpc	r25, r1
    159a:	61 f0       	breq	.+24     	; 0x15b4 <GPIO_vSetPortDirection+0x50>
    159c:	1e c0       	rjmp	.+60     	; 0x15da <GPIO_vSetPortDirection+0x76>
    159e:	2b 81       	ldd	r18, Y+3	; 0x03
    15a0:	3c 81       	ldd	r19, Y+4	; 0x04
    15a2:	23 30       	cpi	r18, 0x03	; 3
    15a4:	31 05       	cpc	r19, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <GPIO_vSetPortDirection+0x64>
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	91 05       	cpc	r25, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <GPIO_vSetPortDirection+0x6e>
    15b2:	13 c0       	rjmp	.+38     	; 0x15da <GPIO_vSetPortDirection+0x76>
	{
	case GPIO_PORTA:
		DDRA = Copy_u8Direction;
    15b4:	ea e3       	ldi	r30, 0x3A	; 58
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	80 83       	st	Z, r24
    15bc:	0e c0       	rjmp	.+28     	; 0x15da <GPIO_vSetPortDirection+0x76>
		break;
	case GPIO_PORTB:
		DDRB = Copy_u8Direction;
    15be:	e7 e3       	ldi	r30, 0x37	; 55
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <GPIO_vSetPortDirection+0x76>
		break;
	case GPIO_PORTC:
		DDRC = Copy_u8Direction;
    15c8:	e4 e3       	ldi	r30, 0x34	; 52
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
    15d0:	04 c0       	rjmp	.+8      	; 0x15da <GPIO_vSetPortDirection+0x76>
		break;
	case GPIO_PORTD:
		DDRD = Copy_u8Direction;
    15d2:	e1 e3       	ldi	r30, 0x31	; 49
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	80 83       	st	Z, r24
		break;
	default:
		/* Wrong GPIO port */
		break;
	}
}
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <GPIO_vSetPinDirection>:

void GPIO_vSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	27 97       	sbiw	r28, 0x07	; 7
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	6a 83       	std	Y+2, r22	; 0x02
    1600:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin <= PIN7)
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	08 f0       	brcs	.+2      	; 0x160a <GPIO_vSetPinDirection+0x22>
    1608:	ec c0       	rjmp	.+472    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
	{
		if(Copy_u8Direction == OUTPUT_PIN)
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	09 f0       	breq	.+2      	; 0x1612 <GPIO_vSetPinDirection+0x2a>
    1610:	70 c0       	rjmp	.+224    	; 0x16f2 <GPIO_vSetPinDirection+0x10a>
		{
			switch(Copy_u8Port)
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	3f 83       	std	Y+7, r19	; 0x07
    161a:	2e 83       	std	Y+6, r18	; 0x06
    161c:	8e 81       	ldd	r24, Y+6	; 0x06
    161e:	9f 81       	ldd	r25, Y+7	; 0x07
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	91 05       	cpc	r25, r1
    1624:	51 f1       	breq	.+84     	; 0x167a <GPIO_vSetPinDirection+0x92>
    1626:	2e 81       	ldd	r18, Y+6	; 0x06
    1628:	3f 81       	ldd	r19, Y+7	; 0x07
    162a:	23 30       	cpi	r18, 0x03	; 3
    162c:	31 05       	cpc	r19, r1
    162e:	34 f4       	brge	.+12     	; 0x163c <GPIO_vSetPinDirection+0x54>
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	9f 81       	ldd	r25, Y+7	; 0x07
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	61 f0       	breq	.+24     	; 0x1652 <GPIO_vSetPinDirection+0x6a>
    163a:	d3 c0       	rjmp	.+422    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
    163c:	2e 81       	ldd	r18, Y+6	; 0x06
    163e:	3f 81       	ldd	r19, Y+7	; 0x07
    1640:	23 30       	cpi	r18, 0x03	; 3
    1642:	31 05       	cpc	r19, r1
    1644:	71 f1       	breq	.+92     	; 0x16a2 <GPIO_vSetPinDirection+0xba>
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	9f 81       	ldd	r25, Y+7	; 0x07
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	91 05       	cpc	r25, r1
    164e:	e9 f1       	breq	.+122    	; 0x16ca <GPIO_vSetPinDirection+0xe2>
    1650:	c8 c0       	rjmp	.+400    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
			{
			case GPIO_PORTA:
				SET_BIT(DDRA, Copy_u8Pin);
    1652:	aa e3       	ldi	r26, 0x3A	; 58
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ea e3       	ldi	r30, 0x3A	; 58
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_vSetPinDirection+0x88>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_vSetPinDirection+0x84>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	b4 c0       	rjmp	.+360    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTB:
				SET_BIT(DDRB, Copy_u8Pin);
    167a:	a7 e3       	ldi	r26, 0x37	; 55
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e7 e3       	ldi	r30, 0x37	; 55
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_vSetPinDirection+0xb0>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <GPIO_vSetPinDirection+0xac>
    169c:	84 2b       	or	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	a0 c0       	rjmp	.+320    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTC:
				SET_BIT(DDRC, Copy_u8Pin);
    16a2:	a4 e3       	ldi	r26, 0x34	; 52
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e4 e3       	ldi	r30, 0x34	; 52
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <GPIO_vSetPinDirection+0xd8>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <GPIO_vSetPinDirection+0xd4>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	8c c0       	rjmp	.+280    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTD:
				SET_BIT(DDRD, Copy_u8Pin);
    16ca:	a1 e3       	ldi	r26, 0x31	; 49
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e1 e3       	ldi	r30, 0x31	; 49
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <GPIO_vSetPinDirection+0x100>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <GPIO_vSetPinDirection+0xfc>
    16ec:	84 2b       	or	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	78 c0       	rjmp	.+240    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
			default:
				/* Wrong GPIO port */
				break;
			}
		}
		else if(Copy_u8Direction == INPUT_PIN)
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	88 23       	and	r24, r24
    16f6:	09 f0       	breq	.+2      	; 0x16fa <GPIO_vSetPinDirection+0x112>
    16f8:	74 c0       	rjmp	.+232    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
		{
			switch(Copy_u8Port)
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	3d 83       	std	Y+5, r19	; 0x05
    1702:	2c 83       	std	Y+4, r18	; 0x04
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	91 05       	cpc	r25, r1
    170c:	61 f1       	breq	.+88     	; 0x1766 <GPIO_vSetPinDirection+0x17e>
    170e:	2c 81       	ldd	r18, Y+4	; 0x04
    1710:	3d 81       	ldd	r19, Y+5	; 0x05
    1712:	23 30       	cpi	r18, 0x03	; 3
    1714:	31 05       	cpc	r19, r1
    1716:	34 f4       	brge	.+12     	; 0x1724 <GPIO_vSetPinDirection+0x13c>
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	9d 81       	ldd	r25, Y+5	; 0x05
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	69 f0       	breq	.+26     	; 0x173c <GPIO_vSetPinDirection+0x154>
    1722:	5f c0       	rjmp	.+190    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
    1724:	2c 81       	ldd	r18, Y+4	; 0x04
    1726:	3d 81       	ldd	r19, Y+5	; 0x05
    1728:	23 30       	cpi	r18, 0x03	; 3
    172a:	31 05       	cpc	r19, r1
    172c:	89 f1       	breq	.+98     	; 0x1790 <GPIO_vSetPinDirection+0x1a8>
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	9d 81       	ldd	r25, Y+5	; 0x05
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	91 05       	cpc	r25, r1
    1736:	09 f4       	brne	.+2      	; 0x173a <GPIO_vSetPinDirection+0x152>
    1738:	40 c0       	rjmp	.+128    	; 0x17ba <GPIO_vSetPinDirection+0x1d2>
    173a:	53 c0       	rjmp	.+166    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
			{
			case GPIO_PORTA:
				CLEAR_BIT(DDRA, Copy_u8Pin);
    173c:	aa e3       	ldi	r26, 0x3A	; 58
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ea e3       	ldi	r30, 0x3A	; 58
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <GPIO_vSetPinDirection+0x172>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <GPIO_vSetPinDirection+0x16e>
    175e:	80 95       	com	r24
    1760:	84 23       	and	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	3e c0       	rjmp	.+124    	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTB:
				CLEAR_BIT(DDRB, Copy_u8Pin);
    1766:	a7 e3       	ldi	r26, 0x37	; 55
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e7 e3       	ldi	r30, 0x37	; 55
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <GPIO_vSetPinDirection+0x19c>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <GPIO_vSetPinDirection+0x198>
    1788:	80 95       	com	r24
    178a:	84 23       	and	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	29 c0       	rjmp	.+82     	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTC:
				CLEAR_BIT(DDRC, Copy_u8Pin);
    1790:	a4 e3       	ldi	r26, 0x34	; 52
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e4 e3       	ldi	r30, 0x34	; 52
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <GPIO_vSetPinDirection+0x1c6>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <GPIO_vSetPinDirection+0x1c2>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	14 c0       	rjmp	.+40     	; 0x17e2 <GPIO_vSetPinDirection+0x1fa>
				break;
			case GPIO_PORTD:
				CLEAR_BIT(DDRD, Copy_u8Pin);
    17ba:	a1 e3       	ldi	r26, 0x31	; 49
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e1 e3       	ldi	r30, 0x31	; 49
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_vSetPinDirection+0x1f0>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_vSetPinDirection+0x1ec>
    17dc:	80 95       	com	r24
    17de:	84 23       	and	r24, r20
    17e0:	8c 93       	st	X, r24
	else
	{
		/* You Enter Wrong PIN */
	}

}
    17e2:	27 96       	adiw	r28, 0x07	; 7
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <GPIO_vSetPortValue>:


void GPIO_vSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <GPIO_vSetPortValue+0x6>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <GPIO_vSetPortValue+0x8>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3c 83       	std	Y+4, r19	; 0x04
    180c:	2b 83       	std	Y+3, r18	; 0x03
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	82 30       	cpi	r24, 0x02	; 2
    1814:	91 05       	cpc	r25, r1
    1816:	d9 f0       	breq	.+54     	; 0x184e <GPIO_vSetPortValue+0x5a>
    1818:	2b 81       	ldd	r18, Y+3	; 0x03
    181a:	3c 81       	ldd	r19, Y+4	; 0x04
    181c:	23 30       	cpi	r18, 0x03	; 3
    181e:	31 05       	cpc	r19, r1
    1820:	34 f4       	brge	.+12     	; 0x182e <GPIO_vSetPortValue+0x3a>
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	91 05       	cpc	r25, r1
    182a:	61 f0       	breq	.+24     	; 0x1844 <GPIO_vSetPortValue+0x50>
    182c:	1e c0       	rjmp	.+60     	; 0x186a <GPIO_vSetPortValue+0x76>
    182e:	2b 81       	ldd	r18, Y+3	; 0x03
    1830:	3c 81       	ldd	r19, Y+4	; 0x04
    1832:	23 30       	cpi	r18, 0x03	; 3
    1834:	31 05       	cpc	r19, r1
    1836:	81 f0       	breq	.+32     	; 0x1858 <GPIO_vSetPortValue+0x64>
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	91 05       	cpc	r25, r1
    1840:	81 f0       	breq	.+32     	; 0x1862 <GPIO_vSetPortValue+0x6e>
    1842:	13 c0       	rjmp	.+38     	; 0x186a <GPIO_vSetPortValue+0x76>
	{
		case GPIO_PORTA:
			PORTA = Copy_u8Value;
    1844:	eb e3       	ldi	r30, 0x3B	; 59
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	80 83       	st	Z, r24
    184c:	0e c0       	rjmp	.+28     	; 0x186a <GPIO_vSetPortValue+0x76>
			break;
		case GPIO_PORTB:
			PORTB = Copy_u8Value;
    184e:	e8 e3       	ldi	r30, 0x38	; 56
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	80 83       	st	Z, r24
    1856:	09 c0       	rjmp	.+18     	; 0x186a <GPIO_vSetPortValue+0x76>
			break;
		case GPIO_PORTC:
			PORTC = Copy_u8Value;
    1858:	e5 e3       	ldi	r30, 0x35	; 53
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	80 83       	st	Z, r24
    1860:	04 c0       	rjmp	.+8      	; 0x186a <GPIO_vSetPortValue+0x76>
			break;
		case GPIO_PORTD:
			PORTD = Copy_u8Value;
    1862:	e2 e3       	ldi	r30, 0x32	; 50
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	80 83       	st	Z, r24
			break;
		default:
			/* Wrong GPIO port */
			break;
	}
}
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <GPIO_vSetPinValue>:

void GPIO_vSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	27 97       	sbiw	r28, 0x07	; 7
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	6a 83       	std	Y+2, r22	; 0x02
    1890:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin <= PIN7)
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	88 30       	cpi	r24, 0x08	; 8
    1896:	08 f0       	brcs	.+2      	; 0x189a <GPIO_vSetPinValue+0x22>
    1898:	ec c0       	rjmp	.+472    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
	{
		if(Copy_u8Value == HIGH)
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	09 f0       	breq	.+2      	; 0x18a2 <GPIO_vSetPinValue+0x2a>
    18a0:	70 c0       	rjmp	.+224    	; 0x1982 <GPIO_vSetPinValue+0x10a>
		{
			switch(Copy_u8Port)
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3f 83       	std	Y+7, r19	; 0x07
    18aa:	2e 83       	std	Y+6, r18	; 0x06
    18ac:	8e 81       	ldd	r24, Y+6	; 0x06
    18ae:	9f 81       	ldd	r25, Y+7	; 0x07
    18b0:	82 30       	cpi	r24, 0x02	; 2
    18b2:	91 05       	cpc	r25, r1
    18b4:	51 f1       	breq	.+84     	; 0x190a <GPIO_vSetPinValue+0x92>
    18b6:	2e 81       	ldd	r18, Y+6	; 0x06
    18b8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ba:	23 30       	cpi	r18, 0x03	; 3
    18bc:	31 05       	cpc	r19, r1
    18be:	34 f4       	brge	.+12     	; 0x18cc <GPIO_vSetPinValue+0x54>
    18c0:	8e 81       	ldd	r24, Y+6	; 0x06
    18c2:	9f 81       	ldd	r25, Y+7	; 0x07
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	91 05       	cpc	r25, r1
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <GPIO_vSetPinValue+0x6a>
    18ca:	d3 c0       	rjmp	.+422    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
    18cc:	2e 81       	ldd	r18, Y+6	; 0x06
    18ce:	3f 81       	ldd	r19, Y+7	; 0x07
    18d0:	23 30       	cpi	r18, 0x03	; 3
    18d2:	31 05       	cpc	r19, r1
    18d4:	71 f1       	breq	.+92     	; 0x1932 <GPIO_vSetPinValue+0xba>
    18d6:	8e 81       	ldd	r24, Y+6	; 0x06
    18d8:	9f 81       	ldd	r25, Y+7	; 0x07
    18da:	84 30       	cpi	r24, 0x04	; 4
    18dc:	91 05       	cpc	r25, r1
    18de:	e9 f1       	breq	.+122    	; 0x195a <GPIO_vSetPinValue+0xe2>
    18e0:	c8 c0       	rjmp	.+400    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
			{
			case GPIO_PORTA:
				SET_BIT(PORTA, Copy_u8Pin);
    18e2:	ab e3       	ldi	r26, 0x3B	; 59
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	eb e3       	ldi	r30, 0x3B	; 59
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <GPIO_vSetPinValue+0x88>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <GPIO_vSetPinValue+0x84>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	b4 c0       	rjmp	.+360    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTB:
				SET_BIT(PORTB, Copy_u8Pin);
    190a:	a8 e3       	ldi	r26, 0x38	; 56
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e8 e3       	ldi	r30, 0x38	; 56
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GPIO_vSetPinValue+0xb0>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <GPIO_vSetPinValue+0xac>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	a0 c0       	rjmp	.+320    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTC:
				SET_BIT(PORTC, Copy_u8Pin);
    1932:	a5 e3       	ldi	r26, 0x35	; 53
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e5 e3       	ldi	r30, 0x35	; 53
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <GPIO_vSetPinValue+0xd8>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <GPIO_vSetPinValue+0xd4>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	8c c0       	rjmp	.+280    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTD:
				SET_BIT(PORTD, Copy_u8Pin);
    195a:	a2 e3       	ldi	r26, 0x32	; 50
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e2 e3       	ldi	r30, 0x32	; 50
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <GPIO_vSetPinValue+0x100>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <GPIO_vSetPinValue+0xfc>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	78 c0       	rjmp	.+240    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
			default:
				/* You Enter Wrong GPIO port */
				break;
			}
		}
		else if(Copy_u8Value == LOW)
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	88 23       	and	r24, r24
    1986:	09 f0       	breq	.+2      	; 0x198a <GPIO_vSetPinValue+0x112>
    1988:	74 c0       	rjmp	.+232    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
		{
			switch(Copy_u8Port)
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	3d 83       	std	Y+5, r19	; 0x05
    1992:	2c 83       	std	Y+4, r18	; 0x04
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	91 05       	cpc	r25, r1
    199c:	61 f1       	breq	.+88     	; 0x19f6 <GPIO_vSetPinValue+0x17e>
    199e:	2c 81       	ldd	r18, Y+4	; 0x04
    19a0:	3d 81       	ldd	r19, Y+5	; 0x05
    19a2:	23 30       	cpi	r18, 0x03	; 3
    19a4:	31 05       	cpc	r19, r1
    19a6:	34 f4       	brge	.+12     	; 0x19b4 <GPIO_vSetPinValue+0x13c>
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	91 05       	cpc	r25, r1
    19b0:	69 f0       	breq	.+26     	; 0x19cc <GPIO_vSetPinValue+0x154>
    19b2:	5f c0       	rjmp	.+190    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	23 30       	cpi	r18, 0x03	; 3
    19ba:	31 05       	cpc	r19, r1
    19bc:	89 f1       	breq	.+98     	; 0x1a20 <GPIO_vSetPinValue+0x1a8>
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	91 05       	cpc	r25, r1
    19c6:	09 f4       	brne	.+2      	; 0x19ca <GPIO_vSetPinValue+0x152>
    19c8:	40 c0       	rjmp	.+128    	; 0x1a4a <GPIO_vSetPinValue+0x1d2>
    19ca:	53 c0       	rjmp	.+166    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
			{
			case GPIO_PORTA:
				CLEAR_BIT(PORTA, Copy_u8Pin);
    19cc:	ab e3       	ldi	r26, 0x3B	; 59
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	eb e3       	ldi	r30, 0x3B	; 59
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <GPIO_vSetPinValue+0x172>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <GPIO_vSetPinValue+0x16e>
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	3e c0       	rjmp	.+124    	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTB:
				CLEAR_BIT(PORTB, Copy_u8Pin);
    19f6:	a8 e3       	ldi	r26, 0x38	; 56
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <GPIO_vSetPinValue+0x19c>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <GPIO_vSetPinValue+0x198>
    1a18:	80 95       	com	r24
    1a1a:	84 23       	and	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	29 c0       	rjmp	.+82     	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTC:
				CLEAR_BIT(PORTC, Copy_u8Pin);
    1a20:	a5 e3       	ldi	r26, 0x35	; 53
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e3       	ldi	r30, 0x35	; 53
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <GPIO_vSetPinValue+0x1c6>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <GPIO_vSetPinValue+0x1c2>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <GPIO_vSetPinValue+0x1fa>
				break;
			case GPIO_PORTD:
				CLEAR_BIT(PORTD, Copy_u8Pin);
    1a4a:	a2 e3       	ldi	r26, 0x32	; 50
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e2 e3       	ldi	r30, 0x32	; 50
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <GPIO_vSetPinValue+0x1f0>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <GPIO_vSetPinValue+0x1ec>
    1a6c:	80 95       	com	r24
    1a6e:	84 23       	and	r24, r20
    1a70:	8c 93       	st	X, r24
	}
	else
	{
		/* You Enter Wrong PIN */
	}
}
    1a72:	27 96       	adiw	r28, 0x07	; 7
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <GPIO_u8GetPortValue>:


u8 GPIO_u8GetPortValue(u8 Copy_u8Port)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <GPIO_u8GetPortValue+0x6>
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <GPIO_u8GetPortValue+0x8>
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Result = 0;
    1a92:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	3c 83       	std	Y+4, r19	; 0x04
    1a9c:	2b 83       	std	Y+3, r18	; 0x03
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	d9 f0       	breq	.+54     	; 0x1ade <GPIO_u8GetPortValue+0x5a>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	23 30       	cpi	r18, 0x03	; 3
    1aae:	31 05       	cpc	r19, r1
    1ab0:	34 f4       	brge	.+12     	; 0x1abe <GPIO_u8GetPortValue+0x3a>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	91 05       	cpc	r25, r1
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <GPIO_u8GetPortValue+0x50>
    1abc:	1e c0       	rjmp	.+60     	; 0x1afa <GPIO_u8GetPortValue+0x76>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	23 30       	cpi	r18, 0x03	; 3
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	81 f0       	breq	.+32     	; 0x1ae8 <GPIO_u8GetPortValue+0x64>
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	84 30       	cpi	r24, 0x04	; 4
    1ace:	91 05       	cpc	r25, r1
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <GPIO_u8GetPortValue+0x6e>
    1ad2:	13 c0       	rjmp	.+38     	; 0x1afa <GPIO_u8GetPortValue+0x76>
	{
	case GPIO_PORTA:
		Local_u8Result = PINA;
    1ad4:	e9 e3       	ldi	r30, 0x39	; 57
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	0e c0       	rjmp	.+28     	; 0x1afa <GPIO_u8GetPortValue+0x76>
		break;
	case GPIO_PORTB:
		Local_u8Result = PINB;
    1ade:	e6 e3       	ldi	r30, 0x36	; 54
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	09 c0       	rjmp	.+18     	; 0x1afa <GPIO_u8GetPortValue+0x76>
		break;
	case GPIO_PORTC:
		Local_u8Result = PINC;
    1ae8:	e3 e3       	ldi	r30, 0x33	; 51
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <GPIO_u8GetPortValue+0x76>
		break;
	case GPIO_PORTD:
		Local_u8Result = PIND;
    1af2:	e0 e3       	ldi	r30, 0x30	; 48
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		/* You Enter Wrong GPIO port */
		break;
	}
	return Local_u8Result;
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <GPIO_u8GetPinValue>:


u8 GPIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <GPIO_u8GetPinValue+0x6>
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <GPIO_u8GetPinValue+0x8>
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	8a 83       	std	Y+2, r24	; 0x02
    1b1a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= PIN7)
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	88 30       	cpi	r24, 0x08	; 8
    1b22:	08 f0       	brcs	.+2      	; 0x1b26 <GPIO_u8GetPinValue+0x1c>
    1b24:	67 c0       	rjmp	.+206    	; 0x1bf4 <GPIO_u8GetPinValue+0xea>
	{
		switch (Copy_u8Port)
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3d 83       	std	Y+5, r19	; 0x05
    1b2e:	2c 83       	std	Y+4, r18	; 0x04
    1b30:	4c 81       	ldd	r20, Y+4	; 0x04
    1b32:	5d 81       	ldd	r21, Y+5	; 0x05
    1b34:	42 30       	cpi	r20, 0x02	; 2
    1b36:	51 05       	cpc	r21, r1
    1b38:	41 f1       	breq	.+80     	; 0x1b8a <GPIO_u8GetPinValue+0x80>
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	91 05       	cpc	r25, r1
    1b42:	34 f4       	brge	.+12     	; 0x1b50 <GPIO_u8GetPinValue+0x46>
    1b44:	2c 81       	ldd	r18, Y+4	; 0x04
    1b46:	3d 81       	ldd	r19, Y+5	; 0x05
    1b48:	21 30       	cpi	r18, 0x01	; 1
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	61 f0       	breq	.+24     	; 0x1b66 <GPIO_u8GetPinValue+0x5c>
    1b4e:	52 c0       	rjmp	.+164    	; 0x1bf4 <GPIO_u8GetPinValue+0xea>
    1b50:	4c 81       	ldd	r20, Y+4	; 0x04
    1b52:	5d 81       	ldd	r21, Y+5	; 0x05
    1b54:	43 30       	cpi	r20, 0x03	; 3
    1b56:	51 05       	cpc	r21, r1
    1b58:	51 f1       	breq	.+84     	; 0x1bae <GPIO_u8GetPinValue+0xa4>
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5e:	84 30       	cpi	r24, 0x04	; 4
    1b60:	91 05       	cpc	r25, r1
    1b62:	b9 f1       	breq	.+110    	; 0x1bd2 <GPIO_u8GetPinValue+0xc8>
    1b64:	47 c0       	rjmp	.+142    	; 0x1bf4 <GPIO_u8GetPinValue+0xea>
		{
		case GPIO_PORTA:
			Local_u8Result = GET_BIT(PINA, Copy_u8Pin);
    1b66:	e9 e3       	ldi	r30, 0x39	; 57
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	a9 01       	movw	r20, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <GPIO_u8GetPinValue+0x74>
    1b7a:	55 95       	asr	r21
    1b7c:	47 95       	ror	r20
    1b7e:	8a 95       	dec	r24
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <GPIO_u8GetPinValue+0x70>
    1b82:	ca 01       	movw	r24, r20
    1b84:	81 70       	andi	r24, 0x01	; 1
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	35 c0       	rjmp	.+106    	; 0x1bf4 <GPIO_u8GetPinValue+0xea>
			break;
		case GPIO_PORTB:
			Local_u8Result = GET_BIT(PINB, Copy_u8Pin);
    1b8a:	e6 e3       	ldi	r30, 0x36	; 54
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	88 2f       	mov	r24, r24
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a9 01       	movw	r20, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <GPIO_u8GetPinValue+0x98>
    1b9e:	55 95       	asr	r21
    1ba0:	47 95       	ror	r20
    1ba2:	8a 95       	dec	r24
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <GPIO_u8GetPinValue+0x94>
    1ba6:	ca 01       	movw	r24, r20
    1ba8:	81 70       	andi	r24, 0x01	; 1
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	23 c0       	rjmp	.+70     	; 0x1bf4 <GPIO_u8GetPinValue+0xea>
			break;
		case GPIO_PORTC:
			Local_u8Result = GET_BIT(PINC, Copy_u8Pin);
    1bae:	e3 e3       	ldi	r30, 0x33	; 51
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a9 01       	movw	r20, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <GPIO_u8GetPinValue+0xbc>
    1bc2:	55 95       	asr	r21
    1bc4:	47 95       	ror	r20
    1bc6:	8a 95       	dec	r24
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <GPIO_u8GetPinValue+0xb8>
    1bca:	ca 01       	movw	r24, r20
    1bcc:	81 70       	andi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	11 c0       	rjmp	.+34     	; 0x1bf4 <GPIO_u8GetPinValue+0xea>
			break;
		case GPIO_PORTD:
			Local_u8Result = GET_BIT(PIND, Copy_u8Pin);
    1bd2:	e0 e3       	ldi	r30, 0x30	; 48
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a9 01       	movw	r20, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <GPIO_u8GetPinValue+0xe0>
    1be6:	55 95       	asr	r21
    1be8:	47 95       	ror	r20
    1bea:	8a 95       	dec	r24
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <GPIO_u8GetPinValue+0xdc>
    1bee:	ca 01       	movw	r24, r20
    1bf0:	81 70       	andi	r24, 0x01	; 1
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* You Enter Wrong PIN */
	}
	return Local_u8Result;
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <GIE_vEnableGIE>:
#include "../../LIB/BIT_MATH.h"

#include "GIE_private.h"

void GIE_vEnableGIE(void)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_BIT_I);
    1c0e:	af e5       	ldi	r26, 0x5F	; 95
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ef e5       	ldi	r30, 0x5F	; 95
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 68       	ori	r24, 0x80	; 128
    1c1a:	8c 93       	st	X, r24
}
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <GIE_vDisableGIE>:

void GIE_vDisableGIE(void)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG, SREG_BIT_I);
    1c2a:	af e5       	ldi	r26, 0x5F	; 95
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	ef e5       	ldi	r30, 0x5F	; 95
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 77       	andi	r24, 0x7F	; 127
    1c36:	8c 93       	st	X, r24
}
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <EXTI_vEnable>:
static void (*GS_EXTI1_Callback)(void);
static void (*GS_EXTI2_Callback)(void);


void EXTI_vEnable(EXTI_Source_t Copy_u8ExtIntNum, EXTI_Edge_Interrupt_Source_t Copy_u8EdgeIntSource)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <EXTI_vEnable+0x6>
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <EXTI_vEnable+0x8>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8ExtIntNum)
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	3c 83       	std	Y+4, r19	; 0x04
    1c56:	2b 83       	std	Y+3, r18	; 0x03
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	91 05       	cpc	r25, r1
    1c60:	d1 f0       	breq	.+52     	; 0x1c96 <EXTI_vEnable+0x58>
    1c62:	2b 81       	ldd	r18, Y+3	; 0x03
    1c64:	3c 81       	ldd	r19, Y+4	; 0x04
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	31 f1       	breq	.+76     	; 0x1cb8 <EXTI_vEnable+0x7a>
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	91 f5       	brne	.+100    	; 0x1cd8 <EXTI_vEnable+0x9a>
	{
	case EXTI_INT0:
		//Input Direction
		GPIO_vSetPinDirection(GPIO_PORTD, PIN2, INPUT_PIN);
    1c74:	84 e0       	ldi	r24, 0x04	; 4
    1c76:	62 e0       	ldi	r22, 0x02	; 2
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
		//Set the sense control
		EXTI_vSetSenseCtrl(EXTI_INT0, Copy_u8EdgeIntSource);
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	6a 81       	ldd	r22, Y+2	; 0x02
    1c82:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <EXTI_vSetSenseCtrl>
		//Enable Interrupt
		SET_BIT(GICR, GICR_INT0);
    1c86:	ab e5       	ldi	r26, 0x5B	; 91
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	eb e5       	ldi	r30, 0x5B	; 91
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	8c 93       	st	X, r24
    1c94:	21 c0       	rjmp	.+66     	; 0x1cd8 <EXTI_vEnable+0x9a>
		break;
	case EXTI_INT1:
		//Input Direction
		GPIO_vSetPinDirection(GPIO_PORTD, PIN3, INPUT_PIN);
    1c96:	84 e0       	ldi	r24, 0x04	; 4
    1c98:	63 e0       	ldi	r22, 0x03	; 3
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
		//Set the sense control
		EXTI_vSetSenseCtrl(EXTI_INT1, Copy_u8EdgeIntSource);
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ca4:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <EXTI_vSetSenseCtrl>
		//Enable Interrupt
		SET_BIT(GICR, GICR_INT1);
    1ca8:	ab e5       	ldi	r26, 0x5B	; 91
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	eb e5       	ldi	r30, 0x5B	; 91
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	80 68       	ori	r24, 0x80	; 128
    1cb4:	8c 93       	st	X, r24
    1cb6:	10 c0       	rjmp	.+32     	; 0x1cd8 <EXTI_vEnable+0x9a>
		break;
	case EXTI_INT2:
		//Input Direction
		GPIO_vSetPinDirection(GPIO_PORTB, PIN2, INPUT_PIN);
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	62 e0       	ldi	r22, 0x02	; 2
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
		//Set the sense control
		EXTI_vSetSenseCtrl(EXTI_INT2, Copy_u8EdgeIntSource);
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	6a 81       	ldd	r22, Y+2	; 0x02
    1cc6:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <EXTI_vSetSenseCtrl>
		//Enable Interrupt
		SET_BIT(GICR, GICR_INT2);
    1cca:	ab e5       	ldi	r26, 0x5B	; 91
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	eb e5       	ldi	r30, 0x5B	; 91
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 62       	ori	r24, 0x20	; 32
    1cd6:	8c 93       	st	X, r24
		break;
	default:
		/* Error Invalid EXTI number */
		break;
	}
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <EXTI_vDisable>:

void EXTI_vDisable(EXTI_Source_t Copy_u8ExtIntNum)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <EXTI_vDisable+0x6>
    1cec:	0f 92       	push	r0
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8ExtIntNum)
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	3b 83       	std	Y+3, r19	; 0x03
    1cfc:	2a 83       	std	Y+2, r18	; 0x02
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	9b 81       	ldd	r25, Y+3	; 0x03
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	91 05       	cpc	r25, r1
    1d06:	89 f0       	breq	.+34     	; 0x1d2a <EXTI_vDisable+0x44>
    1d08:	2a 81       	ldd	r18, Y+2	; 0x02
    1d0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d0c:	22 30       	cpi	r18, 0x02	; 2
    1d0e:	31 05       	cpc	r19, r1
    1d10:	a1 f0       	breq	.+40     	; 0x1d3a <EXTI_vDisable+0x54>
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	9b 81       	ldd	r25, Y+3	; 0x03
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	b9 f4       	brne	.+46     	; 0x1d48 <EXTI_vDisable+0x62>
	{
		case EXTI_INT0:
			CLEAR_BIT(GICR, GICR_INT0);
    1d1a:	ab e5       	ldi	r26, 0x5B	; 91
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	eb e5       	ldi	r30, 0x5B	; 91
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	8f 7b       	andi	r24, 0xBF	; 191
    1d26:	8c 93       	st	X, r24
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <EXTI_vDisable+0x62>
			break;
		case EXTI_INT1:
			CLEAR_BIT(GICR, GICR_INT1);
    1d2a:	ab e5       	ldi	r26, 0x5B	; 91
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	eb e5       	ldi	r30, 0x5B	; 91
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 77       	andi	r24, 0x7F	; 127
    1d36:	8c 93       	st	X, r24
    1d38:	07 c0       	rjmp	.+14     	; 0x1d48 <EXTI_vDisable+0x62>
			break;
		case EXTI_INT2:
			CLEAR_BIT(GICR, GICR_INT2);
    1d3a:	ab e5       	ldi	r26, 0x5B	; 91
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	eb e5       	ldi	r30, 0x5B	; 91
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 7d       	andi	r24, 0xDF	; 223
    1d46:	8c 93       	st	X, r24
			break;
		default:
			/* Error Invalid EXTI number */
			break;
	}
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <EXTI_vSetSenseCtrl>:




void EXTI_vSetSenseCtrl(EXTI_Source_t Copy_u8ExtIntNum, EXTI_Edge_Interrupt_Source_t Copy_u8EdgeIntSource)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	2a 97       	sbiw	r28, 0x0a	; 10
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8ExtIntNum)
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	3a 87       	std	Y+10, r19	; 0x0a
    1d74:	29 87       	std	Y+9, r18	; 0x09
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <EXTI_vSetSenseCtrl+0x2e>
    1d80:	66 c0       	rjmp	.+204    	; 0x1e4e <EXTI_vSetSenseCtrl+0xfa>
    1d82:	29 85       	ldd	r18, Y+9	; 0x09
    1d84:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <EXTI_vSetSenseCtrl+0x3a>
    1d8c:	bb c0       	rjmp	.+374    	; 0x1f04 <EXTI_vSetSenseCtrl+0x1b0>
    1d8e:	89 85       	ldd	r24, Y+9	; 0x09
    1d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <EXTI_vSetSenseCtrl+0x44>
    1d96:	d5 c0       	rjmp	.+426    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
	{
	case EXTI_INT0:
		switch(Copy_u8EdgeIntSource)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	38 87       	std	Y+8, r19	; 0x08
    1da0:	2f 83       	std	Y+7, r18	; 0x07
    1da2:	8f 81       	ldd	r24, Y+7	; 0x07
    1da4:	98 85       	ldd	r25, Y+8	; 0x08
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	91 05       	cpc	r25, r1
    1daa:	a9 f0       	breq	.+42     	; 0x1dd6 <EXTI_vSetSenseCtrl+0x82>
    1dac:	2f 81       	ldd	r18, Y+7	; 0x07
    1dae:	38 85       	ldd	r19, Y+8	; 0x08
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <EXTI_vSetSenseCtrl+0x6c>
    1db6:	8f 81       	ldd	r24, Y+7	; 0x07
    1db8:	98 85       	ldd	r25, Y+8	; 0x08
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	c9 f1       	breq	.+114    	; 0x1e30 <EXTI_vSetSenseCtrl+0xdc>
    1dbe:	c1 c0       	rjmp	.+386    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
    1dc0:	2f 81       	ldd	r18, Y+7	; 0x07
    1dc2:	38 85       	ldd	r19, Y+8	; 0x08
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	a9 f0       	breq	.+42     	; 0x1df4 <EXTI_vSetSenseCtrl+0xa0>
    1dca:	8f 81       	ldd	r24, Y+7	; 0x07
    1dcc:	98 85       	ldd	r25, Y+8	; 0x08
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	f9 f0       	breq	.+62     	; 0x1e12 <EXTI_vSetSenseCtrl+0xbe>
    1dd4:	b6 c0       	rjmp	.+364    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
		{
		case EXTI_ON_CHANGE:
			CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1dd6:	a5 e5       	ldi	r26, 0x55	; 85
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e5 e5       	ldi	r30, 0x55	; 85
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8d 7f       	andi	r24, 0xFD	; 253
    1de2:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC00);
    1de4:	a5 e5       	ldi	r26, 0x55	; 85
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e5 e5       	ldi	r30, 0x55	; 85
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	81 60       	ori	r24, 0x01	; 1
    1df0:	8c 93       	st	X, r24
    1df2:	a7 c0       	rjmp	.+334    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_FALLING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC01);
    1df4:	a5 e5       	ldi	r26, 0x55	; 85
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e5 e5       	ldi	r30, 0x55	; 85
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	82 60       	ori	r24, 0x02	; 2
    1e00:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC00);
    1e02:	a5 e5       	ldi	r26, 0x55	; 85
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e5 e5       	ldi	r30, 0x55	; 85
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8e 7f       	andi	r24, 0xFE	; 254
    1e0e:	8c 93       	st	X, r24
    1e10:	98 c0       	rjmp	.+304    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC01);
    1e12:	a5 e5       	ldi	r26, 0x55	; 85
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e5 e5       	ldi	r30, 0x55	; 85
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	82 60       	ori	r24, 0x02	; 2
    1e1e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC00);
    1e20:	a5 e5       	ldi	r26, 0x55	; 85
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e5 e5       	ldi	r30, 0x55	; 85
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	81 60       	ori	r24, 0x01	; 1
    1e2c:	8c 93       	st	X, r24
    1e2e:	89 c0       	rjmp	.+274    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_LOW_LEVEL:
			CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1e30:	a5 e5       	ldi	r26, 0x55	; 85
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e5       	ldi	r30, 0x55	; 85
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8d 7f       	andi	r24, 0xFD	; 253
    1e3c:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC00);
    1e3e:	a5 e5       	ldi	r26, 0x55	; 85
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e5 e5       	ldi	r30, 0x55	; 85
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8e 7f       	andi	r24, 0xFE	; 254
    1e4a:	8c 93       	st	X, r24
    1e4c:	7a c0       	rjmp	.+244    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
			/* Error Invalid EdgeIntSource */
			break;
		}
		break;
	case EXTI_INT1:
		switch(Copy_u8EdgeIntSource)
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	3e 83       	std	Y+6, r19	; 0x06
    1e56:	2d 83       	std	Y+5, r18	; 0x05
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	91 05       	cpc	r25, r1
    1e60:	a9 f0       	breq	.+42     	; 0x1e8c <EXTI_vSetSenseCtrl+0x138>
    1e62:	2d 81       	ldd	r18, Y+5	; 0x05
    1e64:	3e 81       	ldd	r19, Y+6	; 0x06
    1e66:	22 30       	cpi	r18, 0x02	; 2
    1e68:	31 05       	cpc	r19, r1
    1e6a:	2c f4       	brge	.+10     	; 0x1e76 <EXTI_vSetSenseCtrl+0x122>
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	c9 f1       	breq	.+114    	; 0x1ee6 <EXTI_vSetSenseCtrl+0x192>
    1e74:	66 c0       	rjmp	.+204    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
    1e76:	2d 81       	ldd	r18, Y+5	; 0x05
    1e78:	3e 81       	ldd	r19, Y+6	; 0x06
    1e7a:	22 30       	cpi	r18, 0x02	; 2
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	a9 f0       	breq	.+42     	; 0x1eaa <EXTI_vSetSenseCtrl+0x156>
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	91 05       	cpc	r25, r1
    1e88:	f9 f0       	breq	.+62     	; 0x1ec8 <EXTI_vSetSenseCtrl+0x174>
    1e8a:	5b c0       	rjmp	.+182    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
		{
		case EXTI_ON_CHANGE:
			CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1e8c:	a5 e5       	ldi	r26, 0x55	; 85
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e5 e5       	ldi	r30, 0x55	; 85
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	87 7f       	andi	r24, 0xF7	; 247
    1e98:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC10);
    1e9a:	a5 e5       	ldi	r26, 0x55	; 85
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e5 e5       	ldi	r30, 0x55	; 85
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	84 60       	ori	r24, 0x04	; 4
    1ea6:	8c 93       	st	X, r24
    1ea8:	4c c0       	rjmp	.+152    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>

			break;
		case EXTI_FALLING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC11);
    1eaa:	a5 e5       	ldi	r26, 0x55	; 85
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e5 e5       	ldi	r30, 0x55	; 85
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 60       	ori	r24, 0x08	; 8
    1eb6:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC10);
    1eb8:	a5 e5       	ldi	r26, 0x55	; 85
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e5 e5       	ldi	r30, 0x55	; 85
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	8b 7f       	andi	r24, 0xFB	; 251
    1ec4:	8c 93       	st	X, r24
    1ec6:	3d c0       	rjmp	.+122    	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC11);
    1ec8:	a5 e5       	ldi	r26, 0x55	; 85
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e5 e5       	ldi	r30, 0x55	; 85
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 60       	ori	r24, 0x08	; 8
    1ed4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC10);
    1ed6:	a5 e5       	ldi	r26, 0x55	; 85
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e5 e5       	ldi	r30, 0x55	; 85
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	84 60       	ori	r24, 0x04	; 4
    1ee2:	8c 93       	st	X, r24
    1ee4:	2e c0       	rjmp	.+92     	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_LOW_LEVEL:
			CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1ee6:	a5 e5       	ldi	r26, 0x55	; 85
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e5 e5       	ldi	r30, 0x55	; 85
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	87 7f       	andi	r24, 0xF7	; 247
    1ef2:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC10);
    1ef4:	a5 e5       	ldi	r26, 0x55	; 85
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e5 e5       	ldi	r30, 0x55	; 85
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8b 7f       	andi	r24, 0xFB	; 251
    1f00:	8c 93       	st	X, r24
    1f02:	1f c0       	rjmp	.+62     	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
			/* Error Invalid EdgeIntSource */
			break;
		}
		break;
	case EXTI_INT2:
		switch(Copy_u8EdgeIntSource)
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	3c 83       	std	Y+4, r19	; 0x04
    1f0c:	2b 83       	std	Y+3, r18	; 0x03
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	82 30       	cpi	r24, 0x02	; 2
    1f14:	91 05       	cpc	r25, r1
    1f16:	31 f0       	breq	.+12     	; 0x1f24 <EXTI_vSetSenseCtrl+0x1d0>
    1f18:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1c:	23 30       	cpi	r18, 0x03	; 3
    1f1e:	31 05       	cpc	r19, r1
    1f20:	49 f0       	breq	.+18     	; 0x1f34 <EXTI_vSetSenseCtrl+0x1e0>
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
		{
		case EXTI_FALLING_EDGE:
			CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
    1f24:	a4 e5       	ldi	r26, 0x54	; 84
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e4 e5       	ldi	r30, 0x54	; 84
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8f 7b       	andi	r24, 0xBF	; 191
    1f30:	8c 93       	st	X, r24
    1f32:	07 c0       	rjmp	.+14     	; 0x1f42 <EXTI_vSetSenseCtrl+0x1ee>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR,MCUCSR_ISC2);
    1f34:	a4 e5       	ldi	r26, 0x54	; 84
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e4 e5       	ldi	r30, 0x54	; 84
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 64       	ori	r24, 0x40	; 64
    1f40:	8c 93       	st	X, r24
		break;
	default:
		/* Error Invalid EXTI number */
		break;
	}
}
    1f42:	2a 96       	adiw	r28, 0x0a	; 10
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <__vector_1>:
void __vector_2(void) __attribute__((signal));
void __vector_3(void) __attribute__((signal));


void __vector_1(void)
{
    1f54:	1f 92       	push	r1
    1f56:	0f 92       	push	r0
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	0f 92       	push	r0
    1f5c:	11 24       	eor	r1, r1
    1f5e:	2f 93       	push	r18
    1f60:	3f 93       	push	r19
    1f62:	4f 93       	push	r20
    1f64:	5f 93       	push	r21
    1f66:	6f 93       	push	r22
    1f68:	7f 93       	push	r23
    1f6a:	8f 93       	push	r24
    1f6c:	9f 93       	push	r25
    1f6e:	af 93       	push	r26
    1f70:	bf 93       	push	r27
    1f72:	ef 93       	push	r30
    1f74:	ff 93       	push	r31
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
	if(GS_EXTI0_Callback != NULL)
    1f7e:	80 91 54 02 	lds	r24, 0x0254
    1f82:	90 91 55 02 	lds	r25, 0x0255
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	29 f0       	breq	.+10     	; 0x1f94 <__vector_1+0x40>
	{
		GS_EXTI0_Callback();
    1f8a:	e0 91 54 02 	lds	r30, 0x0254
    1f8e:	f0 91 55 02 	lds	r31, 0x0255
    1f92:	09 95       	icall
	}
}
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	ff 91       	pop	r31
    1f9a:	ef 91       	pop	r30
    1f9c:	bf 91       	pop	r27
    1f9e:	af 91       	pop	r26
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	7f 91       	pop	r23
    1fa6:	6f 91       	pop	r22
    1fa8:	5f 91       	pop	r21
    1faa:	4f 91       	pop	r20
    1fac:	3f 91       	pop	r19
    1fae:	2f 91       	pop	r18
    1fb0:	0f 90       	pop	r0
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	0f 90       	pop	r0
    1fb6:	1f 90       	pop	r1
    1fb8:	18 95       	reti

00001fba <__vector_2>:

void __vector_2(void)
{
    1fba:	1f 92       	push	r1
    1fbc:	0f 92       	push	r0
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	0f 92       	push	r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	2f 93       	push	r18
    1fc6:	3f 93       	push	r19
    1fc8:	4f 93       	push	r20
    1fca:	5f 93       	push	r21
    1fcc:	6f 93       	push	r22
    1fce:	7f 93       	push	r23
    1fd0:	8f 93       	push	r24
    1fd2:	9f 93       	push	r25
    1fd4:	af 93       	push	r26
    1fd6:	bf 93       	push	r27
    1fd8:	ef 93       	push	r30
    1fda:	ff 93       	push	r31
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
	if(GS_EXTI1_Callback != NULL)
    1fe4:	80 91 56 02 	lds	r24, 0x0256
    1fe8:	90 91 57 02 	lds	r25, 0x0257
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	29 f0       	breq	.+10     	; 0x1ffa <__vector_2+0x40>
	{
		GS_EXTI1_Callback();
    1ff0:	e0 91 56 02 	lds	r30, 0x0256
    1ff4:	f0 91 57 02 	lds	r31, 0x0257
    1ff8:	09 95       	icall
	}
}
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	ff 91       	pop	r31
    2000:	ef 91       	pop	r30
    2002:	bf 91       	pop	r27
    2004:	af 91       	pop	r26
    2006:	9f 91       	pop	r25
    2008:	8f 91       	pop	r24
    200a:	7f 91       	pop	r23
    200c:	6f 91       	pop	r22
    200e:	5f 91       	pop	r21
    2010:	4f 91       	pop	r20
    2012:	3f 91       	pop	r19
    2014:	2f 91       	pop	r18
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	0f 90       	pop	r0
    201c:	1f 90       	pop	r1
    201e:	18 95       	reti

00002020 <__vector_3>:

void __vector_3(void)
{
    2020:	1f 92       	push	r1
    2022:	0f 92       	push	r0
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	0f 92       	push	r0
    2028:	11 24       	eor	r1, r1
    202a:	2f 93       	push	r18
    202c:	3f 93       	push	r19
    202e:	4f 93       	push	r20
    2030:	5f 93       	push	r21
    2032:	6f 93       	push	r22
    2034:	7f 93       	push	r23
    2036:	8f 93       	push	r24
    2038:	9f 93       	push	r25
    203a:	af 93       	push	r26
    203c:	bf 93       	push	r27
    203e:	ef 93       	push	r30
    2040:	ff 93       	push	r31
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	if(GS_EXTI2_Callback != NULL)
    204a:	80 91 58 02 	lds	r24, 0x0258
    204e:	90 91 59 02 	lds	r25, 0x0259
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	29 f0       	breq	.+10     	; 0x2060 <__vector_3+0x40>
	{
		GS_EXTI2_Callback();
    2056:	e0 91 58 02 	lds	r30, 0x0258
    205a:	f0 91 59 02 	lds	r31, 0x0259
    205e:	09 95       	icall
	}
}
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	bf 91       	pop	r27
    206a:	af 91       	pop	r26
    206c:	9f 91       	pop	r25
    206e:	8f 91       	pop	r24
    2070:	7f 91       	pop	r23
    2072:	6f 91       	pop	r22
    2074:	5f 91       	pop	r21
    2076:	4f 91       	pop	r20
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	0f 90       	pop	r0
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	0f 90       	pop	r0
    2082:	1f 90       	pop	r1
    2084:	18 95       	reti

00002086 <EXTI_vSetCallBack>:

void EXTI_vSetCallBack(EXTI_Source_t Copy_u8ExtIntNum, void(*Copy_pfun)(void))
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <EXTI_vSetCallBack+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <EXTI_vSetCallBack+0x8>
    208e:	0f 92       	push	r0
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	7b 83       	std	Y+3, r23	; 0x03
    2098:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8ExtIntNum) {
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	3d 83       	std	Y+5, r19	; 0x05
    20a2:	2c 83       	std	Y+4, r18	; 0x04
    20a4:	8c 81       	ldd	r24, Y+4	; 0x04
    20a6:	9d 81       	ldd	r25, Y+5	; 0x05
    20a8:	81 30       	cpi	r24, 0x01	; 1
    20aa:	91 05       	cpc	r25, r1
    20ac:	81 f0       	breq	.+32     	; 0x20ce <EXTI_vSetCallBack+0x48>
    20ae:	2c 81       	ldd	r18, Y+4	; 0x04
    20b0:	3d 81       	ldd	r19, Y+5	; 0x05
    20b2:	22 30       	cpi	r18, 0x02	; 2
    20b4:	31 05       	cpc	r19, r1
    20b6:	91 f0       	breq	.+36     	; 0x20dc <EXTI_vSetCallBack+0x56>
    20b8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ba:	9d 81       	ldd	r25, Y+5	; 0x05
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	a1 f4       	brne	.+40     	; 0x20e8 <EXTI_vSetCallBack+0x62>
		case EXTI_INT0:
			GS_EXTI0_Callback = Copy_pfun;
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	9b 81       	ldd	r25, Y+3	; 0x03
    20c4:	90 93 55 02 	sts	0x0255, r25
    20c8:	80 93 54 02 	sts	0x0254, r24
    20cc:	0d c0       	rjmp	.+26     	; 0x20e8 <EXTI_vSetCallBack+0x62>
			break;
		case EXTI_INT1:
			GS_EXTI1_Callback = Copy_pfun;
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	9b 81       	ldd	r25, Y+3	; 0x03
    20d2:	90 93 57 02 	sts	0x0257, r25
    20d6:	80 93 56 02 	sts	0x0256, r24
    20da:	06 c0       	rjmp	.+12     	; 0x20e8 <EXTI_vSetCallBack+0x62>
			break;
		case EXTI_INT2:
			GS_EXTI2_Callback = Copy_pfun;
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	90 93 59 02 	sts	0x0259, r25
    20e4:	80 93 58 02 	sts	0x0258, r24
			break;
		default:
			/* Error Invalid EXTI number */
			break;
	}
}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <ADC_vInit>:


static void (*GS_ADC_Complete_Callback)(void);

void ADC_vInit(void)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
	//1- reference voltage through ADMUX
	#if ADC_REFERENCE_VOLTAGE == ADC_INTERNAL_AREF
		CLEAR_BIT(ADMUX, ADMUX_REFS0);
		CLEAR_BIT(ADMUX, ADMUX_REFS1);
	#elif ADC_REFERENCE_VOLTAGE == ADC_AVCC
		SET_BIT(ADMUX, ADMUX_REFS0);
    2100:	a7 e2       	ldi	r26, 0x27	; 39
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e7 e2       	ldi	r30, 0x27	; 39
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	80 64       	ori	r24, 0x40	; 64
    210c:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX, ADMUX_REFS1);
    210e:	a7 e2       	ldi	r26, 0x27	; 39
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e7 e2       	ldi	r30, 0x27	; 39
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	8f 77       	andi	r24, 0x7F	; 127
    211a:	8c 93       	st	X, r24
	#else
		#error "You entered invalid ADC_REFERENCE_VOLTAGE value"
	#endif

	//2- ALWAYS adjustment right (10-bit precision)
	CLEAR_BIT(ADMUX, ADMUX_ADLAR);
    211c:	a7 e2       	ldi	r26, 0x27	; 39
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e7 e2       	ldi	r30, 0x27	; 39
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	8f 7d       	andi	r24, 0xDF	; 223
    2128:	8c 93       	st	X, r24

	//3- Enable ADC prepherial
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    212a:	a6 e2       	ldi	r26, 0x26	; 38
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e6 e2       	ldi	r30, 0x26	; 38
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	80 68       	ori	r24, 0x80	; 128
    2136:	8c 93       	st	X, r24

	//4- Enable/Disable Interrupt
	#if INTERRUPT_ENABLE == ENABLED
		SET_BIT(ADCSRA, ADCSRA_ADIE);
	#elif INTERRUPT_ENABLE == DISABLED
		CLEAR_BIT(ADCSRA, ADCSRA_ADIE);
    2138:	a6 e2       	ldi	r26, 0x26	; 38
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e6 e2       	ldi	r30, 0x26	; 38
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	87 7f       	andi	r24, 0xF7	; 247
    2144:	8c 93       	st	X, r24
		//choose the Trigger source
		SFIOR &= ~(0b11100000);
		SFIOR |= (AUTO_TRIGGERRING_SOURCE << 5);
	#elif AUTO_TRIGGERRING_ENABLE == DISABLED
		//ADC Auto Trigger Disable
		CLEAR_BIT(ADCSRA, ADCSRA_ADATE);
    2146:	a6 e2       	ldi	r26, 0x26	; 38
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e6 e2       	ldi	r30, 0x26	; 38
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	8f 7d       	andi	r24, 0xDF	; 223
    2152:	8c 93       	st	X, r24
	#else
		#error "You entered invalid AUTO_TRIGGERRING_ENABLE value"
	#endif


}
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <ADC_u16ReadDigitalValue_Sync>:

u16 ADC_u16ReadDigitalValue_Sync(ADC_Channel_t Copy_ChannelId)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	0f 92       	push	r0
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	89 83       	std	Y+1, r24	; 0x01
	//1- Select Channel.
	ADMUX &= ~(0b00011111);
    2166:	a7 e2       	ldi	r26, 0x27	; 39
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e7 e2       	ldi	r30, 0x27	; 39
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	80 7e       	andi	r24, 0xE0	; 224
    2172:	8c 93       	st	X, r24
	ADMUX |= (Copy_ChannelId & 0x07);// ANDing with 0x07 For kind of input validation
    2174:	a7 e2       	ldi	r26, 0x27	; 39
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e7 e2       	ldi	r30, 0x27	; 39
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	98 2f       	mov	r25, r24
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	87 70       	andi	r24, 0x07	; 7
    2184:	89 2b       	or	r24, r25
    2186:	8c 93       	st	X, r24
	//2- start conversion.
	SET_BIT(ADCSRA, ADCSRA_ADSC);
    2188:	a6 e2       	ldi	r26, 0x26	; 38
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e6 e2       	ldi	r30, 0x26	; 38
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	80 64       	ori	r24, 0x40	; 64
    2194:	8c 93       	st	X, r24
	//3- waiting for the completion of ADC conversion.
	while(GET_BIT(ADCSRA, ADCSRA_ADSC));
    2196:	e6 e2       	ldi	r30, 0x26	; 38
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	82 95       	swap	r24
    219e:	86 95       	lsr	r24
    21a0:	86 95       	lsr	r24
    21a2:	83 70       	andi	r24, 0x03	; 3
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	81 70       	andi	r24, 0x01	; 1
    21aa:	90 70       	andi	r25, 0x00	; 0
    21ac:	88 23       	and	r24, r24
    21ae:	99 f7       	brne	.-26     	; 0x2196 <ADC_u16ReadDigitalValue_Sync+0x3c>
	//4- clear flag by writing one
	SET_BIT(ADCSRA, ADCSRA_ADIF);
    21b0:	a6 e2       	ldi	r26, 0x26	; 38
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e6 e2       	ldi	r30, 0x26	; 38
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 61       	ori	r24, 0x10	; 16
    21bc:	8c 93       	st	X, r24
	//5- get the value inside the ADCL and ADCH with pointer to them.
	return ADC_DATA;
    21be:	e4 e2       	ldi	r30, 0x24	; 36
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
}
    21c6:	0f 90       	pop	r0
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <ADC_vStartConversion>:



void ADC_vStartConversion(ADC_Channel_t Copy_ChannelId)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	0f 92       	push	r0
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	89 83       	std	Y+1, r24	; 0x01
	//1- Select Channel.
	ADMUX &= ~(0b00011111);
    21da:	a7 e2       	ldi	r26, 0x27	; 39
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e7 e2       	ldi	r30, 0x27	; 39
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	80 7e       	andi	r24, 0xE0	; 224
    21e6:	8c 93       	st	X, r24
	ADMUX |= (Copy_ChannelId & 0x07);// ANDing with 0x07 For kind of input validation
    21e8:	a7 e2       	ldi	r26, 0x27	; 39
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e7 e2       	ldi	r30, 0x27	; 39
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	98 2f       	mov	r25, r24
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	87 70       	andi	r24, 0x07	; 7
    21f8:	89 2b       	or	r24, r25
    21fa:	8c 93       	st	X, r24
	//2- start conversion.
	SET_BIT(ADCSRA, ADCSRA_ADSC);
    21fc:	a6 e2       	ldi	r26, 0x26	; 38
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e6 e2       	ldi	r30, 0x26	; 38
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	80 64       	ori	r24, 0x40	; 64
    2208:	8c 93       	st	X, r24
}
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <ADC_u16ReadDigitalValue_Async>:

u16 ADC_u16ReadDigitalValue_Async(ADC_Channel_t Copy_ChannelId)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	0f 92       	push	r0
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ~(0b00011111);
    221e:	a7 e2       	ldi	r26, 0x27	; 39
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e7 e2       	ldi	r30, 0x27	; 39
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	80 7e       	andi	r24, 0xE0	; 224
    222a:	8c 93       	st	X, r24
	ADMUX |= (Copy_ChannelId & 0x07);// ANDing with 0x07 For kind of input validation
    222c:	a7 e2       	ldi	r26, 0x27	; 39
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e7 e2       	ldi	r30, 0x27	; 39
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	98 2f       	mov	r25, r24
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	87 70       	andi	r24, 0x07	; 7
    223c:	89 2b       	or	r24, r25
    223e:	8c 93       	st	X, r24
	return ADC_DATA;
    2240:	e4 e2       	ldi	r30, 0x24	; 36
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
}
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <ADC_vEnableInterrupt>:

void ADC_vEnableInterrupt(void)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADCSRA_ADIE);
    2258:	a6 e2       	ldi	r26, 0x26	; 38
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e6 e2       	ldi	r30, 0x26	; 38
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	88 60       	ori	r24, 0x08	; 8
    2264:	8c 93       	st	X, r24
}
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <ADC_vDisableInterrupt>:
void ADC_vDisableInterrupt(void)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA, ADCSRA_ADIE);
    2274:	a6 e2       	ldi	r26, 0x26	; 38
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e6 e2       	ldi	r30, 0x26	; 38
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	87 7f       	andi	r24, 0xF7	; 247
    2280:	8c 93       	st	X, r24
}
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <ADC_vEnable>:

void ADC_vEnable(void)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    2290:	a6 e2       	ldi	r26, 0x26	; 38
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e6 e2       	ldi	r30, 0x26	; 38
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	80 68       	ori	r24, 0x80	; 128
    229c:	8c 93       	st	X, r24
}
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <ADC_vDisable>:
void ADC_vDisable(void)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA, ADCSRA_ADEN);
    22ac:	a6 e2       	ldi	r26, 0x26	; 38
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e6 e2       	ldi	r30, 0x26	; 38
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	8f 77       	andi	r24, 0x7F	; 127
    22b8:	8c 93       	st	X, r24
}
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <__vector_16>:


void __vector_16(void) __attribute__((signal));

void __vector_16(void)
{
    22c0:	1f 92       	push	r1
    22c2:	0f 92       	push	r0
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	0f 92       	push	r0
    22c8:	11 24       	eor	r1, r1
    22ca:	2f 93       	push	r18
    22cc:	3f 93       	push	r19
    22ce:	4f 93       	push	r20
    22d0:	5f 93       	push	r21
    22d2:	6f 93       	push	r22
    22d4:	7f 93       	push	r23
    22d6:	8f 93       	push	r24
    22d8:	9f 93       	push	r25
    22da:	af 93       	push	r26
    22dc:	bf 93       	push	r27
    22de:	ef 93       	push	r30
    22e0:	ff 93       	push	r31
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
	if(GS_ADC_Complete_Callback != NULL)
    22ea:	80 91 5a 02 	lds	r24, 0x025A
    22ee:	90 91 5b 02 	lds	r25, 0x025B
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	29 f0       	breq	.+10     	; 0x2300 <__vector_16+0x40>
	{
		GS_ADC_Complete_Callback();
    22f6:	e0 91 5a 02 	lds	r30, 0x025A
    22fa:	f0 91 5b 02 	lds	r31, 0x025B
    22fe:	09 95       	icall
	}
}
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	ff 91       	pop	r31
    2306:	ef 91       	pop	r30
    2308:	bf 91       	pop	r27
    230a:	af 91       	pop	r26
    230c:	9f 91       	pop	r25
    230e:	8f 91       	pop	r24
    2310:	7f 91       	pop	r23
    2312:	6f 91       	pop	r22
    2314:	5f 91       	pop	r21
    2316:	4f 91       	pop	r20
    2318:	3f 91       	pop	r19
    231a:	2f 91       	pop	r18
    231c:	0f 90       	pop	r0
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <ADC_vCallBack>:
void ADC_vCallBack(void(*Copy_pfun)(void))
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <ADC_vCallBack+0x6>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
	GS_ADC_Complete_Callback = Copy_pfun;
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	90 93 5b 02 	sts	0x025B, r25
    233c:	80 93 5a 02 	sts	0x025A, r24
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <SERVOM_vInit>:
#include "SERVOM_interface.h"
#include "SERVOM_private.h"
#include "SERVOM_config.h"

void SERVOM_vInit()
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
	GPIO_vSetPinDirection(APP_SERVOM_PORT, APP_SERVOM_PIN, OUTPUT_PIN);
    2352:	84 e0       	ldi	r24, 0x04	; 4
    2354:	65 e0       	ldi	r22, 0x05	; 5
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
	TIMERS_vSetICR(DUTY_CYCLE_PERIOD);//TOP Value for the Timer
    235c:	80 e2       	ldi	r24, 0x20	; 32
    235e:	9e e4       	ldi	r25, 0x4E	; 78
    2360:	0e 94 ef 08 	call	0x11de	; 0x11de <TIMERS_vSetICR>
}
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <SERVOM_vStart>:


void SERVOM_vStart(u8 Copy_u8Angle)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <SERVOM_vStart+0x6>
    2370:	0f 92       	push	r0
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	8b 83       	std	Y+3, r24	; 0x03
	u16 mappedValue = (Copy_u8Angle/0.18F) + 1000;
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	88 2f       	mov	r24, r24
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	aa 27       	eor	r26, r26
    2380:	97 fd       	sbrc	r25, 7
    2382:	a0 95       	com	r26
    2384:	ba 2f       	mov	r27, r26
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	2c ee       	ldi	r18, 0xEC	; 236
    2398:	31 e5       	ldi	r19, 0x51	; 81
    239a:	48 e3       	ldi	r20, 0x38	; 56
    239c:	5e e3       	ldi	r21, 0x3E	; 62
    239e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a e7       	ldi	r20, 0x7A	; 122
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_vSetCompareMatchValue(SERVOM_TIMER, SERVOM_TIMER_Channel, mappedValue);
    23ca:	29 81       	ldd	r18, Y+1	; 0x01
    23cc:	3a 81       	ldd	r19, Y+2	; 0x02
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	a9 01       	movw	r20, r18
    23d4:	0e 94 9f 08 	call	0x113e	; 0x113e <TIMERS_vSetCompareMatchValue>
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <SERVOM_vStop>:

void SERVOM_vStop(void)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
	TIMERS_vSetCompareMatchValue(SERVOM_TIMER, SERVOM_TIMER_Channel, 1000);
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	48 ee       	ldi	r20, 0xE8	; 232
    23f2:	53 e0       	ldi	r21, 0x03	; 3
    23f4:	0e 94 9f 08 	call	0x113e	; 0x113e <TIMERS_vSetCompareMatchValue>
}
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <LCD_I2C_vInit>:
#include "LCD_I2C_interface.h"
#include "LCD_I2C_private.h"


void LCD_I2C_vInit(void)
{
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	c6 54       	subi	r28, 0x46	; 70
    240c:	d0 40       	sbci	r29, 0x00	; 0
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	fe 01       	movw	r30, r28
    241a:	ed 5b       	subi	r30, 0xBD	; 189
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a0 e2       	ldi	r26, 0x20	; 32
    2424:	b2 e4       	ldi	r27, 0x42	; 66
    2426:	80 83       	st	Z, r24
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	a2 83       	std	Z+2, r26	; 0x02
    242c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242e:	8e 01       	movw	r16, r28
    2430:	01 5c       	subi	r16, 0xC1	; 193
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	fe 01       	movw	r30, r28
    2436:	ed 5b       	subi	r30, 0xBD	; 189
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	60 81       	ld	r22, Z
    243c:	71 81       	ldd	r23, Z+1	; 0x01
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	93 81       	ldd	r25, Z+3	; 0x03
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4a ef       	ldi	r20, 0xFA	; 250
    2448:	54 e4       	ldi	r21, 0x44	; 68
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	f8 01       	movw	r30, r16
    2454:	80 83       	st	Z, r24
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	a2 83       	std	Z+2, r26	; 0x02
    245a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    245c:	fe 01       	movw	r30, r28
    245e:	ff 96       	adiw	r30, 0x3f	; 63
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	2c f4       	brge	.+10     	; 0x2482 <LCD_I2C_vInit+0x84>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9e af       	std	Y+62, r25	; 0x3e
    247e:	8d af       	std	Y+61, r24	; 0x3d
    2480:	46 c0       	rjmp	.+140    	; 0x250e <LCD_I2C_vInit+0x110>
	else if (__tmp > 65535)
    2482:	fe 01       	movw	r30, r28
    2484:	ff 96       	adiw	r30, 0x3f	; 63
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	3f ef       	ldi	r19, 0xFF	; 255
    2492:	4f e7       	ldi	r20, 0x7F	; 127
    2494:	57 e4       	ldi	r21, 0x47	; 71
    2496:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249a:	18 16       	cp	r1, r24
    249c:	64 f5       	brge	.+88     	; 0x24f6 <LCD_I2C_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249e:	fe 01       	movw	r30, r28
    24a0:	ed 5b       	subi	r30, 0xBD	; 189
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e2       	ldi	r20, 0x20	; 32
    24b2:	51 e4       	ldi	r21, 0x41	; 65
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9e af       	std	Y+62, r25	; 0x3e
    24ca:	8d af       	std	Y+61, r24	; 0x3d
    24cc:	0f c0       	rjmp	.+30     	; 0x24ec <LCD_I2C_vInit+0xee>
    24ce:	88 ec       	ldi	r24, 0xC8	; 200
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9c af       	std	Y+60, r25	; 0x3c
    24d4:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    24d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <LCD_I2C_vInit+0xdc>
    24de:	9c af       	std	Y+60, r25	; 0x3c
    24e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    24e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	9e af       	std	Y+62, r25	; 0x3e
    24ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	69 f7       	brne	.-38     	; 0x24ce <LCD_I2C_vInit+0xd0>
    24f4:	16 c0       	rjmp	.+44     	; 0x2522 <LCD_I2C_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f6:	fe 01       	movw	r30, r28
    24f8:	ff 96       	adiw	r30, 0x3f	; 63
    24fa:	60 81       	ld	r22, Z
    24fc:	71 81       	ldd	r23, Z+1	; 0x01
    24fe:	82 81       	ldd	r24, Z+2	; 0x02
    2500:	93 81       	ldd	r25, Z+3	; 0x03
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e af       	std	Y+62, r25	; 0x3e
    250c:	8d af       	std	Y+61, r24	; 0x3d
    250e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2510:	9e ad       	ldd	r25, Y+62	; 0x3e
    2512:	9a af       	std	Y+58, r25	; 0x3a
    2514:	89 af       	std	Y+57, r24	; 0x39
    2516:	89 ad       	ldd	r24, Y+57	; 0x39
    2518:	9a ad       	ldd	r25, Y+58	; 0x3a
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_I2C_vInit+0x11c>
    251e:	9a af       	std	Y+58, r25	; 0x3a
    2520:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	LCD_I2C_vSendCommand_hf(0x30);
    2522:	80 e3       	ldi	r24, 0x30	; 48
    2524:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <LCD_I2C_vSendCommand_hf>
	LCD_I2C_vSendCommand_hf(0x20);
    2528:	80 e2       	ldi	r24, 0x20	; 32
    252a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <LCD_I2C_vSendCommand_hf>
	LCD_I2C_vSendCommand(LCD_I2C_4BIT_FUNCTION_SET);
    252e:	88 e2       	ldi	r24, 0x28	; 40
    2530:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_I2C_vSendCommand>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	a0 e8       	ldi	r26, 0x80	; 128
    253a:	bf e3       	ldi	r27, 0x3F	; 63
    253c:	8d ab       	std	Y+53, r24	; 0x35
    253e:	9e ab       	std	Y+54, r25	; 0x36
    2540:	af ab       	std	Y+55, r26	; 0x37
    2542:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2544:	6d a9       	ldd	r22, Y+53	; 0x35
    2546:	7e a9       	ldd	r23, Y+54	; 0x36
    2548:	8f a9       	ldd	r24, Y+55	; 0x37
    254a:	98 ad       	ldd	r25, Y+56	; 0x38
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4a ef       	ldi	r20, 0xFA	; 250
    2552:	54 e4       	ldi	r21, 0x44	; 68
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	89 ab       	std	Y+49, r24	; 0x31
    255e:	9a ab       	std	Y+50, r25	; 0x32
    2560:	ab ab       	std	Y+51, r26	; 0x33
    2562:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2564:	69 a9       	ldd	r22, Y+49	; 0x31
    2566:	7a a9       	ldd	r23, Y+50	; 0x32
    2568:	8b a9       	ldd	r24, Y+51	; 0x33
    256a:	9c a9       	ldd	r25, Y+52	; 0x34
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e8       	ldi	r20, 0x80	; 128
    2572:	5f e3       	ldi	r21, 0x3F	; 63
    2574:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2578:	88 23       	and	r24, r24
    257a:	2c f4       	brge	.+10     	; 0x2586 <LCD_I2C_vInit+0x188>
		__ticks = 1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	98 ab       	std	Y+48, r25	; 0x30
    2582:	8f a7       	std	Y+47, r24	; 0x2f
    2584:	3f c0       	rjmp	.+126    	; 0x2604 <LCD_I2C_vInit+0x206>
	else if (__tmp > 65535)
    2586:	69 a9       	ldd	r22, Y+49	; 0x31
    2588:	7a a9       	ldd	r23, Y+50	; 0x32
    258a:	8b a9       	ldd	r24, Y+51	; 0x33
    258c:	9c a9       	ldd	r25, Y+52	; 0x34
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	3f ef       	ldi	r19, 0xFF	; 255
    2592:	4f e7       	ldi	r20, 0x7F	; 127
    2594:	57 e4       	ldi	r21, 0x47	; 71
    2596:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    259a:	18 16       	cp	r1, r24
    259c:	4c f5       	brge	.+82     	; 0x25f0 <LCD_I2C_vInit+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259e:	6d a9       	ldd	r22, Y+53	; 0x35
    25a0:	7e a9       	ldd	r23, Y+54	; 0x36
    25a2:	8f a9       	ldd	r24, Y+55	; 0x37
    25a4:	98 ad       	ldd	r25, Y+56	; 0x38
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e2       	ldi	r20, 0x20	; 32
    25ac:	51 e4       	ldi	r21, 0x41	; 65
    25ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	98 ab       	std	Y+48, r25	; 0x30
    25c4:	8f a7       	std	Y+47, r24	; 0x2f
    25c6:	0f c0       	rjmp	.+30     	; 0x25e6 <LCD_I2C_vInit+0x1e8>
    25c8:	88 ec       	ldi	r24, 0xC8	; 200
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9e a7       	std	Y+46, r25	; 0x2e
    25ce:	8d a7       	std	Y+45, r24	; 0x2d
    25d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    25d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_I2C_vInit+0x1d6>
    25d8:	9e a7       	std	Y+46, r25	; 0x2e
    25da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25de:	98 a9       	ldd	r25, Y+48	; 0x30
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	98 ab       	std	Y+48, r25	; 0x30
    25e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	69 f7       	brne	.-38     	; 0x25c8 <LCD_I2C_vInit+0x1ca>
    25ee:	14 c0       	rjmp	.+40     	; 0x2618 <LCD_I2C_vInit+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f0:	69 a9       	ldd	r22, Y+49	; 0x31
    25f2:	7a a9       	ldd	r23, Y+50	; 0x32
    25f4:	8b a9       	ldd	r24, Y+51	; 0x33
    25f6:	9c a9       	ldd	r25, Y+52	; 0x34
    25f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	98 ab       	std	Y+48, r25	; 0x30
    2602:	8f a7       	std	Y+47, r24	; 0x2f
    2604:	8f a5       	ldd	r24, Y+47	; 0x2f
    2606:	98 a9       	ldd	r25, Y+48	; 0x30
    2608:	9c a7       	std	Y+44, r25	; 0x2c
    260a:	8b a7       	std	Y+43, r24	; 0x2b
    260c:	8b a5       	ldd	r24, Y+43	; 0x2b
    260e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <LCD_I2C_vInit+0x212>
    2614:	9c a7       	std	Y+44, r25	; 0x2c
    2616:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_I2C_vSendCommand(LCD_I2C_DISPLAY_ON_CURSOR_OFF|(LCD_I2C_CURSOR_ENABLE<<1)|(LCD_I2C_BLINK_ENABLE<<0));
    2618:	8c e0       	ldi	r24, 0x0C	; 12
    261a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_I2C_vSendCommand>
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 e8       	ldi	r26, 0x80	; 128
    2624:	bf e3       	ldi	r27, 0x3F	; 63
    2626:	8f a3       	std	Y+39, r24	; 0x27
    2628:	98 a7       	std	Y+40, r25	; 0x28
    262a:	a9 a7       	std	Y+41, r26	; 0x29
    262c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	6f a1       	ldd	r22, Y+39	; 0x27
    2630:	78 a5       	ldd	r23, Y+40	; 0x28
    2632:	89 a5       	ldd	r24, Y+41	; 0x29
    2634:	9a a5       	ldd	r25, Y+42	; 0x2a
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4a ef       	ldi	r20, 0xFA	; 250
    263c:	54 e4       	ldi	r21, 0x44	; 68
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	8b a3       	std	Y+35, r24	; 0x23
    2648:	9c a3       	std	Y+36, r25	; 0x24
    264a:	ad a3       	std	Y+37, r26	; 0x25
    264c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    264e:	6b a1       	ldd	r22, Y+35	; 0x23
    2650:	7c a1       	ldd	r23, Y+36	; 0x24
    2652:	8d a1       	ldd	r24, Y+37	; 0x25
    2654:	9e a1       	ldd	r25, Y+38	; 0x26
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	2c f4       	brge	.+10     	; 0x2670 <LCD_I2C_vInit+0x272>
		__ticks = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9a a3       	std	Y+34, r25	; 0x22
    266c:	89 a3       	std	Y+33, r24	; 0x21
    266e:	3f c0       	rjmp	.+126    	; 0x26ee <LCD_I2C_vInit+0x2f0>
	else if (__tmp > 65535)
    2670:	6b a1       	ldd	r22, Y+35	; 0x23
    2672:	7c a1       	ldd	r23, Y+36	; 0x24
    2674:	8d a1       	ldd	r24, Y+37	; 0x25
    2676:	9e a1       	ldd	r25, Y+38	; 0x26
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	3f ef       	ldi	r19, 0xFF	; 255
    267c:	4f e7       	ldi	r20, 0x7F	; 127
    267e:	57 e4       	ldi	r21, 0x47	; 71
    2680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2684:	18 16       	cp	r1, r24
    2686:	4c f5       	brge	.+82     	; 0x26da <LCD_I2C_vInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2688:	6f a1       	ldd	r22, Y+39	; 0x27
    268a:	78 a5       	ldd	r23, Y+40	; 0x28
    268c:	89 a5       	ldd	r24, Y+41	; 0x29
    268e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e2       	ldi	r20, 0x20	; 32
    2696:	51 e4       	ldi	r21, 0x41	; 65
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	9a a3       	std	Y+34, r25	; 0x22
    26ae:	89 a3       	std	Y+33, r24	; 0x21
    26b0:	0f c0       	rjmp	.+30     	; 0x26d0 <LCD_I2C_vInit+0x2d2>
    26b2:	88 ec       	ldi	r24, 0xC8	; 200
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	98 a3       	std	Y+32, r25	; 0x20
    26b8:	8f 8f       	std	Y+31, r24	; 0x1f
    26ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26bc:	98 a1       	ldd	r25, Y+32	; 0x20
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <LCD_I2C_vInit+0x2c0>
    26c2:	98 a3       	std	Y+32, r25	; 0x20
    26c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c6:	89 a1       	ldd	r24, Y+33	; 0x21
    26c8:	9a a1       	ldd	r25, Y+34	; 0x22
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	9a a3       	std	Y+34, r25	; 0x22
    26ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d0:	89 a1       	ldd	r24, Y+33	; 0x21
    26d2:	9a a1       	ldd	r25, Y+34	; 0x22
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	69 f7       	brne	.-38     	; 0x26b2 <LCD_I2C_vInit+0x2b4>
    26d8:	14 c0       	rjmp	.+40     	; 0x2702 <LCD_I2C_vInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26da:	6b a1       	ldd	r22, Y+35	; 0x23
    26dc:	7c a1       	ldd	r23, Y+36	; 0x24
    26de:	8d a1       	ldd	r24, Y+37	; 0x25
    26e0:	9e a1       	ldd	r25, Y+38	; 0x26
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9a a3       	std	Y+34, r25	; 0x22
    26ec:	89 a3       	std	Y+33, r24	; 0x21
    26ee:	89 a1       	ldd	r24, Y+33	; 0x21
    26f0:	9a a1       	ldd	r25, Y+34	; 0x22
    26f2:	9e 8f       	std	Y+30, r25	; 0x1e
    26f4:	8d 8f       	std	Y+29, r24	; 0x1d
    26f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <LCD_I2C_vInit+0x2fc>
    26fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2700:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_I2C_vSendCommand(LCD_I2C_CLEAR);
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_I2C_vSendCommand>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e4       	ldi	r27, 0x40	; 64
    2710:	89 8f       	std	Y+25, r24	; 0x19
    2712:	9a 8f       	std	Y+26, r25	; 0x1a
    2714:	ab 8f       	std	Y+27, r26	; 0x1b
    2716:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2718:	69 8d       	ldd	r22, Y+25	; 0x19
    271a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    271c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    271e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4a ef       	ldi	r20, 0xFA	; 250
    2726:	54 e4       	ldi	r21, 0x44	; 68
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	8d 8b       	std	Y+21, r24	; 0x15
    2732:	9e 8b       	std	Y+22, r25	; 0x16
    2734:	af 8b       	std	Y+23, r26	; 0x17
    2736:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2738:	6d 89       	ldd	r22, Y+21	; 0x15
    273a:	7e 89       	ldd	r23, Y+22	; 0x16
    273c:	8f 89       	ldd	r24, Y+23	; 0x17
    273e:	98 8d       	ldd	r25, Y+24	; 0x18
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e8       	ldi	r20, 0x80	; 128
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274c:	88 23       	and	r24, r24
    274e:	2c f4       	brge	.+10     	; 0x275a <LCD_I2C_vInit+0x35c>
		__ticks = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
    2758:	3f c0       	rjmp	.+126    	; 0x27d8 <LCD_I2C_vInit+0x3da>
	else if (__tmp > 65535)
    275a:	6d 89       	ldd	r22, Y+21	; 0x15
    275c:	7e 89       	ldd	r23, Y+22	; 0x16
    275e:	8f 89       	ldd	r24, Y+23	; 0x17
    2760:	98 8d       	ldd	r25, Y+24	; 0x18
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	4c f5       	brge	.+82     	; 0x27c4 <LCD_I2C_vInit+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	69 8d       	ldd	r22, Y+25	; 0x19
    2774:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2776:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2778:	9c 8d       	ldd	r25, Y+28	; 0x1c
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9c 8b       	std	Y+20, r25	; 0x14
    2798:	8b 8b       	std	Y+19, r24	; 0x13
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <LCD_I2C_vInit+0x3bc>
    279c:	88 ec       	ldi	r24, 0xC8	; 200
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9a 8b       	std	Y+18, r25	; 0x12
    27a2:	89 8b       	std	Y+17, r24	; 0x11
    27a4:	89 89       	ldd	r24, Y+17	; 0x11
    27a6:	9a 89       	ldd	r25, Y+18	; 0x12
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <LCD_I2C_vInit+0x3aa>
    27ac:	9a 8b       	std	Y+18, r25	; 0x12
    27ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8b 89       	ldd	r24, Y+19	; 0x13
    27b2:	9c 89       	ldd	r25, Y+20	; 0x14
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	9c 8b       	std	Y+20, r25	; 0x14
    27b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8b 89       	ldd	r24, Y+19	; 0x13
    27bc:	9c 89       	ldd	r25, Y+20	; 0x14
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <LCD_I2C_vInit+0x39e>
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <LCD_I2C_vInit+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	6d 89       	ldd	r22, Y+21	; 0x15
    27c6:	7e 89       	ldd	r23, Y+22	; 0x16
    27c8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ca:	98 8d       	ldd	r25, Y+24	; 0x18
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	8b 89       	ldd	r24, Y+19	; 0x13
    27da:	9c 89       	ldd	r25, Y+20	; 0x14
    27dc:	98 8b       	std	Y+16, r25	; 0x10
    27de:	8f 87       	std	Y+15, r24	; 0x0f
    27e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e2:	98 89       	ldd	r25, Y+16	; 0x10
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <LCD_I2C_vInit+0x3e6>
    27e8:	98 8b       	std	Y+16, r25	; 0x10
    27ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_I2C_vSendCommand(LCD_I2C_ENTRY_MODE_SET);
    27ec:	86 e0       	ldi	r24, 0x06	; 6
    27ee:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_I2C_vSendCommand>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e8       	ldi	r26, 0x80	; 128
    27f8:	bf e3       	ldi	r27, 0x3F	; 63
    27fa:	8b 87       	std	Y+11, r24	; 0x0b
    27fc:	9c 87       	std	Y+12, r25	; 0x0c
    27fe:	ad 87       	std	Y+13, r26	; 0x0d
    2800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	6b 85       	ldd	r22, Y+11	; 0x0b
    2804:	7c 85       	ldd	r23, Y+12	; 0x0c
    2806:	8d 85       	ldd	r24, Y+13	; 0x0d
    2808:	9e 85       	ldd	r25, Y+14	; 0x0e
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a ef       	ldi	r20, 0xFA	; 250
    2810:	54 e4       	ldi	r21, 0x44	; 68
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8f 83       	std	Y+7, r24	; 0x07
    281c:	98 87       	std	Y+8, r25	; 0x08
    281e:	a9 87       	std	Y+9, r26	; 0x09
    2820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2822:	6f 81       	ldd	r22, Y+7	; 0x07
    2824:	78 85       	ldd	r23, Y+8	; 0x08
    2826:	89 85       	ldd	r24, Y+9	; 0x09
    2828:	9a 85       	ldd	r25, Y+10	; 0x0a
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <LCD_I2C_vInit+0x446>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <LCD_I2C_vInit+0x4c4>
	else if (__tmp > 65535)
    2844:	6f 81       	ldd	r22, Y+7	; 0x07
    2846:	78 85       	ldd	r23, Y+8	; 0x08
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <LCD_I2C_vInit+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	6b 85       	ldd	r22, Y+11	; 0x0b
    285e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2860:	8d 85       	ldd	r24, Y+13	; 0x0d
    2862:	9e 85       	ldd	r25, Y+14	; 0x0e
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <LCD_I2C_vInit+0x4a6>
    2886:	88 ec       	ldi	r24, 0xC8	; 200
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9c 83       	std	Y+4, r25	; 0x04
    288c:	8b 83       	std	Y+3, r24	; 0x03
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_I2C_vInit+0x494>
    2896:	9c 83       	std	Y+4, r25	; 0x04
    2898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	9e 81       	ldd	r25, Y+6	; 0x06
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9e 83       	std	Y+6, r25	; 0x06
    28a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <LCD_I2C_vInit+0x488>
    28ac:	14 c0       	rjmp	.+40     	; 0x28d6 <LCD_I2C_vInit+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	6f 81       	ldd	r22, Y+7	; 0x07
    28b0:	78 85       	ldd	r23, Y+8	; 0x08
    28b2:	89 85       	ldd	r24, Y+9	; 0x09
    28b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9e 83       	std	Y+6, r25	; 0x06
    28c0:	8d 83       	std	Y+5, r24	; 0x05
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_I2C_vInit+0x4d0>
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    28d6:	ca 5b       	subi	r28, 0xBA	; 186
    28d8:	df 4f       	sbci	r29, 0xFF	; 255
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	08 95       	ret

000028ee <LCD_I2C_vtoggleEnable>:

void LCD_I2C_vtoggleEnable(void)
{
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	2e 97       	sbiw	r28, 0x0e	; 14
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
	TWDR |= 0x02;
    2902:	a3 e2       	ldi	r26, 0x23	; 35
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e3 e2       	ldi	r30, 0x23	; 35
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	82 60       	ori	r24, 0x02	; 2
    290e:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2910:	e6 e5       	ldi	r30, 0x56	; 86
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	84 e8       	ldi	r24, 0x84	; 132
    2916:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2918:	e6 e5       	ldi	r30, 0x56	; 86
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	88 23       	and	r24, r24
    2920:	dc f7       	brge	.-10     	; 0x2918 <LCD_I2C_vtoggleEnable+0x2a>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a0 e8       	ldi	r26, 0x80	; 128
    2928:	bf e3       	ldi	r27, 0x3F	; 63
    292a:	8b 87       	std	Y+11, r24	; 0x0b
    292c:	9c 87       	std	Y+12, r25	; 0x0c
    292e:	ad 87       	std	Y+13, r26	; 0x0d
    2930:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2932:	6b 85       	ldd	r22, Y+11	; 0x0b
    2934:	7c 85       	ldd	r23, Y+12	; 0x0c
    2936:	8d 85       	ldd	r24, Y+13	; 0x0d
    2938:	9e 85       	ldd	r25, Y+14	; 0x0e
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4a ef       	ldi	r20, 0xFA	; 250
    2940:	54 e4       	ldi	r21, 0x44	; 68
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	8f 83       	std	Y+7, r24	; 0x07
    294c:	98 87       	std	Y+8, r25	; 0x08
    294e:	a9 87       	std	Y+9, r26	; 0x09
    2950:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2952:	6f 81       	ldd	r22, Y+7	; 0x07
    2954:	78 85       	ldd	r23, Y+8	; 0x08
    2956:	89 85       	ldd	r24, Y+9	; 0x09
    2958:	9a 85       	ldd	r25, Y+10	; 0x0a
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5f e3       	ldi	r21, 0x3F	; 63
    2962:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2966:	88 23       	and	r24, r24
    2968:	2c f4       	brge	.+10     	; 0x2974 <LCD_I2C_vtoggleEnable+0x86>
		__ticks = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	9e 83       	std	Y+6, r25	; 0x06
    2970:	8d 83       	std	Y+5, r24	; 0x05
    2972:	3f c0       	rjmp	.+126    	; 0x29f2 <LCD_I2C_vtoggleEnable+0x104>
	else if (__tmp > 65535)
    2974:	6f 81       	ldd	r22, Y+7	; 0x07
    2976:	78 85       	ldd	r23, Y+8	; 0x08
    2978:	89 85       	ldd	r24, Y+9	; 0x09
    297a:	9a 85       	ldd	r25, Y+10	; 0x0a
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	4f e7       	ldi	r20, 0x7F	; 127
    2982:	57 e4       	ldi	r21, 0x47	; 71
    2984:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2988:	18 16       	cp	r1, r24
    298a:	4c f5       	brge	.+82     	; 0x29de <LCD_I2C_vtoggleEnable+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298c:	6b 85       	ldd	r22, Y+11	; 0x0b
    298e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2990:	8d 85       	ldd	r24, Y+13	; 0x0d
    2992:	9e 85       	ldd	r25, Y+14	; 0x0e
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e2       	ldi	r20, 0x20	; 32
    299a:	51 e4       	ldi	r21, 0x41	; 65
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	0f c0       	rjmp	.+30     	; 0x29d4 <LCD_I2C_vtoggleEnable+0xe6>
    29b6:	88 ec       	ldi	r24, 0xC8	; 200
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9c 83       	std	Y+4, r25	; 0x04
    29bc:	8b 83       	std	Y+3, r24	; 0x03
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	9c 81       	ldd	r25, Y+4	; 0x04
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <LCD_I2C_vtoggleEnable+0xd4>
    29c6:	9c 83       	std	Y+4, r25	; 0x04
    29c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	9e 81       	ldd	r25, Y+6	; 0x06
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	9e 83       	std	Y+6, r25	; 0x06
    29d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	69 f7       	brne	.-38     	; 0x29b6 <LCD_I2C_vtoggleEnable+0xc8>
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <LCD_I2C_vtoggleEnable+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29de:	6f 81       	ldd	r22, Y+7	; 0x07
    29e0:	78 85       	ldd	r23, Y+8	; 0x08
    29e2:	89 85       	ldd	r24, Y+9	; 0x09
    29e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9e 83       	std	Y+6, r25	; 0x06
    29f0:	8d 83       	std	Y+5, r24	; 0x05
    29f2:	8d 81       	ldd	r24, Y+5	; 0x05
    29f4:	9e 81       	ldd	r25, Y+6	; 0x06
    29f6:	9a 83       	std	Y+2, r25	; 0x02
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <LCD_I2C_vtoggleEnable+0x110>
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	TWDR &= ~0x02;
    2a06:	a3 e2       	ldi	r26, 0x23	; 35
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	e3 e2       	ldi	r30, 0x23	; 35
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	8d 7f       	andi	r24, 0xFD	; 253
    2a12:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2a14:	e6 e5       	ldi	r30, 0x56	; 86
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	84 e8       	ldi	r24, 0x84	; 132
    2a1a:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2a1c:	e6 e5       	ldi	r30, 0x56	; 86
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	88 23       	and	r24, r24
    2a24:	dc f7       	brge	.-10     	; 0x2a1c <LCD_I2C_vtoggleEnable+0x12e>
}
    2a26:	2e 96       	adiw	r28, 0x0e	; 14
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <LCD_I2C_vSendCommand_hf>:


void LCD_I2C_vSendCommand_hf(u8 command)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	0f 92       	push	r0
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	89 83       	std	Y+1, r24	; 0x01
	TWDR &=~0x01;
    2a44:	a3 e2       	ldi	r26, 0x23	; 35
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e3 e2       	ldi	r30, 0x23	; 35
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8e 7f       	andi	r24, 0xFE	; 254
    2a50:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2a52:	e6 e5       	ldi	r30, 0x56	; 86
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	84 e8       	ldi	r24, 0x84	; 132
    2a58:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2a5a:	e6 e5       	ldi	r30, 0x56	; 86
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	88 23       	and	r24, r24
    2a62:	dc f7       	brge	.-10     	; 0x2a5a <LCD_I2C_vSendCommand_hf+0x22>
	TWDR &= 0x0F;
    2a64:	a3 e2       	ldi	r26, 0x23	; 35
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e3 e2       	ldi	r30, 0x23	; 35
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	8f 70       	andi	r24, 0x0F	; 15
    2a70:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2a72:	e6 e5       	ldi	r30, 0x56	; 86
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	84 e8       	ldi	r24, 0x84	; 132
    2a78:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2a7a:	e6 e5       	ldi	r30, 0x56	; 86
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	88 23       	and	r24, r24
    2a82:	dc f7       	brge	.-10     	; 0x2a7a <LCD_I2C_vSendCommand_hf+0x42>
	TWDR |= (command & 0xF0);
    2a84:	a3 e2       	ldi	r26, 0x23	; 35
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e3 e2       	ldi	r30, 0x23	; 35
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	98 2f       	mov	r25, r24
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	80 7f       	andi	r24, 0xF0	; 240
    2a94:	89 2b       	or	r24, r25
    2a96:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2a98:	e6 e5       	ldi	r30, 0x56	; 86
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	84 e8       	ldi	r24, 0x84	; 132
    2a9e:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2aa0:	e6 e5       	ldi	r30, 0x56	; 86
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	88 23       	and	r24, r24
    2aa8:	dc f7       	brge	.-10     	; 0x2aa0 <LCD_I2C_vSendCommand_hf+0x68>
	LCD_I2C_vtoggleEnable();
    2aaa:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_I2C_vtoggleEnable>
}
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <LCD_I2C_vSendCommand>:


void LCD_I2C_vSendCommand(u8 command)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	0f 92       	push	r0
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	89 83       	std	Y+1, r24	; 0x01
	TWDR&=~0x01;								// rs = 0; Selecting register as command register
    2ac2:	a3 e2       	ldi	r26, 0x23	; 35
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e3 e2       	ldi	r30, 0x23	; 35
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	8e 7f       	andi	r24, 0xFE	; 254
    2ace:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);	// Enable I2C and clear interrupt
    2ad0:	e6 e5       	ldi	r30, 0x56	; 86
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	84 e8       	ldi	r24, 0x84	; 132
    2ad6:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2ad8:	e6 e5       	ldi	r30, 0x56	; 86
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	88 23       	and	r24, r24
    2ae0:	dc f7       	brge	.-10     	; 0x2ad8 <LCD_I2C_vSendCommand+0x22>

	TWDR &= 0x0F;                   			// clearing the Higher 4 bits
    2ae2:	a3 e2       	ldi	r26, 0x23	; 35
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e3 e2       	ldi	r30, 0x23	; 35
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	8f 70       	andi	r24, 0x0F	; 15
    2aee:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);	// Enable I2C and clear interrupt
    2af0:	e6 e5       	ldi	r30, 0x56	; 86
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	84 e8       	ldi	r24, 0x84	; 132
    2af6:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2af8:	e6 e5       	ldi	r30, 0x56	; 86
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	88 23       	and	r24, r24
    2b00:	dc f7       	brge	.-10     	; 0x2af8 <LCD_I2C_vSendCommand+0x42>
	TWDR |= (command & 0xF0);						// Masking higher 4 bits and sending to LCD
    2b02:	a3 e2       	ldi	r26, 0x23	; 35
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e3 e2       	ldi	r30, 0x23	; 35
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	98 2f       	mov	r25, r24
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	80 7f       	andi	r24, 0xF0	; 240
    2b12:	89 2b       	or	r24, r25
    2b14:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);	//Enable I2C and clear interrupt
    2b16:	e6 e5       	ldi	r30, 0x56	; 86
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	84 e8       	ldi	r24, 0x84	; 132
    2b1c:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2b1e:	e6 e5       	ldi	r30, 0x56	; 86
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	88 23       	and	r24, r24
    2b26:	dc f7       	brge	.-10     	; 0x2b1e <LCD_I2C_vSendCommand+0x68>
	LCD_I2C_vtoggleEnable();
    2b28:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_I2C_vtoggleEnable>

	TWDR &= 0x0F;                    			// clearing the Higher 4 bits
    2b2c:	a3 e2       	ldi	r26, 0x23	; 35
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	e3 e2       	ldi	r30, 0x23	; 35
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	8f 70       	andi	r24, 0x0F	; 15
    2b38:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);	// Enable I2C and clear interrupt
    2b3a:	e6 e5       	ldi	r30, 0x56	; 86
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	84 e8       	ldi	r24, 0x84	; 132
    2b40:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2b42:	e6 e5       	ldi	r30, 0x56	; 86
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	88 23       	and	r24, r24
    2b4a:	dc f7       	brge	.-10     	; 0x2b42 <LCD_I2C_vSendCommand+0x8c>
	TWDR |= ((command & 0x0F)<<4);					// Masking lower 4 bits and sending to LCD
    2b4c:	a3 e2       	ldi	r26, 0x23	; 35
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e3 e2       	ldi	r30, 0x23	; 35
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	28 2f       	mov	r18, r24
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	88 2f       	mov	r24, r24
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	82 95       	swap	r24
    2b60:	92 95       	swap	r25
    2b62:	90 7f       	andi	r25, 0xF0	; 240
    2b64:	98 27       	eor	r25, r24
    2b66:	80 7f       	andi	r24, 0xF0	; 240
    2b68:	98 27       	eor	r25, r24
    2b6a:	82 2b       	or	r24, r18
    2b6c:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);	// Enable I2C and clear interrupt
    2b6e:	e6 e5       	ldi	r30, 0x56	; 86
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	84 e8       	ldi	r24, 0x84	; 132
    2b74:	80 83       	st	Z, r24
	while(!(TWCR &(1<<TWCR_TWINT)));
    2b76:	e6 e5       	ldi	r30, 0x56	; 86
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	88 23       	and	r24, r24
    2b7e:	dc f7       	brge	.-10     	; 0x2b76 <LCD_I2C_vSendCommand+0xc0>
	LCD_I2C_vtoggleEnable();
    2b80:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_I2C_vtoggleEnable>

}
    2b84:	0f 90       	pop	r0
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <LCD_I2C_vSendChar>:

void LCD_I2C_vSendChar(u8 character)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	0f 92       	push	r0
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	89 83       	std	Y+1, r24	; 0x01
	TWDR|=0x01;
    2b98:	a3 e2       	ldi	r26, 0x23	; 35
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e3 e2       	ldi	r30, 0x23	; 35
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	81 60       	ori	r24, 0x01	; 1
    2ba4:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2ba6:	e6 e5       	ldi	r30, 0x56	; 86
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	84 e8       	ldi	r24, 0x84	; 132
    2bac:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWCR_TWINT)));
    2bae:	e6 e5       	ldi	r30, 0x56	; 86
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 23       	and	r24, r24
    2bb6:	dc f7       	brge	.-10     	; 0x2bae <LCD_I2C_vSendChar+0x22>
	TWDR &= 0x0F;
    2bb8:	a3 e2       	ldi	r26, 0x23	; 35
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e3 e2       	ldi	r30, 0x23	; 35
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8f 70       	andi	r24, 0x0F	; 15
    2bc4:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2bc6:	e6 e5       	ldi	r30, 0x56	; 86
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	84 e8       	ldi	r24, 0x84	; 132
    2bcc:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWCR_TWINT)));
    2bce:	e6 e5       	ldi	r30, 0x56	; 86
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	88 23       	and	r24, r24
    2bd6:	dc f7       	brge	.-10     	; 0x2bce <LCD_I2C_vSendChar+0x42>
	TWDR |= (character & 0xF0);
    2bd8:	a3 e2       	ldi	r26, 0x23	; 35
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e3 e2       	ldi	r30, 0x23	; 35
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	98 2f       	mov	r25, r24
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	80 7f       	andi	r24, 0xF0	; 240
    2be8:	89 2b       	or	r24, r25
    2bea:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2bec:	e6 e5       	ldi	r30, 0x56	; 86
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	84 e8       	ldi	r24, 0x84	; 132
    2bf2:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWCR_TWINT)));
    2bf4:	e6 e5       	ldi	r30, 0x56	; 86
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	88 23       	and	r24, r24
    2bfc:	dc f7       	brge	.-10     	; 0x2bf4 <LCD_I2C_vSendChar+0x68>
	LCD_I2C_vtoggleEnable();
    2bfe:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_I2C_vtoggleEnable>

	TWDR &= 0x0F;
    2c02:	a3 e2       	ldi	r26, 0x23	; 35
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e3 e2       	ldi	r30, 0x23	; 35
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	8f 70       	andi	r24, 0x0F	; 15
    2c0e:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2c10:	e6 e5       	ldi	r30, 0x56	; 86
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	84 e8       	ldi	r24, 0x84	; 132
    2c16:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWCR_TWINT)));
    2c18:	e6 e5       	ldi	r30, 0x56	; 86
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	88 23       	and	r24, r24
    2c20:	dc f7       	brge	.-10     	; 0x2c18 <LCD_I2C_vSendChar+0x8c>
	TWDR |= ((character & 0x0F)<<4);
    2c22:	a3 e2       	ldi	r26, 0x23	; 35
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e3 e2       	ldi	r30, 0x23	; 35
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	82 95       	swap	r24
    2c36:	92 95       	swap	r25
    2c38:	90 7f       	andi	r25, 0xF0	; 240
    2c3a:	98 27       	eor	r25, r24
    2c3c:	80 7f       	andi	r24, 0xF0	; 240
    2c3e:	98 27       	eor	r25, r24
    2c40:	82 2b       	or	r24, r18
    2c42:	8c 93       	st	X, r24
	TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2c44:	e6 e5       	ldi	r30, 0x56	; 86
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	84 e8       	ldi	r24, 0x84	; 132
    2c4a:	80 83       	st	Z, r24
	while  (!(TWCR &(1<<TWCR_TWINT)));
    2c4c:	e6 e5       	ldi	r30, 0x56	; 86
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	88 23       	and	r24, r24
    2c54:	dc f7       	brge	.-10     	; 0x2c4c <LCD_I2C_vSendChar+0xc0>
	LCD_I2C_vtoggleEnable();
    2c56:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_I2C_vtoggleEnable>
}
    2c5a:	0f 90       	pop	r0
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	08 95       	ret

00002c62 <LCD_I2C_vClear>:




void LCD_I2C_vClear(void)
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
	LCD_I2C_vSendCommand(0x01);
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_I2C_vSendCommand>
}
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <LCD_I2C_vSendString>:


void LCD_I2C_vSendString(const char *str)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <LCD_I2C_vSendString+0x6>
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	0b c0       	rjmp	.+22     	; 0x2c9c <LCD_I2C_vSendString+0x26>
	while(*str != '\0')
	{
		LCD_I2C_vSendChar(*str++);
    2c86:	e9 81       	ldd	r30, Y+1	; 0x01
    2c88:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8a:	20 81       	ld	r18, Z
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	01 96       	adiw	r24, 0x01	; 1
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	82 2f       	mov	r24, r18
    2c98:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_I2C_vSendChar>
}


void LCD_I2C_vSendString(const char *str)
{
	while(*str != '\0')
    2c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca0:	80 81       	ld	r24, Z
    2ca2:	88 23       	and	r24, r24
    2ca4:	81 f7       	brne	.-32     	; 0x2c86 <LCD_I2C_vSendString+0x10>
	{
		LCD_I2C_vSendChar(*str++);
	}
}
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	08 95       	ret

00002cb0 <LCD_I2C_vWriteNumber>:

void LCD_I2C_vWriteNumber(s32 num)//500
{
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <LCD_I2C_vWriteNumber+0x6>
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <LCD_I2C_vWriteNumber+0x8>
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <LCD_I2C_vWriteNumber+0xa>
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
	s32 reverse = 0, count = 0;
    2cc2:	1c 82       	std	Y+4, r1	; 0x04
    2cc4:	1b 82       	std	Y+3, r1	; 0x03
    2cc6:	1a 82       	std	Y+2, r1	; 0x02
    2cc8:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	59 f5       	brne	.+86     	; 0x2d28 <LCD_I2C_vWriteNumber+0x78>
	{
		LCD_I2C_vSendChar('0');
    2cd2:	80 e3       	ldi	r24, 0x30	; 48
    2cd4:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_I2C_vSendChar>
    2cd8:	4a c0       	rjmp	.+148    	; 0x2d6e <LCD_I2C_vWriteNumber+0xbe>
	}
	else
	{
		while(num)
		{
			reverse = reverse * 10 + num % 10;
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	9c 01       	movw	r18, r24
    2ce0:	22 0f       	add	r18, r18
    2ce2:	33 1f       	adc	r19, r19
    2ce4:	c9 01       	movw	r24, r18
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	f9 01       	movw	r30, r18
    2cf0:	e8 0f       	add	r30, r24
    2cf2:	f9 1f       	adc	r31, r25
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	2a e0       	ldi	r18, 0x0A	; 10
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	b9 01       	movw	r22, r18
    2cfe:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    2d02:	8e 0f       	add	r24, r30
    2d04:	9f 1f       	adc	r25, r31
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8b 83       	std	Y+3, r24	; 0x03
			num/=10;
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	2a e0       	ldi	r18, 0x0A	; 10
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	b9 01       	movw	r22, r18
    2d14:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
			count++;
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	9a 81       	ldd	r25, Y+2	; 0x02
    2d22:	01 96       	adiw	r24, 0x01	; 1
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_I2C_vSendChar('0');
	}
	else
	{
		while(num)
    2d28:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	a9 f6       	brne	.-86     	; 0x2cda <LCD_I2C_vWriteNumber+0x2a>
    2d30:	19 c0       	rjmp	.+50     	; 0x2d64 <LCD_I2C_vWriteNumber+0xb4>
			count++;
		}

		while(count > 0)//005
		{
			LCD_I2C_vSendChar((reverse%10) + '0');
    2d32:	8b 81       	ldd	r24, Y+3	; 0x03
    2d34:	9c 81       	ldd	r25, Y+4	; 0x04
    2d36:	2a e0       	ldi	r18, 0x0A	; 10
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	b9 01       	movw	r22, r18
    2d3c:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    2d40:	80 5d       	subi	r24, 0xD0	; 208
    2d42:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_I2C_vSendChar>
			reverse/=10;
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4a:	2a e0       	ldi	r18, 0x0A	; 10
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	b9 01       	movw	r22, r18
    2d50:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    2d54:	cb 01       	movw	r24, r22
    2d56:	9c 83       	std	Y+4, r25	; 0x04
    2d58:	8b 83       	std	Y+3, r24	; 0x03
			count--;
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	9a 83       	std	Y+2, r25	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01
			reverse = reverse * 10 + num % 10;
			num/=10;
			count++;
		}

		while(count > 0)//005
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	18 16       	cp	r1, r24
    2d6a:	19 06       	cpc	r1, r25
    2d6c:	14 f3       	brlt	.-60     	; 0x2d32 <LCD_I2C_vWriteNumber+0x82>
			LCD_I2C_vSendChar((reverse%10) + '0');
			reverse/=10;
			count--;
		}
	}
}
    2d6e:	26 96       	adiw	r28, 0x06	; 6
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	de bf       	out	0x3e, r29	; 62
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	cd bf       	out	0x3d, r28	; 61
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <LCD_I2C_vSendNumber>:
void LCD_I2C_vSendNumber(s32 num)
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <LCD_I2C_vSendNumber+0x6>
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
	if(num >= 0)
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	99 23       	and	r25, r25
    2d94:	2c f0       	brlt	.+10     	; 0x2da0 <LCD_I2C_vSendNumber+0x20>
	{
		LCD_I2C_vWriteNumber(num);
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_I2C_vWriteNumber>
    2d9e:	0a c0       	rjmp	.+20     	; 0x2db4 <LCD_I2C_vSendNumber+0x34>
	}
	else
	{
		LCD_I2C_vSendChar('-');
    2da0:	8d e2       	ldi	r24, 0x2D	; 45
    2da2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_I2C_vSendChar>
		LCD_I2C_vWriteNumber(-1*num);
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	9a 81       	ldd	r25, Y+2	; 0x02
    2daa:	90 95       	com	r25
    2dac:	81 95       	neg	r24
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_I2C_vWriteNumber>
	}
}
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <LCD_I2C_vDisplayCustomChar>:

void LCD_I2C_vDisplayCustomChar(u8 charId)
{
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	0f 92       	push	r0
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	89 83       	std	Y+1, r24	; 0x01
	if(charId < 8)
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	88 30       	cpi	r24, 0x08	; 8
    2dce:	18 f4       	brcc	.+6      	; 0x2dd6 <LCD_I2C_vDisplayCustomChar+0x18>
	{
		LCD_I2C_vSendChar(charId);
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_I2C_vSendChar>
	}
	else
	{
		//Error
	}
}
    2dd6:	0f 90       	pop	r0
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	08 95       	ret

00002dde <LCD_I2C_vSaveCustomChar>:

void LCD_I2C_vSaveCustomChar(u8* charArr, u8 charId)
{
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <LCD_I2C_vSaveCustomChar+0x6>
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <LCD_I2C_vSaveCustomChar+0x8>
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	9b 83       	std	Y+3, r25	; 0x03
    2dec:	8a 83       	std	Y+2, r24	; 0x02
    2dee:	6c 83       	std	Y+4, r22	; 0x04
	if(charId < 8)
    2df0:	8c 81       	ldd	r24, Y+4	; 0x04
    2df2:	88 30       	cpi	r24, 0x08	; 8
    2df4:	10 f5       	brcc	.+68     	; 0x2e3a <LCD_I2C_vSaveCustomChar+0x5c>
	{
		LCD_I2C_vSendCommand(LCD_I2C_CGRAM_BASE_ADDRESS + (charId * 8));
    2df6:	8c 81       	ldd	r24, Y+4	; 0x04
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	08 96       	adiw	r24, 0x08	; 8
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_I2C_vSendCommand>
		for(u8 i=0; i<8; i++)
    2e0e:	19 82       	std	Y+1, r1	; 0x01
    2e10:	0e c0       	rjmp	.+28     	; 0x2e2e <LCD_I2C_vSaveCustomChar+0x50>
		{
			LCD_I2C_vSendChar(charArr[i]);
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	e2 0f       	add	r30, r18
    2e20:	f3 1f       	adc	r31, r19
    2e22:	80 81       	ld	r24, Z
    2e24:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_I2C_vSendChar>
void LCD_I2C_vSaveCustomChar(u8* charArr, u8 charId)
{
	if(charId < 8)
	{
		LCD_I2C_vSendCommand(LCD_I2C_CGRAM_BASE_ADDRESS + (charId * 8));
		for(u8 i=0; i<8; i++)
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	8f 5f       	subi	r24, 0xFF	; 255
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	88 30       	cpi	r24, 0x08	; 8
    2e32:	78 f3       	brcs	.-34     	; 0x2e12 <LCD_I2C_vSaveCustomChar+0x34>
		{
			LCD_I2C_vSendChar(charArr[i]);
		}
		LCD_I2C_vSendCommand(LCD_I2C_DDRAM_BASE_ADDRESS);
    2e34:	80 e8       	ldi	r24, 0x80	; 128
    2e36:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_I2C_vSendCommand>
	}
	else
	{
		//Error
	}
}
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <LCD_I2C_vSetCursorPosition>:

void LCD_I2C_vSetCursorPosition(u8 xPos,u8 yPos)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <LCD_I2C_vSetCursorPosition+0x6>
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	89 83       	std	Y+1, r24	; 0x01
    2e54:	6a 83       	std	Y+2, r22	; 0x02
	//Location is at first line
	if(xPos==0)
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	88 23       	and	r24, r24
    2e5a:	29 f4       	brne	.+10     	; 0x2e66 <LCD_I2C_vSetCursorPosition+0x1e>
	{
		LCD_I2C_vSendCommand(0x80 + yPos);
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	80 58       	subi	r24, 0x80	; 128
    2e60:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_I2C_vSendCommand>
    2e64:	07 c0       	rjmp	.+14     	; 0x2e74 <LCD_I2C_vSetCursorPosition+0x2c>
	}
	//Location is at second line
	else if(xPos == 1)
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	81 30       	cpi	r24, 0x01	; 1
    2e6a:	21 f4       	brne	.+8      	; 0x2e74 <LCD_I2C_vSetCursorPosition+0x2c>
	{
		LCD_I2C_vSendCommand(0x80 + 0x40 + yPos);
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	80 54       	subi	r24, 0x40	; 64
    2e70:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_I2C_vSendCommand>
	}
	else
	{
		//Error
	}
}
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <LCD_I2C_vSendFloat>:


void LCD_I2C_vSendFloat(f32 floatNumber, u8 precision)//123.4567
{
    2e7e:	ef 92       	push	r14
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	29 97       	sbiw	r28, 0x09	; 9
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	6d 83       	std	Y+5, r22	; 0x05
    2e9c:	7e 83       	std	Y+6, r23	; 0x06
    2e9e:	8f 83       	std	Y+7, r24	; 0x07
    2ea0:	98 87       	std	Y+8, r25	; 0x08
    2ea2:	49 87       	std	Y+9, r20	; 0x09
	u32 i = (u32) floatNumber;//123
    2ea4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ea6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ea8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eaa:	98 85       	ldd	r25, Y+8	; 0x08
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	9c 83       	std	Y+4, r25	; 0x04
    2eb6:	8b 83       	std	Y+3, r24	; 0x03
	u32 f = poW(10, precision) * (floatNumber - (f32)i);//4567
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	8a e0       	ldi	r24, 0x0A	; 10
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	b9 01       	movw	r22, r18
    2ec4:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <poW>
    2ec8:	aa 27       	eor	r26, r26
    2eca:	97 fd       	sbrc	r25, 7
    2ecc:	a0 95       	com	r26
    2ece:	ba 2f       	mov	r27, r26
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	cd 01       	movw	r24, r26
    2ed4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2ed8:	7b 01       	movw	r14, r22
    2eda:	8c 01       	movw	r16, r24
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee0:	cc 01       	movw	r24, r24
    2ee2:	a0 e0       	ldi	r26, 0x00	; 0
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2eee:	9b 01       	movw	r18, r22
    2ef0:	ac 01       	movw	r20, r24
    2ef2:	6d 81       	ldd	r22, Y+5	; 0x05
    2ef4:	7e 81       	ldd	r23, Y+6	; 0x06
    2ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef8:	98 85       	ldd	r25, Y+8	; 0x08
    2efa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9c 01       	movw	r18, r24
    2f04:	ad 01       	movw	r20, r26
    2f06:	c8 01       	movw	r24, r16
    2f08:	b7 01       	movw	r22, r14
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9a 83       	std	Y+2, r25	; 0x02
    2f20:	89 83       	std	Y+1, r24	; 0x01
	LCD_I2C_vSendNumber(i);
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCD_I2C_vSendNumber>
	LCD_I2C_vSendChar('.');
    2f2a:	8e e2       	ldi	r24, 0x2E	; 46
    2f2c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_I2C_vSendChar>
	LCD_I2C_vSendNumber(f);
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	9a 81       	ldd	r25, Y+2	; 0x02
    2f34:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCD_I2C_vSendNumber>
}
    2f38:	29 96       	adiw	r28, 0x09	; 9
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	08 95       	ret

00002f52 <LCD_I2C_poW>:

int LCD_I2C_poW(int base, int exponent)
{
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	28 97       	sbiw	r28, 0x08	; 8
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	9e 83       	std	Y+6, r25	; 0x06
    2f68:	8d 83       	std	Y+5, r24	; 0x05
    2f6a:	78 87       	std	Y+8, r23	; 0x08
    2f6c:	6f 83       	std	Y+7, r22	; 0x07
	int returnValue=1, i;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9c 83       	std	Y+4, r25	; 0x04
    2f74:	8b 83       	std	Y+3, r24	; 0x03
	if(base == 0)
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	61 f4       	brne	.+24     	; 0x2f96 <LCD_I2C_poW+0x44>
	{
		if(exponent == 0)
    2f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f80:	98 85       	ldd	r25, Y+8	; 0x08
    2f82:	00 97       	sbiw	r24, 0x00	; 0
    2f84:	29 f4       	brne	.+10     	; 0x2f90 <LCD_I2C_poW+0x3e>
		{
			returnValue = -1;
    2f86:	8f ef       	ldi	r24, 0xFF	; 255
    2f88:	9f ef       	ldi	r25, 0xFF	; 255
    2f8a:	9c 83       	std	Y+4, r25	; 0x04
    2f8c:	8b 83       	std	Y+3, r24	; 0x03
    2f8e:	20 c0       	rjmp	.+64     	; 0x2fd0 <LCD_I2C_poW+0x7e>
		}
		else
		{
			returnValue = 0;
    2f90:	1c 82       	std	Y+4, r1	; 0x04
    2f92:	1b 82       	std	Y+3, r1	; 0x03
    2f94:	1d c0       	rjmp	.+58     	; 0x2fd0 <LCD_I2C_poW+0x7e>
		}
	}
	else
	{
		for(i=0; i<exponent; i++)
    2f96:	1a 82       	std	Y+2, r1	; 0x02
    2f98:	19 82       	std	Y+1, r1	; 0x01
    2f9a:	13 c0       	rjmp	.+38     	; 0x2fc2 <LCD_I2C_poW+0x70>
		{
			returnValue *= base;
    2f9c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f9e:	3c 81       	ldd	r19, Y+4	; 0x04
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa4:	ac 01       	movw	r20, r24
    2fa6:	24 9f       	mul	r18, r20
    2fa8:	c0 01       	movw	r24, r0
    2faa:	25 9f       	mul	r18, r21
    2fac:	90 0d       	add	r25, r0
    2fae:	34 9f       	mul	r19, r20
    2fb0:	90 0d       	add	r25, r0
    2fb2:	11 24       	eor	r1, r1
    2fb4:	9c 83       	std	Y+4, r25	; 0x04
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
			returnValue = 0;
		}
	}
	else
	{
		for(i=0; i<exponent; i++)
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbc:	01 96       	adiw	r24, 0x01	; 1
    2fbe:	9a 83       	std	Y+2, r25	; 0x02
    2fc0:	89 83       	std	Y+1, r24	; 0x01
    2fc2:	29 81       	ldd	r18, Y+1	; 0x01
    2fc4:	3a 81       	ldd	r19, Y+2	; 0x02
    2fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc8:	98 85       	ldd	r25, Y+8	; 0x08
    2fca:	28 17       	cp	r18, r24
    2fcc:	39 07       	cpc	r19, r25
    2fce:	34 f3       	brlt	.-52     	; 0x2f9c <LCD_I2C_poW+0x4a>
		{
			returnValue *= base;
		}
	}
	return returnValue;
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2fd4:	28 96       	adiw	r28, 0x08	; 8
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <LCD_vInit>:
#include "../../HAL/LCD/LCD_interface.h"
#include "../../HAL/LCD/LCD_private.h"


void LCD_vInit(void)
{
    2fe6:	0f 93       	push	r16
    2fe8:	1f 93       	push	r17
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	c6 54       	subi	r28, 0x46	; 70
    2ff4:	d0 40       	sbci	r29, 0x00	; 0
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
	GPIO_vSetPortDirection(LCD_DATA_PORT, OUTPUT_PORT);
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	6f ef       	ldi	r22, 0xFF	; 255
    3004:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GPIO_vSetPortDirection>
	GPIO_vSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT_PIN);
    3008:	84 e0       	ldi	r24, 0x04	; 4
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	41 e0       	ldi	r20, 0x01	; 1
    300e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT_PIN);
    3012:	84 e0       	ldi	r24, 0x04	; 4
    3014:	61 e0       	ldi	r22, 0x01	; 1
    3016:	41 e0       	ldi	r20, 0x01	; 1
    3018:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
	GPIO_vSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, OUTPUT_PIN);
    301c:	84 e0       	ldi	r24, 0x04	; 4
    301e:	66 e0       	ldi	r22, 0x06	; 6
    3020:	41 e0       	ldi	r20, 0x01	; 1
    3022:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
    3026:	fe 01       	movw	r30, r28
    3028:	ed 5b       	subi	r30, 0xBD	; 189
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a0 e2       	ldi	r26, 0x20	; 32
    3032:	b2 e4       	ldi	r27, 0x42	; 66
    3034:	80 83       	st	Z, r24
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	a2 83       	std	Z+2, r26	; 0x02
    303a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	8e 01       	movw	r16, r28
    303e:	01 5c       	subi	r16, 0xC1	; 193
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	fe 01       	movw	r30, r28
    3044:	ed 5b       	subi	r30, 0xBD	; 189
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	f8 01       	movw	r30, r16
    3062:	80 83       	st	Z, r24
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	a2 83       	std	Z+2, r26	; 0x02
    3068:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    306a:	fe 01       	movw	r30, r28
    306c:	ff 96       	adiw	r30, 0x3f	; 63
    306e:	60 81       	ld	r22, Z
    3070:	71 81       	ldd	r23, Z+1	; 0x01
    3072:	82 81       	ldd	r24, Z+2	; 0x02
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e8       	ldi	r20, 0x80	; 128
    307c:	5f e3       	ldi	r21, 0x3F	; 63
    307e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3082:	88 23       	and	r24, r24
    3084:	2c f4       	brge	.+10     	; 0x3090 <LCD_vInit+0xaa>
		__ticks = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9e af       	std	Y+62, r25	; 0x3e
    308c:	8d af       	std	Y+61, r24	; 0x3d
    308e:	46 c0       	rjmp	.+140    	; 0x311c <LCD_vInit+0x136>
	else if (__tmp > 65535)
    3090:	fe 01       	movw	r30, r28
    3092:	ff 96       	adiw	r30, 0x3f	; 63
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	64 f5       	brge	.+88     	; 0x3104 <LCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ac:	fe 01       	movw	r30, r28
    30ae:	ed 5b       	subi	r30, 0xBD	; 189
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	60 81       	ld	r22, Z
    30b4:	71 81       	ldd	r23, Z+1	; 0x01
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	93 81       	ldd	r25, Z+3	; 0x03
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e2       	ldi	r20, 0x20	; 32
    30c0:	51 e4       	ldi	r21, 0x41	; 65
    30c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	bc 01       	movw	r22, r24
    30cc:	cd 01       	movw	r24, r26
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9e af       	std	Y+62, r25	; 0x3e
    30d8:	8d af       	std	Y+61, r24	; 0x3d
    30da:	0f c0       	rjmp	.+30     	; 0x30fa <LCD_vInit+0x114>
    30dc:	88 ec       	ldi	r24, 0xC8	; 200
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9c af       	std	Y+60, r25	; 0x3c
    30e2:	8b af       	std	Y+59, r24	; 0x3b
    30e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    30e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <LCD_vInit+0x102>
    30ec:	9c af       	std	Y+60, r25	; 0x3c
    30ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    30f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	9e af       	std	Y+62, r25	; 0x3e
    30f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    30fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	69 f7       	brne	.-38     	; 0x30dc <LCD_vInit+0xf6>
    3102:	16 c0       	rjmp	.+44     	; 0x3130 <LCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3104:	fe 01       	movw	r30, r28
    3106:	ff 96       	adiw	r30, 0x3f	; 63
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	9e af       	std	Y+62, r25	; 0x3e
    311a:	8d af       	std	Y+61, r24	; 0x3d
    311c:	8d ad       	ldd	r24, Y+61	; 0x3d
    311e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3120:	9a af       	std	Y+58, r25	; 0x3a
    3122:	89 af       	std	Y+57, r24	; 0x39
    3124:	89 ad       	ldd	r24, Y+57	; 0x39
    3126:	9a ad       	ldd	r25, Y+58	; 0x3a
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <LCD_vInit+0x142>
    312c:	9a af       	std	Y+58, r25	; 0x3a
    312e:	89 af       	std	Y+57, r24	; 0x39

#if LCD_BIT_MODE==LCD_8BIT_MODE
	_delay_ms(40);
	LCD_vSendCommand(LCD_8BIT_FUNCTION_SET);
    3130:	88 e3       	ldi	r24, 0x38	; 56
    3132:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_vSendCommand>
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	a0 e8       	ldi	r26, 0x80	; 128
    313c:	bf e3       	ldi	r27, 0x3F	; 63
    313e:	8d ab       	std	Y+53, r24	; 0x35
    3140:	9e ab       	std	Y+54, r25	; 0x36
    3142:	af ab       	std	Y+55, r26	; 0x37
    3144:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3146:	6d a9       	ldd	r22, Y+53	; 0x35
    3148:	7e a9       	ldd	r23, Y+54	; 0x36
    314a:	8f a9       	ldd	r24, Y+55	; 0x37
    314c:	98 ad       	ldd	r25, Y+56	; 0x38
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a ef       	ldi	r20, 0xFA	; 250
    3154:	54 e4       	ldi	r21, 0x44	; 68
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	89 ab       	std	Y+49, r24	; 0x31
    3160:	9a ab       	std	Y+50, r25	; 0x32
    3162:	ab ab       	std	Y+51, r26	; 0x33
    3164:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3166:	69 a9       	ldd	r22, Y+49	; 0x31
    3168:	7a a9       	ldd	r23, Y+50	; 0x32
    316a:	8b a9       	ldd	r24, Y+51	; 0x33
    316c:	9c a9       	ldd	r25, Y+52	; 0x34
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e8       	ldi	r20, 0x80	; 128
    3174:	5f e3       	ldi	r21, 0x3F	; 63
    3176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    317a:	88 23       	and	r24, r24
    317c:	2c f4       	brge	.+10     	; 0x3188 <LCD_vInit+0x1a2>
		__ticks = 1;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	98 ab       	std	Y+48, r25	; 0x30
    3184:	8f a7       	std	Y+47, r24	; 0x2f
    3186:	3f c0       	rjmp	.+126    	; 0x3206 <LCD_vInit+0x220>
	else if (__tmp > 65535)
    3188:	69 a9       	ldd	r22, Y+49	; 0x31
    318a:	7a a9       	ldd	r23, Y+50	; 0x32
    318c:	8b a9       	ldd	r24, Y+51	; 0x33
    318e:	9c a9       	ldd	r25, Y+52	; 0x34
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	3f ef       	ldi	r19, 0xFF	; 255
    3194:	4f e7       	ldi	r20, 0x7F	; 127
    3196:	57 e4       	ldi	r21, 0x47	; 71
    3198:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    319c:	18 16       	cp	r1, r24
    319e:	4c f5       	brge	.+82     	; 0x31f2 <LCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a0:	6d a9       	ldd	r22, Y+53	; 0x35
    31a2:	7e a9       	ldd	r23, Y+54	; 0x36
    31a4:	8f a9       	ldd	r24, Y+55	; 0x37
    31a6:	98 ad       	ldd	r25, Y+56	; 0x38
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e2       	ldi	r20, 0x20	; 32
    31ae:	51 e4       	ldi	r21, 0x41	; 65
    31b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	bc 01       	movw	r22, r24
    31ba:	cd 01       	movw	r24, r26
    31bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	98 ab       	std	Y+48, r25	; 0x30
    31c6:	8f a7       	std	Y+47, r24	; 0x2f
    31c8:	0f c0       	rjmp	.+30     	; 0x31e8 <LCD_vInit+0x202>
    31ca:	88 ec       	ldi	r24, 0xC8	; 200
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	9e a7       	std	Y+46, r25	; 0x2e
    31d0:	8d a7       	std	Y+45, r24	; 0x2d
    31d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    31d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <LCD_vInit+0x1f0>
    31da:	9e a7       	std	Y+46, r25	; 0x2e
    31dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31de:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e0:	98 a9       	ldd	r25, Y+48	; 0x30
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	98 ab       	std	Y+48, r25	; 0x30
    31e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ea:	98 a9       	ldd	r25, Y+48	; 0x30
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	69 f7       	brne	.-38     	; 0x31ca <LCD_vInit+0x1e4>
    31f0:	14 c0       	rjmp	.+40     	; 0x321a <LCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f2:	69 a9       	ldd	r22, Y+49	; 0x31
    31f4:	7a a9       	ldd	r23, Y+50	; 0x32
    31f6:	8b a9       	ldd	r24, Y+51	; 0x33
    31f8:	9c a9       	ldd	r25, Y+52	; 0x34
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	98 ab       	std	Y+48, r25	; 0x30
    3204:	8f a7       	std	Y+47, r24	; 0x2f
    3206:	8f a5       	ldd	r24, Y+47	; 0x2f
    3208:	98 a9       	ldd	r25, Y+48	; 0x30
    320a:	9c a7       	std	Y+44, r25	; 0x2c
    320c:	8b a7       	std	Y+43, r24	; 0x2b
    320e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3210:	9c a5       	ldd	r25, Y+44	; 0x2c
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <LCD_vInit+0x22c>
    3216:	9c a7       	std	Y+44, r25	; 0x2c
    3218:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSendCommand(LCD_DISPLAY_ON_CURSOR_OFF|(LCD_CURSOR_ENABLE<<1)|(LCD_BLINK_ENABLE<<0));
    321a:	8c e0       	ldi	r24, 0x0C	; 12
    321c:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_vSendCommand>
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	a0 e8       	ldi	r26, 0x80	; 128
    3226:	bf e3       	ldi	r27, 0x3F	; 63
    3228:	8f a3       	std	Y+39, r24	; 0x27
    322a:	98 a7       	std	Y+40, r25	; 0x28
    322c:	a9 a7       	std	Y+41, r26	; 0x29
    322e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3230:	6f a1       	ldd	r22, Y+39	; 0x27
    3232:	78 a5       	ldd	r23, Y+40	; 0x28
    3234:	89 a5       	ldd	r24, Y+41	; 0x29
    3236:	9a a5       	ldd	r25, Y+42	; 0x2a
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	4a ef       	ldi	r20, 0xFA	; 250
    323e:	54 e4       	ldi	r21, 0x44	; 68
    3240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	8b a3       	std	Y+35, r24	; 0x23
    324a:	9c a3       	std	Y+36, r25	; 0x24
    324c:	ad a3       	std	Y+37, r26	; 0x25
    324e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3250:	6b a1       	ldd	r22, Y+35	; 0x23
    3252:	7c a1       	ldd	r23, Y+36	; 0x24
    3254:	8d a1       	ldd	r24, Y+37	; 0x25
    3256:	9e a1       	ldd	r25, Y+38	; 0x26
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e8       	ldi	r20, 0x80	; 128
    325e:	5f e3       	ldi	r21, 0x3F	; 63
    3260:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3264:	88 23       	and	r24, r24
    3266:	2c f4       	brge	.+10     	; 0x3272 <LCD_vInit+0x28c>
		__ticks = 1;
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	9a a3       	std	Y+34, r25	; 0x22
    326e:	89 a3       	std	Y+33, r24	; 0x21
    3270:	3f c0       	rjmp	.+126    	; 0x32f0 <LCD_vInit+0x30a>
	else if (__tmp > 65535)
    3272:	6b a1       	ldd	r22, Y+35	; 0x23
    3274:	7c a1       	ldd	r23, Y+36	; 0x24
    3276:	8d a1       	ldd	r24, Y+37	; 0x25
    3278:	9e a1       	ldd	r25, Y+38	; 0x26
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	3f ef       	ldi	r19, 0xFF	; 255
    327e:	4f e7       	ldi	r20, 0x7F	; 127
    3280:	57 e4       	ldi	r21, 0x47	; 71
    3282:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3286:	18 16       	cp	r1, r24
    3288:	4c f5       	brge	.+82     	; 0x32dc <LCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328a:	6f a1       	ldd	r22, Y+39	; 0x27
    328c:	78 a5       	ldd	r23, Y+40	; 0x28
    328e:	89 a5       	ldd	r24, Y+41	; 0x29
    3290:	9a a5       	ldd	r25, Y+42	; 0x2a
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e2       	ldi	r20, 0x20	; 32
    3298:	51 e4       	ldi	r21, 0x41	; 65
    329a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	bc 01       	movw	r22, r24
    32a4:	cd 01       	movw	r24, r26
    32a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	9a a3       	std	Y+34, r25	; 0x22
    32b0:	89 a3       	std	Y+33, r24	; 0x21
    32b2:	0f c0       	rjmp	.+30     	; 0x32d2 <LCD_vInit+0x2ec>
    32b4:	88 ec       	ldi	r24, 0xC8	; 200
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	98 a3       	std	Y+32, r25	; 0x20
    32ba:	8f 8f       	std	Y+31, r24	; 0x1f
    32bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32be:	98 a1       	ldd	r25, Y+32	; 0x20
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	f1 f7       	brne	.-4      	; 0x32c0 <LCD_vInit+0x2da>
    32c4:	98 a3       	std	Y+32, r25	; 0x20
    32c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c8:	89 a1       	ldd	r24, Y+33	; 0x21
    32ca:	9a a1       	ldd	r25, Y+34	; 0x22
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	9a a3       	std	Y+34, r25	; 0x22
    32d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d2:	89 a1       	ldd	r24, Y+33	; 0x21
    32d4:	9a a1       	ldd	r25, Y+34	; 0x22
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	69 f7       	brne	.-38     	; 0x32b4 <LCD_vInit+0x2ce>
    32da:	14 c0       	rjmp	.+40     	; 0x3304 <LCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32dc:	6b a1       	ldd	r22, Y+35	; 0x23
    32de:	7c a1       	ldd	r23, Y+36	; 0x24
    32e0:	8d a1       	ldd	r24, Y+37	; 0x25
    32e2:	9e a1       	ldd	r25, Y+38	; 0x26
    32e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	9a a3       	std	Y+34, r25	; 0x22
    32ee:	89 a3       	std	Y+33, r24	; 0x21
    32f0:	89 a1       	ldd	r24, Y+33	; 0x21
    32f2:	9a a1       	ldd	r25, Y+34	; 0x22
    32f4:	9e 8f       	std	Y+30, r25	; 0x1e
    32f6:	8d 8f       	std	Y+29, r24	; 0x1d
    32f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <LCD_vInit+0x316>
    3300:	9e 8f       	std	Y+30, r25	; 0x1e
    3302:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vClear();
    3304:	0e 94 97 1c 	call	0x392e	; 0x392e <LCD_vClear>
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	a0 e0       	ldi	r26, 0x00	; 0
    330e:	b0 e4       	ldi	r27, 0x40	; 64
    3310:	89 8f       	std	Y+25, r24	; 0x19
    3312:	9a 8f       	std	Y+26, r25	; 0x1a
    3314:	ab 8f       	std	Y+27, r26	; 0x1b
    3316:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3318:	69 8d       	ldd	r22, Y+25	; 0x19
    331a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    331c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    331e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	4a ef       	ldi	r20, 0xFA	; 250
    3326:	54 e4       	ldi	r21, 0x44	; 68
    3328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	8d 8b       	std	Y+21, r24	; 0x15
    3332:	9e 8b       	std	Y+22, r25	; 0x16
    3334:	af 8b       	std	Y+23, r26	; 0x17
    3336:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3338:	6d 89       	ldd	r22, Y+21	; 0x15
    333a:	7e 89       	ldd	r23, Y+22	; 0x16
    333c:	8f 89       	ldd	r24, Y+23	; 0x17
    333e:	98 8d       	ldd	r25, Y+24	; 0x18
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	40 e8       	ldi	r20, 0x80	; 128
    3346:	5f e3       	ldi	r21, 0x3F	; 63
    3348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    334c:	88 23       	and	r24, r24
    334e:	2c f4       	brge	.+10     	; 0x335a <LCD_vInit+0x374>
		__ticks = 1;
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	9c 8b       	std	Y+20, r25	; 0x14
    3356:	8b 8b       	std	Y+19, r24	; 0x13
    3358:	3f c0       	rjmp	.+126    	; 0x33d8 <LCD_vInit+0x3f2>
	else if (__tmp > 65535)
    335a:	6d 89       	ldd	r22, Y+21	; 0x15
    335c:	7e 89       	ldd	r23, Y+22	; 0x16
    335e:	8f 89       	ldd	r24, Y+23	; 0x17
    3360:	98 8d       	ldd	r25, Y+24	; 0x18
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	3f ef       	ldi	r19, 0xFF	; 255
    3366:	4f e7       	ldi	r20, 0x7F	; 127
    3368:	57 e4       	ldi	r21, 0x47	; 71
    336a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    336e:	18 16       	cp	r1, r24
    3370:	4c f5       	brge	.+82     	; 0x33c4 <LCD_vInit+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3372:	69 8d       	ldd	r22, Y+25	; 0x19
    3374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e2       	ldi	r20, 0x20	; 32
    3380:	51 e4       	ldi	r21, 0x41	; 65
    3382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	bc 01       	movw	r22, r24
    338c:	cd 01       	movw	r24, r26
    338e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	9c 8b       	std	Y+20, r25	; 0x14
    3398:	8b 8b       	std	Y+19, r24	; 0x13
    339a:	0f c0       	rjmp	.+30     	; 0x33ba <LCD_vInit+0x3d4>
    339c:	88 ec       	ldi	r24, 0xC8	; 200
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	9a 8b       	std	Y+18, r25	; 0x12
    33a2:	89 8b       	std	Y+17, r24	; 0x11
    33a4:	89 89       	ldd	r24, Y+17	; 0x11
    33a6:	9a 89       	ldd	r25, Y+18	; 0x12
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <LCD_vInit+0x3c2>
    33ac:	9a 8b       	std	Y+18, r25	; 0x12
    33ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b0:	8b 89       	ldd	r24, Y+19	; 0x13
    33b2:	9c 89       	ldd	r25, Y+20	; 0x14
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	9c 8b       	std	Y+20, r25	; 0x14
    33b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ba:	8b 89       	ldd	r24, Y+19	; 0x13
    33bc:	9c 89       	ldd	r25, Y+20	; 0x14
    33be:	00 97       	sbiw	r24, 0x00	; 0
    33c0:	69 f7       	brne	.-38     	; 0x339c <LCD_vInit+0x3b6>
    33c2:	14 c0       	rjmp	.+40     	; 0x33ec <LCD_vInit+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c4:	6d 89       	ldd	r22, Y+21	; 0x15
    33c6:	7e 89       	ldd	r23, Y+22	; 0x16
    33c8:	8f 89       	ldd	r24, Y+23	; 0x17
    33ca:	98 8d       	ldd	r25, Y+24	; 0x18
    33cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	9c 8b       	std	Y+20, r25	; 0x14
    33d6:	8b 8b       	std	Y+19, r24	; 0x13
    33d8:	8b 89       	ldd	r24, Y+19	; 0x13
    33da:	9c 89       	ldd	r25, Y+20	; 0x14
    33dc:	98 8b       	std	Y+16, r25	; 0x10
    33de:	8f 87       	std	Y+15, r24	; 0x0f
    33e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e2:	98 89       	ldd	r25, Y+16	; 0x10
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <LCD_vInit+0x3fe>
    33e8:	98 8b       	std	Y+16, r25	; 0x10
    33ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vSendCommand(LCD_ENTRY_MODE_SET);
    33ec:	86 e0       	ldi	r24, 0x06	; 6
    33ee:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_vSendCommand>
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	a0 e8       	ldi	r26, 0x80	; 128
    33f8:	bf e3       	ldi	r27, 0x3F	; 63
    33fa:	8b 87       	std	Y+11, r24	; 0x0b
    33fc:	9c 87       	std	Y+12, r25	; 0x0c
    33fe:	ad 87       	std	Y+13, r26	; 0x0d
    3400:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3402:	6b 85       	ldd	r22, Y+11	; 0x0b
    3404:	7c 85       	ldd	r23, Y+12	; 0x0c
    3406:	8d 85       	ldd	r24, Y+13	; 0x0d
    3408:	9e 85       	ldd	r25, Y+14	; 0x0e
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	4a ef       	ldi	r20, 0xFA	; 250
    3410:	54 e4       	ldi	r21, 0x44	; 68
    3412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	8f 83       	std	Y+7, r24	; 0x07
    341c:	98 87       	std	Y+8, r25	; 0x08
    341e:	a9 87       	std	Y+9, r26	; 0x09
    3420:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3422:	6f 81       	ldd	r22, Y+7	; 0x07
    3424:	78 85       	ldd	r23, Y+8	; 0x08
    3426:	89 85       	ldd	r24, Y+9	; 0x09
    3428:	9a 85       	ldd	r25, Y+10	; 0x0a
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e8       	ldi	r20, 0x80	; 128
    3430:	5f e3       	ldi	r21, 0x3F	; 63
    3432:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3436:	88 23       	and	r24, r24
    3438:	2c f4       	brge	.+10     	; 0x3444 <LCD_vInit+0x45e>
		__ticks = 1;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	3f c0       	rjmp	.+126    	; 0x34c2 <LCD_vInit+0x4dc>
	else if (__tmp > 65535)
    3444:	6f 81       	ldd	r22, Y+7	; 0x07
    3446:	78 85       	ldd	r23, Y+8	; 0x08
    3448:	89 85       	ldd	r24, Y+9	; 0x09
    344a:	9a 85       	ldd	r25, Y+10	; 0x0a
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	3f ef       	ldi	r19, 0xFF	; 255
    3450:	4f e7       	ldi	r20, 0x7F	; 127
    3452:	57 e4       	ldi	r21, 0x47	; 71
    3454:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3458:	18 16       	cp	r1, r24
    345a:	4c f5       	brge	.+82     	; 0x34ae <LCD_vInit+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345c:	6b 85       	ldd	r22, Y+11	; 0x0b
    345e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e2       	ldi	r20, 0x20	; 32
    346a:	51 e4       	ldi	r21, 0x41	; 65
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	9e 83       	std	Y+6, r25	; 0x06
    3482:	8d 83       	std	Y+5, r24	; 0x05
    3484:	0f c0       	rjmp	.+30     	; 0x34a4 <LCD_vInit+0x4be>
    3486:	88 ec       	ldi	r24, 0xC8	; 200
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	9c 83       	std	Y+4, r25	; 0x04
    348c:	8b 83       	std	Y+3, r24	; 0x03
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	9c 81       	ldd	r25, Y+4	; 0x04
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <LCD_vInit+0x4ac>
    3496:	9c 83       	std	Y+4, r25	; 0x04
    3498:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	69 f7       	brne	.-38     	; 0x3486 <LCD_vInit+0x4a0>
    34ac:	14 c0       	rjmp	.+40     	; 0x34d6 <LCD_vInit+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ae:	6f 81       	ldd	r22, Y+7	; 0x07
    34b0:	78 85       	ldd	r23, Y+8	; 0x08
    34b2:	89 85       	ldd	r24, Y+9	; 0x09
    34b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	9e 83       	std	Y+6, r25	; 0x06
    34c0:	8d 83       	std	Y+5, r24	; 0x05
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	9e 81       	ldd	r25, Y+6	; 0x06
    34c6:	9a 83       	std	Y+2, r25	; 0x02
    34c8:	89 83       	std	Y+1, r24	; 0x01
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	9a 81       	ldd	r25, Y+2	; 0x02
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <LCD_vInit+0x4e8>
    34d2:	9a 83       	std	Y+2, r25	; 0x02
    34d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vSendCommand(LCD_ENTRY_MODE_SET);
	_delay_ms(1);

#endif
}
    34d6:	ca 5b       	subi	r28, 0xBA	; 186
    34d8:	df 4f       	sbci	r29, 0xFF	; 255
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	de bf       	out	0x3e, r29	; 62
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	cf 91       	pop	r28
    34e6:	df 91       	pop	r29
    34e8:	1f 91       	pop	r17
    34ea:	0f 91       	pop	r16
    34ec:	08 95       	ret

000034ee <LCD_vSendChar>:

void LCD_vSendChar(char character)
{
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	6d 97       	sbiw	r28, 0x1d	; 29
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61
    3502:	8d 8f       	std	Y+29, r24	; 0x1d
//	static u8 digitCount = 0, lineRepeated = 0;
#if LCD_BIT_MODE==LCD_8BIT_MODE
	/*Select RS -> 1*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
    3504:	84 e0       	ldi	r24, 0x04	; 4
    3506:	60 e0       	ldi	r22, 0x00	; 0
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
	/*Select RW -> 0*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    350e:	84 e0       	ldi	r24, 0x04	; 4
    3510:	61 e0       	ldi	r22, 0x01	; 1
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
	/*Put data on port*/
	GPIO_vSetPortValue(LCD_DATA_PORT, character);
    3518:	83 e0       	ldi	r24, 0x03	; 3
    351a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    351c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <GPIO_vSetPortValue>
	/*Trigger the Enable*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    3520:	84 e0       	ldi	r24, 0x04	; 4
    3522:	66 e0       	ldi	r22, 0x06	; 6
    3524:	41 e0       	ldi	r20, 0x01	; 1
    3526:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	a0 e8       	ldi	r26, 0x80	; 128
    3530:	bf e3       	ldi	r27, 0x3F	; 63
    3532:	89 8f       	std	Y+25, r24	; 0x19
    3534:	9a 8f       	std	Y+26, r25	; 0x1a
    3536:	ab 8f       	std	Y+27, r26	; 0x1b
    3538:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353a:	69 8d       	ldd	r22, Y+25	; 0x19
    353c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    353e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	4a ef       	ldi	r20, 0xFA	; 250
    3548:	54 e4       	ldi	r21, 0x44	; 68
    354a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8d 8b       	std	Y+21, r24	; 0x15
    3554:	9e 8b       	std	Y+22, r25	; 0x16
    3556:	af 8b       	std	Y+23, r26	; 0x17
    3558:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    355a:	6d 89       	ldd	r22, Y+21	; 0x15
    355c:	7e 89       	ldd	r23, Y+22	; 0x16
    355e:	8f 89       	ldd	r24, Y+23	; 0x17
    3560:	98 8d       	ldd	r25, Y+24	; 0x18
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e8       	ldi	r20, 0x80	; 128
    3568:	5f e3       	ldi	r21, 0x3F	; 63
    356a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356e:	88 23       	and	r24, r24
    3570:	2c f4       	brge	.+10     	; 0x357c <LCD_vSendChar+0x8e>
		__ticks = 1;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9c 8b       	std	Y+20, r25	; 0x14
    3578:	8b 8b       	std	Y+19, r24	; 0x13
    357a:	3f c0       	rjmp	.+126    	; 0x35fa <LCD_vSendChar+0x10c>
	else if (__tmp > 65535)
    357c:	6d 89       	ldd	r22, Y+21	; 0x15
    357e:	7e 89       	ldd	r23, Y+22	; 0x16
    3580:	8f 89       	ldd	r24, Y+23	; 0x17
    3582:	98 8d       	ldd	r25, Y+24	; 0x18
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	3f ef       	ldi	r19, 0xFF	; 255
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	57 e4       	ldi	r21, 0x47	; 71
    358c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3590:	18 16       	cp	r1, r24
    3592:	4c f5       	brge	.+82     	; 0x35e6 <LCD_vSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3594:	69 8d       	ldd	r22, Y+25	; 0x19
    3596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    359a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e2       	ldi	r20, 0x20	; 32
    35a2:	51 e4       	ldi	r21, 0x41	; 65
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9c 8b       	std	Y+20, r25	; 0x14
    35ba:	8b 8b       	std	Y+19, r24	; 0x13
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <LCD_vSendChar+0xee>
    35be:	88 ec       	ldi	r24, 0xC8	; 200
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	9a 8b       	std	Y+18, r25	; 0x12
    35c4:	89 8b       	std	Y+17, r24	; 0x11
    35c6:	89 89       	ldd	r24, Y+17	; 0x11
    35c8:	9a 89       	ldd	r25, Y+18	; 0x12
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <LCD_vSendChar+0xdc>
    35ce:	9a 8b       	std	Y+18, r25	; 0x12
    35d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d2:	8b 89       	ldd	r24, Y+19	; 0x13
    35d4:	9c 89       	ldd	r25, Y+20	; 0x14
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	9c 8b       	std	Y+20, r25	; 0x14
    35da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35dc:	8b 89       	ldd	r24, Y+19	; 0x13
    35de:	9c 89       	ldd	r25, Y+20	; 0x14
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	69 f7       	brne	.-38     	; 0x35be <LCD_vSendChar+0xd0>
    35e4:	14 c0       	rjmp	.+40     	; 0x360e <LCD_vSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e6:	6d 89       	ldd	r22, Y+21	; 0x15
    35e8:	7e 89       	ldd	r23, Y+22	; 0x16
    35ea:	8f 89       	ldd	r24, Y+23	; 0x17
    35ec:	98 8d       	ldd	r25, Y+24	; 0x18
    35ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	9c 8b       	std	Y+20, r25	; 0x14
    35f8:	8b 8b       	std	Y+19, r24	; 0x13
    35fa:	8b 89       	ldd	r24, Y+19	; 0x13
    35fc:	9c 89       	ldd	r25, Y+20	; 0x14
    35fe:	98 8b       	std	Y+16, r25	; 0x10
    3600:	8f 87       	std	Y+15, r24	; 0x0f
    3602:	8f 85       	ldd	r24, Y+15	; 0x0f
    3604:	98 89       	ldd	r25, Y+16	; 0x10
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <LCD_vSendChar+0x118>
    360a:	98 8b       	std	Y+16, r25	; 0x10
    360c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    360e:	84 e0       	ldi	r24, 0x04	; 4
    3610:	66 e0       	ldi	r22, 0x06	; 6
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a0 e8       	ldi	r26, 0x80	; 128
    361e:	bf e3       	ldi	r27, 0x3F	; 63
    3620:	8b 87       	std	Y+11, r24	; 0x0b
    3622:	9c 87       	std	Y+12, r25	; 0x0c
    3624:	ad 87       	std	Y+13, r26	; 0x0d
    3626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3628:	6b 85       	ldd	r22, Y+11	; 0x0b
    362a:	7c 85       	ldd	r23, Y+12	; 0x0c
    362c:	8d 85       	ldd	r24, Y+13	; 0x0d
    362e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	4a ef       	ldi	r20, 0xFA	; 250
    3636:	54 e4       	ldi	r21, 0x44	; 68
    3638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	8f 83       	std	Y+7, r24	; 0x07
    3642:	98 87       	std	Y+8, r25	; 0x08
    3644:	a9 87       	std	Y+9, r26	; 0x09
    3646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e8       	ldi	r20, 0x80	; 128
    3656:	5f e3       	ldi	r21, 0x3F	; 63
    3658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    365c:	88 23       	and	r24, r24
    365e:	2c f4       	brge	.+10     	; 0x366a <LCD_vSendChar+0x17c>
		__ticks = 1;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
    3668:	3f c0       	rjmp	.+126    	; 0x36e8 <LCD_vSendChar+0x1fa>
	else if (__tmp > 65535)
    366a:	6f 81       	ldd	r22, Y+7	; 0x07
    366c:	78 85       	ldd	r23, Y+8	; 0x08
    366e:	89 85       	ldd	r24, Y+9	; 0x09
    3670:	9a 85       	ldd	r25, Y+10	; 0x0a
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	3f ef       	ldi	r19, 0xFF	; 255
    3676:	4f e7       	ldi	r20, 0x7F	; 127
    3678:	57 e4       	ldi	r21, 0x47	; 71
    367a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    367e:	18 16       	cp	r1, r24
    3680:	4c f5       	brge	.+82     	; 0x36d4 <LCD_vSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3682:	6b 85       	ldd	r22, Y+11	; 0x0b
    3684:	7c 85       	ldd	r23, Y+12	; 0x0c
    3686:	8d 85       	ldd	r24, Y+13	; 0x0d
    3688:	9e 85       	ldd	r25, Y+14	; 0x0e
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e2       	ldi	r20, 0x20	; 32
    3690:	51 e4       	ldi	r21, 0x41	; 65
    3692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	9e 83       	std	Y+6, r25	; 0x06
    36a8:	8d 83       	std	Y+5, r24	; 0x05
    36aa:	0f c0       	rjmp	.+30     	; 0x36ca <LCD_vSendChar+0x1dc>
    36ac:	88 ec       	ldi	r24, 0xC8	; 200
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	9c 83       	std	Y+4, r25	; 0x04
    36b2:	8b 83       	std	Y+3, r24	; 0x03
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	9c 81       	ldd	r25, Y+4	; 0x04
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <LCD_vSendChar+0x1ca>
    36bc:	9c 83       	std	Y+4, r25	; 0x04
    36be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	69 f7       	brne	.-38     	; 0x36ac <LCD_vSendChar+0x1be>
    36d2:	14 c0       	rjmp	.+40     	; 0x36fc <LCD_vSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d4:	6f 81       	ldd	r22, Y+7	; 0x07
    36d6:	78 85       	ldd	r23, Y+8	; 0x08
    36d8:	89 85       	ldd	r24, Y+9	; 0x09
    36da:	9a 85       	ldd	r25, Y+10	; 0x0a
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ea:	9e 81       	ldd	r25, Y+6	; 0x06
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	89 83       	std	Y+1, r24	; 0x01
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <LCD_vSendChar+0x206>
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
//	{
//		lineRepeated++;
//		LCD_vSetCursorPosition(0,0);
//	}
#endif
}
    36fc:	6d 96       	adiw	r28, 0x1d	; 29
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <LCD_vSendCommand>:

void LCD_vSendCommand(u8 command)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	6d 97       	sbiw	r28, 0x1d	; 29
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
    3722:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_BIT_MODE==LCD_8BIT_MODE
	/*Select RS -> 0*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
    3724:	84 e0       	ldi	r24, 0x04	; 4
    3726:	60 e0       	ldi	r22, 0x00	; 0
    3728:	40 e0       	ldi	r20, 0x00	; 0
    372a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
	/*Select RW -> 0*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    372e:	84 e0       	ldi	r24, 0x04	; 4
    3730:	61 e0       	ldi	r22, 0x01	; 1
    3732:	40 e0       	ldi	r20, 0x00	; 0
    3734:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
	/*Put data on port*/
	GPIO_vSetPortValue(LCD_DATA_PORT, command);
    3738:	83 e0       	ldi	r24, 0x03	; 3
    373a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    373c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <GPIO_vSetPortValue>
	/*Trigger the Enable*/
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    3740:	84 e0       	ldi	r24, 0x04	; 4
    3742:	66 e0       	ldi	r22, 0x06	; 6
    3744:	41 e0       	ldi	r20, 0x01	; 1
    3746:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	a0 e8       	ldi	r26, 0x80	; 128
    3750:	bf e3       	ldi	r27, 0x3F	; 63
    3752:	89 8f       	std	Y+25, r24	; 0x19
    3754:	9a 8f       	std	Y+26, r25	; 0x1a
    3756:	ab 8f       	std	Y+27, r26	; 0x1b
    3758:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    375a:	69 8d       	ldd	r22, Y+25	; 0x19
    375c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    375e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	4a ef       	ldi	r20, 0xFA	; 250
    3768:	54 e4       	ldi	r21, 0x44	; 68
    376a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	8d 8b       	std	Y+21, r24	; 0x15
    3774:	9e 8b       	std	Y+22, r25	; 0x16
    3776:	af 8b       	std	Y+23, r26	; 0x17
    3778:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    377a:	6d 89       	ldd	r22, Y+21	; 0x15
    377c:	7e 89       	ldd	r23, Y+22	; 0x16
    377e:	8f 89       	ldd	r24, Y+23	; 0x17
    3780:	98 8d       	ldd	r25, Y+24	; 0x18
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	40 e8       	ldi	r20, 0x80	; 128
    3788:	5f e3       	ldi	r21, 0x3F	; 63
    378a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    378e:	88 23       	and	r24, r24
    3790:	2c f4       	brge	.+10     	; 0x379c <LCD_vSendCommand+0x8e>
		__ticks = 1;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9c 8b       	std	Y+20, r25	; 0x14
    3798:	8b 8b       	std	Y+19, r24	; 0x13
    379a:	3f c0       	rjmp	.+126    	; 0x381a <LCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    379c:	6d 89       	ldd	r22, Y+21	; 0x15
    379e:	7e 89       	ldd	r23, Y+22	; 0x16
    37a0:	8f 89       	ldd	r24, Y+23	; 0x17
    37a2:	98 8d       	ldd	r25, Y+24	; 0x18
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	3f ef       	ldi	r19, 0xFF	; 255
    37a8:	4f e7       	ldi	r20, 0x7F	; 127
    37aa:	57 e4       	ldi	r21, 0x47	; 71
    37ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37b0:	18 16       	cp	r1, r24
    37b2:	4c f5       	brge	.+82     	; 0x3806 <LCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b4:	69 8d       	ldd	r22, Y+25	; 0x19
    37b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e2       	ldi	r20, 0x20	; 32
    37c2:	51 e4       	ldi	r21, 0x41	; 65
    37c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	bc 01       	movw	r22, r24
    37ce:	cd 01       	movw	r24, r26
    37d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	9c 8b       	std	Y+20, r25	; 0x14
    37da:	8b 8b       	std	Y+19, r24	; 0x13
    37dc:	0f c0       	rjmp	.+30     	; 0x37fc <LCD_vSendCommand+0xee>
    37de:	88 ec       	ldi	r24, 0xC8	; 200
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	9a 8b       	std	Y+18, r25	; 0x12
    37e4:	89 8b       	std	Y+17, r24	; 0x11
    37e6:	89 89       	ldd	r24, Y+17	; 0x11
    37e8:	9a 89       	ldd	r25, Y+18	; 0x12
    37ea:	01 97       	sbiw	r24, 0x01	; 1
    37ec:	f1 f7       	brne	.-4      	; 0x37ea <LCD_vSendCommand+0xdc>
    37ee:	9a 8b       	std	Y+18, r25	; 0x12
    37f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f2:	8b 89       	ldd	r24, Y+19	; 0x13
    37f4:	9c 89       	ldd	r25, Y+20	; 0x14
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	9c 8b       	std	Y+20, r25	; 0x14
    37fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fc:	8b 89       	ldd	r24, Y+19	; 0x13
    37fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3800:	00 97       	sbiw	r24, 0x00	; 0
    3802:	69 f7       	brne	.-38     	; 0x37de <LCD_vSendCommand+0xd0>
    3804:	14 c0       	rjmp	.+40     	; 0x382e <LCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3806:	6d 89       	ldd	r22, Y+21	; 0x15
    3808:	7e 89       	ldd	r23, Y+22	; 0x16
    380a:	8f 89       	ldd	r24, Y+23	; 0x17
    380c:	98 8d       	ldd	r25, Y+24	; 0x18
    380e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	9c 8b       	std	Y+20, r25	; 0x14
    3818:	8b 8b       	std	Y+19, r24	; 0x13
    381a:	8b 89       	ldd	r24, Y+19	; 0x13
    381c:	9c 89       	ldd	r25, Y+20	; 0x14
    381e:	98 8b       	std	Y+16, r25	; 0x10
    3820:	8f 87       	std	Y+15, r24	; 0x0f
    3822:	8f 85       	ldd	r24, Y+15	; 0x0f
    3824:	98 89       	ldd	r25, Y+16	; 0x10
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	f1 f7       	brne	.-4      	; 0x3826 <LCD_vSendCommand+0x118>
    382a:	98 8b       	std	Y+16, r25	; 0x10
    382c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    382e:	84 e0       	ldi	r24, 0x04	; 4
    3830:	66 e0       	ldi	r22, 0x06	; 6
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	a0 e8       	ldi	r26, 0x80	; 128
    383e:	bf e3       	ldi	r27, 0x3F	; 63
    3840:	8b 87       	std	Y+11, r24	; 0x0b
    3842:	9c 87       	std	Y+12, r25	; 0x0c
    3844:	ad 87       	std	Y+13, r26	; 0x0d
    3846:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3848:	6b 85       	ldd	r22, Y+11	; 0x0b
    384a:	7c 85       	ldd	r23, Y+12	; 0x0c
    384c:	8d 85       	ldd	r24, Y+13	; 0x0d
    384e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	4a ef       	ldi	r20, 0xFA	; 250
    3856:	54 e4       	ldi	r21, 0x44	; 68
    3858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	8f 83       	std	Y+7, r24	; 0x07
    3862:	98 87       	std	Y+8, r25	; 0x08
    3864:	a9 87       	std	Y+9, r26	; 0x09
    3866:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3868:	6f 81       	ldd	r22, Y+7	; 0x07
    386a:	78 85       	ldd	r23, Y+8	; 0x08
    386c:	89 85       	ldd	r24, Y+9	; 0x09
    386e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e8       	ldi	r20, 0x80	; 128
    3876:	5f e3       	ldi	r21, 0x3F	; 63
    3878:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387c:	88 23       	and	r24, r24
    387e:	2c f4       	brge	.+10     	; 0x388a <LCD_vSendCommand+0x17c>
		__ticks = 1;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	9e 83       	std	Y+6, r25	; 0x06
    3886:	8d 83       	std	Y+5, r24	; 0x05
    3888:	3f c0       	rjmp	.+126    	; 0x3908 <LCD_vSendCommand+0x1fa>
	else if (__tmp > 65535)
    388a:	6f 81       	ldd	r22, Y+7	; 0x07
    388c:	78 85       	ldd	r23, Y+8	; 0x08
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	3f ef       	ldi	r19, 0xFF	; 255
    3896:	4f e7       	ldi	r20, 0x7F	; 127
    3898:	57 e4       	ldi	r21, 0x47	; 71
    389a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389e:	18 16       	cp	r1, r24
    38a0:	4c f5       	brge	.+82     	; 0x38f4 <LCD_vSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	40 e2       	ldi	r20, 0x20	; 32
    38b0:	51 e4       	ldi	r21, 0x41	; 65
    38b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	bc 01       	movw	r22, r24
    38bc:	cd 01       	movw	r24, r26
    38be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
    38ca:	0f c0       	rjmp	.+30     	; 0x38ea <LCD_vSendCommand+0x1dc>
    38cc:	88 ec       	ldi	r24, 0xC8	; 200
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	9c 83       	std	Y+4, r25	; 0x04
    38d2:	8b 83       	std	Y+3, r24	; 0x03
    38d4:	8b 81       	ldd	r24, Y+3	; 0x03
    38d6:	9c 81       	ldd	r25, Y+4	; 0x04
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <LCD_vSendCommand+0x1ca>
    38dc:	9c 83       	std	Y+4, r25	; 0x04
    38de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e0:	8d 81       	ldd	r24, Y+5	; 0x05
    38e2:	9e 81       	ldd	r25, Y+6	; 0x06
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	9e 83       	std	Y+6, r25	; 0x06
    38e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ea:	8d 81       	ldd	r24, Y+5	; 0x05
    38ec:	9e 81       	ldd	r25, Y+6	; 0x06
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	69 f7       	brne	.-38     	; 0x38cc <LCD_vSendCommand+0x1be>
    38f2:	14 c0       	rjmp	.+40     	; 0x391c <LCD_vSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f4:	6f 81       	ldd	r22, Y+7	; 0x07
    38f6:	78 85       	ldd	r23, Y+8	; 0x08
    38f8:	89 85       	ldd	r24, Y+9	; 0x09
    38fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    38fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	9e 83       	std	Y+6, r25	; 0x06
    3906:	8d 83       	std	Y+5, r24	; 0x05
    3908:	8d 81       	ldd	r24, Y+5	; 0x05
    390a:	9e 81       	ldd	r25, Y+6	; 0x06
    390c:	9a 83       	std	Y+2, r25	; 0x02
    390e:	89 83       	std	Y+1, r24	; 0x01
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	9a 81       	ldd	r25, Y+2	; 0x02
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	f1 f7       	brne	.-4      	; 0x3914 <LCD_vSendCommand+0x206>
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
	_delay_ms(1);
	GPIO_vSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
	_delay_ms(1);
#endif
}
    391c:	6d 96       	adiw	r28, 0x1d	; 29
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	cf 91       	pop	r28
    392a:	df 91       	pop	r29
    392c:	08 95       	ret

0000392e <LCD_vClear>:

void LCD_vClear(void)
{
    392e:	df 93       	push	r29
    3930:	cf 93       	push	r28
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
	LCD_vSendCommand(0x01);
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_vSendCommand>
}
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <LCD_vSendString>:


void LCD_vSendString(const char *str)
{
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	00 d0       	rcall	.+0      	; 0x3948 <LCD_vSendString+0x6>
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    394c:	9a 83       	std	Y+2, r25	; 0x02
    394e:	89 83       	std	Y+1, r24	; 0x01
    3950:	0a c0       	rjmp	.+20     	; 0x3966 <LCD_vSendString+0x24>
	while(*str != '\0')
	{
		LCD_vSendChar(*str);
    3952:	e9 81       	ldd	r30, Y+1	; 0x01
    3954:	fa 81       	ldd	r31, Y+2	; 0x02
    3956:	80 81       	ld	r24, Z
    3958:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vSendChar>
		str++;
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	9a 81       	ldd	r25, Y+2	; 0x02
    3960:	01 96       	adiw	r24, 0x01	; 1
    3962:	9a 83       	std	Y+2, r25	; 0x02
    3964:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSendString(const char *str)
{
	while(*str != '\0')
    3966:	e9 81       	ldd	r30, Y+1	; 0x01
    3968:	fa 81       	ldd	r31, Y+2	; 0x02
    396a:	80 81       	ld	r24, Z
    396c:	88 23       	and	r24, r24
    396e:	89 f7       	brne	.-30     	; 0x3952 <LCD_vSendString+0x10>
	{
		LCD_vSendChar(*str);
		str++;
	}
}
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	cf 91       	pop	r28
    3976:	df 91       	pop	r29
    3978:	08 95       	ret

0000397a <LCD_vWriteNumber>:

void LCD_vWriteNumber(s32 num)//500
{
    397a:	df 93       	push	r29
    397c:	cf 93       	push	r28
    397e:	00 d0       	rcall	.+0      	; 0x3980 <LCD_vWriteNumber+0x6>
    3980:	00 d0       	rcall	.+0      	; 0x3982 <LCD_vWriteNumber+0x8>
    3982:	00 d0       	rcall	.+0      	; 0x3984 <LCD_vWriteNumber+0xa>
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	9e 83       	std	Y+6, r25	; 0x06
    398a:	8d 83       	std	Y+5, r24	; 0x05
	s32 reverse = 0, count = 0;
    398c:	1c 82       	std	Y+4, r1	; 0x04
    398e:	1b 82       	std	Y+3, r1	; 0x03
    3990:	1a 82       	std	Y+2, r1	; 0x02
    3992:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    3994:	8d 81       	ldd	r24, Y+5	; 0x05
    3996:	9e 81       	ldd	r25, Y+6	; 0x06
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	59 f5       	brne	.+86     	; 0x39f2 <LCD_vWriteNumber+0x78>
	{
		LCD_vSendChar('0');
    399c:	80 e3       	ldi	r24, 0x30	; 48
    399e:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vSendChar>
    39a2:	4a c0       	rjmp	.+148    	; 0x3a38 <LCD_vWriteNumber+0xbe>
	}
	else
	{
		while(num)
		{
			reverse = reverse * 10 + num % 10;
    39a4:	8b 81       	ldd	r24, Y+3	; 0x03
    39a6:	9c 81       	ldd	r25, Y+4	; 0x04
    39a8:	9c 01       	movw	r18, r24
    39aa:	22 0f       	add	r18, r18
    39ac:	33 1f       	adc	r19, r19
    39ae:	c9 01       	movw	r24, r18
    39b0:	88 0f       	add	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	f9 01       	movw	r30, r18
    39ba:	e8 0f       	add	r30, r24
    39bc:	f9 1f       	adc	r31, r25
    39be:	8d 81       	ldd	r24, Y+5	; 0x05
    39c0:	9e 81       	ldd	r25, Y+6	; 0x06
    39c2:	2a e0       	ldi	r18, 0x0A	; 10
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	b9 01       	movw	r22, r18
    39c8:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    39cc:	8e 0f       	add	r24, r30
    39ce:	9f 1f       	adc	r25, r31
    39d0:	9c 83       	std	Y+4, r25	; 0x04
    39d2:	8b 83       	std	Y+3, r24	; 0x03
			num/=10;
    39d4:	8d 81       	ldd	r24, Y+5	; 0x05
    39d6:	9e 81       	ldd	r25, Y+6	; 0x06
    39d8:	2a e0       	ldi	r18, 0x0A	; 10
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	b9 01       	movw	r22, r18
    39de:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    39e2:	cb 01       	movw	r24, r22
    39e4:	9e 83       	std	Y+6, r25	; 0x06
    39e6:	8d 83       	std	Y+5, r24	; 0x05
			count++;
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	9a 81       	ldd	r25, Y+2	; 0x02
    39ec:	01 96       	adiw	r24, 0x01	; 1
    39ee:	9a 83       	std	Y+2, r25	; 0x02
    39f0:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_vSendChar('0');
	}
	else
	{
		while(num)
    39f2:	8d 81       	ldd	r24, Y+5	; 0x05
    39f4:	9e 81       	ldd	r25, Y+6	; 0x06
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	a9 f6       	brne	.-86     	; 0x39a4 <LCD_vWriteNumber+0x2a>
    39fa:	19 c0       	rjmp	.+50     	; 0x3a2e <LCD_vWriteNumber+0xb4>
			count++;
		}

		while(count > 0)//005
		{
			LCD_vSendChar((reverse%10) + '0');
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3a00:	2a e0       	ldi	r18, 0x0A	; 10
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	b9 01       	movw	r22, r18
    3a06:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    3a0a:	80 5d       	subi	r24, 0xD0	; 208
    3a0c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vSendChar>
			reverse/=10;
    3a10:	8b 81       	ldd	r24, Y+3	; 0x03
    3a12:	9c 81       	ldd	r25, Y+4	; 0x04
    3a14:	2a e0       	ldi	r18, 0x0A	; 10
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	b9 01       	movw	r22, r18
    3a1a:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    3a1e:	cb 01       	movw	r24, r22
    3a20:	9c 83       	std	Y+4, r25	; 0x04
    3a22:	8b 83       	std	Y+3, r24	; 0x03
			count--;
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	9a 81       	ldd	r25, Y+2	; 0x02
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	9a 83       	std	Y+2, r25	; 0x02
    3a2c:	89 83       	std	Y+1, r24	; 0x01
			reverse = reverse * 10 + num % 10;
			num/=10;
			count++;
		}

		while(count > 0)//005
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	9a 81       	ldd	r25, Y+2	; 0x02
    3a32:	18 16       	cp	r1, r24
    3a34:	19 06       	cpc	r1, r25
    3a36:	14 f3       	brlt	.-60     	; 0x39fc <LCD_vWriteNumber+0x82>
			LCD_vSendChar((reverse%10) + '0');
			reverse/=10;
			count--;
		}
	}
}
    3a38:	26 96       	adiw	r28, 0x06	; 6
    3a3a:	0f b6       	in	r0, 0x3f	; 63
    3a3c:	f8 94       	cli
    3a3e:	de bf       	out	0x3e, r29	; 62
    3a40:	0f be       	out	0x3f, r0	; 63
    3a42:	cd bf       	out	0x3d, r28	; 61
    3a44:	cf 91       	pop	r28
    3a46:	df 91       	pop	r29
    3a48:	08 95       	ret

00003a4a <LCD_vSendNumber>:
void LCD_vSendNumber(s32 num)
{
    3a4a:	df 93       	push	r29
    3a4c:	cf 93       	push	r28
    3a4e:	00 d0       	rcall	.+0      	; 0x3a50 <LCD_vSendNumber+0x6>
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	9a 83       	std	Y+2, r25	; 0x02
    3a56:	89 83       	std	Y+1, r24	; 0x01
	if(num >= 0)
    3a58:	89 81       	ldd	r24, Y+1	; 0x01
    3a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5c:	99 23       	and	r25, r25
    3a5e:	2c f0       	brlt	.+10     	; 0x3a6a <LCD_vSendNumber+0x20>
	{
		LCD_vWriteNumber(num);
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	9a 81       	ldd	r25, Y+2	; 0x02
    3a64:	0e 94 bd 1c 	call	0x397a	; 0x397a <LCD_vWriteNumber>
    3a68:	0a c0       	rjmp	.+20     	; 0x3a7e <LCD_vSendNumber+0x34>
	}
	else
	{
		LCD_vSendChar('-');
    3a6a:	8d e2       	ldi	r24, 0x2D	; 45
    3a6c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vSendChar>
		LCD_vWriteNumber(-1*num);
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	9a 81       	ldd	r25, Y+2	; 0x02
    3a74:	90 95       	com	r25
    3a76:	81 95       	neg	r24
    3a78:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7a:	0e 94 bd 1c 	call	0x397a	; 0x397a <LCD_vWriteNumber>
	}
}
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	cf 91       	pop	r28
    3a84:	df 91       	pop	r29
    3a86:	08 95       	ret

00003a88 <LCD_vDisplayCustomChar>:

void LCD_vDisplayCustomChar(u8 charId)
{
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	0f 92       	push	r0
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
    3a92:	89 83       	std	Y+1, r24	; 0x01
	if(charId < 8)
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	88 30       	cpi	r24, 0x08	; 8
    3a98:	18 f4       	brcc	.+6      	; 0x3aa0 <LCD_vDisplayCustomChar+0x18>
	{
		LCD_vSendChar(charId);
    3a9a:	89 81       	ldd	r24, Y+1	; 0x01
    3a9c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vSendChar>
	}
	else
	{
		//Error
	}
}
    3aa0:	0f 90       	pop	r0
    3aa2:	cf 91       	pop	r28
    3aa4:	df 91       	pop	r29
    3aa6:	08 95       	ret

00003aa8 <LCD_vSaveCustomChar>:

void LCD_vSaveCustomChar(u8* charArr, u8 charId)
{
    3aa8:	df 93       	push	r29
    3aaa:	cf 93       	push	r28
    3aac:	00 d0       	rcall	.+0      	; 0x3aae <LCD_vSaveCustomChar+0x6>
    3aae:	00 d0       	rcall	.+0      	; 0x3ab0 <LCD_vSaveCustomChar+0x8>
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	9b 83       	std	Y+3, r25	; 0x03
    3ab6:	8a 83       	std	Y+2, r24	; 0x02
    3ab8:	6c 83       	std	Y+4, r22	; 0x04
	if(charId < 8)
    3aba:	8c 81       	ldd	r24, Y+4	; 0x04
    3abc:	88 30       	cpi	r24, 0x08	; 8
    3abe:	10 f5       	brcc	.+68     	; 0x3b04 <LCD_vSaveCustomChar+0x5c>
	{
		LCD_vSendCommand(LCD_CGRAM_BASE_ADDRESS + (charId * 8));
    3ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac2:	88 2f       	mov	r24, r24
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	08 96       	adiw	r24, 0x08	; 8
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	88 0f       	add	r24, r24
    3ace:	99 1f       	adc	r25, r25
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_vSendCommand>
		for(u8 i=0; i<8; i++)
    3ad8:	19 82       	std	Y+1, r1	; 0x01
    3ada:	0e c0       	rjmp	.+28     	; 0x3af8 <LCD_vSaveCustomChar+0x50>
		{
			LCD_vSendChar(charArr[i]);
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	28 2f       	mov	r18, r24
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	e2 0f       	add	r30, r18
    3aea:	f3 1f       	adc	r31, r19
    3aec:	80 81       	ld	r24, Z
    3aee:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vSendChar>
void LCD_vSaveCustomChar(u8* charArr, u8 charId)
{
	if(charId < 8)
	{
		LCD_vSendCommand(LCD_CGRAM_BASE_ADDRESS + (charId * 8));
		for(u8 i=0; i<8; i++)
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	8f 5f       	subi	r24, 0xFF	; 255
    3af6:	89 83       	std	Y+1, r24	; 0x01
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	88 30       	cpi	r24, 0x08	; 8
    3afc:	78 f3       	brcs	.-34     	; 0x3adc <LCD_vSaveCustomChar+0x34>
		{
			LCD_vSendChar(charArr[i]);
		}
		LCD_vSendCommand(LCD_DDRAM_BASE_ADDRESS);
    3afe:	80 e8       	ldi	r24, 0x80	; 128
    3b00:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_vSendCommand>
	}
	else
	{
		//Error
	}
}
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <LCD_vSetCursorPosition>:

void LCD_vSetCursorPosition(u8 xPos,u8 yPos)
{
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	00 d0       	rcall	.+0      	; 0x3b18 <LCD_vSetCursorPosition+0x6>
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	89 83       	std	Y+1, r24	; 0x01
    3b1e:	6a 83       	std	Y+2, r22	; 0x02
	//Location is at first line
	if(xPos==0)
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	88 23       	and	r24, r24
    3b24:	29 f4       	brne	.+10     	; 0x3b30 <LCD_vSetCursorPosition+0x1e>
	{
		LCD_vSendCommand(0x80 + yPos);
    3b26:	8a 81       	ldd	r24, Y+2	; 0x02
    3b28:	80 58       	subi	r24, 0x80	; 128
    3b2a:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_vSendCommand>
    3b2e:	07 c0       	rjmp	.+14     	; 0x3b3e <LCD_vSetCursorPosition+0x2c>
	}
	//Location is at second line
	else if(xPos == 1)
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	81 30       	cpi	r24, 0x01	; 1
    3b34:	21 f4       	brne	.+8      	; 0x3b3e <LCD_vSetCursorPosition+0x2c>
	{
		LCD_vSendCommand(0x80 + 0x40 + yPos);
    3b36:	8a 81       	ldd	r24, Y+2	; 0x02
    3b38:	80 54       	subi	r24, 0x40	; 64
    3b3a:	0e 94 87 1b 	call	0x370e	; 0x370e <LCD_vSendCommand>
	}
	else
	{
		//Error
	}
}
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	cf 91       	pop	r28
    3b44:	df 91       	pop	r29
    3b46:	08 95       	ret

00003b48 <LCD_vSendFloat>:


void LCD_vSendFloat(f32 floatNumber, u8 precision)//123.4567
{
    3b48:	ef 92       	push	r14
    3b4a:	ff 92       	push	r15
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	df 93       	push	r29
    3b52:	cf 93       	push	r28
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
    3b58:	29 97       	sbiw	r28, 0x09	; 9
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	f8 94       	cli
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	6d 83       	std	Y+5, r22	; 0x05
    3b66:	7e 83       	std	Y+6, r23	; 0x06
    3b68:	8f 83       	std	Y+7, r24	; 0x07
    3b6a:	98 87       	std	Y+8, r25	; 0x08
    3b6c:	49 87       	std	Y+9, r20	; 0x09
	u32 i = (u32) floatNumber;//123
    3b6e:	6d 81       	ldd	r22, Y+5	; 0x05
    3b70:	7e 81       	ldd	r23, Y+6	; 0x06
    3b72:	8f 81       	ldd	r24, Y+7	; 0x07
    3b74:	98 85       	ldd	r25, Y+8	; 0x08
    3b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	9c 83       	std	Y+4, r25	; 0x04
    3b80:	8b 83       	std	Y+3, r24	; 0x03
	u32 f = poW(10, precision) * (floatNumber - (f32)i);//4567
    3b82:	89 85       	ldd	r24, Y+9	; 0x09
    3b84:	28 2f       	mov	r18, r24
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	8a e0       	ldi	r24, 0x0A	; 10
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	b9 01       	movw	r22, r18
    3b8e:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <poW>
    3b92:	aa 27       	eor	r26, r26
    3b94:	97 fd       	sbrc	r25, 7
    3b96:	a0 95       	com	r26
    3b98:	ba 2f       	mov	r27, r26
    3b9a:	bc 01       	movw	r22, r24
    3b9c:	cd 01       	movw	r24, r26
    3b9e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3ba2:	7b 01       	movw	r14, r22
    3ba4:	8c 01       	movw	r16, r24
    3ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    3baa:	cc 01       	movw	r24, r24
    3bac:	a0 e0       	ldi	r26, 0x00	; 0
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	bc 01       	movw	r22, r24
    3bb2:	cd 01       	movw	r24, r26
    3bb4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3bb8:	9b 01       	movw	r18, r22
    3bba:	ac 01       	movw	r20, r24
    3bbc:	6d 81       	ldd	r22, Y+5	; 0x05
    3bbe:	7e 81       	ldd	r23, Y+6	; 0x06
    3bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    3bc2:	98 85       	ldd	r25, Y+8	; 0x08
    3bc4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	9c 01       	movw	r18, r24
    3bce:	ad 01       	movw	r20, r26
    3bd0:	c8 01       	movw	r24, r16
    3bd2:	b7 01       	movw	r22, r14
    3bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd8:	dc 01       	movw	r26, r24
    3bda:	cb 01       	movw	r24, r22
    3bdc:	bc 01       	movw	r22, r24
    3bde:	cd 01       	movw	r24, r26
    3be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	9a 83       	std	Y+2, r25	; 0x02
    3bea:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSendNumber(i);
    3bec:	8b 81       	ldd	r24, Y+3	; 0x03
    3bee:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf0:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <LCD_vSendNumber>
	LCD_vSendChar('.');
    3bf4:	8e e2       	ldi	r24, 0x2E	; 46
    3bf6:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vSendChar>
	LCD_vSendNumber(f);
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfe:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <LCD_vSendNumber>
}
    3c02:	29 96       	adiw	r28, 0x09	; 9
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	f8 94       	cli
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	cd bf       	out	0x3d, r28	; 61
    3c0e:	cf 91       	pop	r28
    3c10:	df 91       	pop	r29
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	ff 90       	pop	r15
    3c18:	ef 90       	pop	r14
    3c1a:	08 95       	ret

00003c1c <poW>:

int poW(int base, int exponent)
{
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	28 97       	sbiw	r28, 0x08	; 8
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	de bf       	out	0x3e, r29	; 62
    3c2c:	0f be       	out	0x3f, r0	; 63
    3c2e:	cd bf       	out	0x3d, r28	; 61
    3c30:	9e 83       	std	Y+6, r25	; 0x06
    3c32:	8d 83       	std	Y+5, r24	; 0x05
    3c34:	78 87       	std	Y+8, r23	; 0x08
    3c36:	6f 83       	std	Y+7, r22	; 0x07
	int l=1, i;
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	9c 83       	std	Y+4, r25	; 0x04
    3c3e:	8b 83       	std	Y+3, r24	; 0x03
	if(base == 0)
    3c40:	8d 81       	ldd	r24, Y+5	; 0x05
    3c42:	9e 81       	ldd	r25, Y+6	; 0x06
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	61 f4       	brne	.+24     	; 0x3c60 <poW+0x44>
	{
		if(exponent == 0)
    3c48:	8f 81       	ldd	r24, Y+7	; 0x07
    3c4a:	98 85       	ldd	r25, Y+8	; 0x08
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	29 f4       	brne	.+10     	; 0x3c5a <poW+0x3e>
		{
			l = -1;
    3c50:	8f ef       	ldi	r24, 0xFF	; 255
    3c52:	9f ef       	ldi	r25, 0xFF	; 255
    3c54:	9c 83       	std	Y+4, r25	; 0x04
    3c56:	8b 83       	std	Y+3, r24	; 0x03
    3c58:	20 c0       	rjmp	.+64     	; 0x3c9a <poW+0x7e>
		}
		else
		{
			l = 0;
    3c5a:	1c 82       	std	Y+4, r1	; 0x04
    3c5c:	1b 82       	std	Y+3, r1	; 0x03
    3c5e:	1d c0       	rjmp	.+58     	; 0x3c9a <poW+0x7e>
		}
	}
	else
	{
		for(i=0; i<exponent; i++)
    3c60:	1a 82       	std	Y+2, r1	; 0x02
    3c62:	19 82       	std	Y+1, r1	; 0x01
    3c64:	13 c0       	rjmp	.+38     	; 0x3c8c <poW+0x70>
		{
			l *= base;
    3c66:	2b 81       	ldd	r18, Y+3	; 0x03
    3c68:	3c 81       	ldd	r19, Y+4	; 0x04
    3c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c6e:	ac 01       	movw	r20, r24
    3c70:	24 9f       	mul	r18, r20
    3c72:	c0 01       	movw	r24, r0
    3c74:	25 9f       	mul	r18, r21
    3c76:	90 0d       	add	r25, r0
    3c78:	34 9f       	mul	r19, r20
    3c7a:	90 0d       	add	r25, r0
    3c7c:	11 24       	eor	r1, r1
    3c7e:	9c 83       	std	Y+4, r25	; 0x04
    3c80:	8b 83       	std	Y+3, r24	; 0x03
			l = 0;
		}
	}
	else
	{
		for(i=0; i<exponent; i++)
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	9a 81       	ldd	r25, Y+2	; 0x02
    3c86:	01 96       	adiw	r24, 0x01	; 1
    3c88:	9a 83       	std	Y+2, r25	; 0x02
    3c8a:	89 83       	std	Y+1, r24	; 0x01
    3c8c:	29 81       	ldd	r18, Y+1	; 0x01
    3c8e:	3a 81       	ldd	r19, Y+2	; 0x02
    3c90:	8f 81       	ldd	r24, Y+7	; 0x07
    3c92:	98 85       	ldd	r25, Y+8	; 0x08
    3c94:	28 17       	cp	r18, r24
    3c96:	39 07       	cpc	r19, r25
    3c98:	34 f3       	brlt	.-52     	; 0x3c66 <poW+0x4a>
		{
			l *= base;
		}
	}
	return l;
    3c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3c9e:	28 96       	adiw	r28, 0x08	; 8
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	cd bf       	out	0x3d, r28	; 61
    3caa:	cf 91       	pop	r28
    3cac:	df 91       	pop	r29
    3cae:	08 95       	ret

00003cb0 <KEYPAD_vInit>:
		{'-', '3', '2', '1'},
		{'+', '=', '0', 'd'}
};

void KEYPAD_vInit(void)
{
    3cb0:	df 93       	push	r29
    3cb2:	cf 93       	push	r28
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
	#if KEYPAD_PORT_INPUT == HIGH_NIBBLE
		GPIO_vSetPortDirection(KEYPAD_PORT, 0x0F);
    3cb8:	82 e0       	ldi	r24, 0x02	; 2
    3cba:	6f e0       	ldi	r22, 0x0F	; 15
    3cbc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GPIO_vSetPortDirection>
		GPIO_vSetPortValue(KEYPAD_PORT, 0xF0); //Activate Pull-up resistor
    3cc0:	82 e0       	ldi	r24, 0x02	; 2
    3cc2:	60 ef       	ldi	r22, 0xF0	; 240
    3cc4:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <GPIO_vSetPortValue>
	#elif KEYPAD_PORT_INPUT == LOW_NIBBLE
		GPIO_vSetPortDirection(KEYPAD_PORT, 0xF0);
		GPIO_vSetPortValue(KEYPAD_PORT, 0x0F);//Activate Pull-up resistor
	#endif
}
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <KEYPAD_u8GetPressed>:

u8   KEYPAD_u8GetPressed(void)
{
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	62 97       	sbiw	r28, 0x12	; 18
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
	}
	return Local_u8ReturnValue;
#endif

#if 1
	u8 Local_pressed_key=0;
    3ce2:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Local_col, Local_row;
	u8 Local_flag = 0;
    3ce4:	1f 86       	std	Y+15, r1	; 0x0f
    3ce6:	b3 c0       	rjmp	.+358    	; 0x3e4e <KEYPAD_u8GetPressed+0x180>
	while (Local_flag == 0)
	{
		for(Local_col=0; Local_col<COLUMNS_NO; Local_col++)
    3ce8:	19 8a       	std	Y+17, r1	; 0x11
    3cea:	ad c0       	rjmp	.+346    	; 0x3e46 <KEYPAD_u8GetPressed+0x178>
		{
			GPIO_vSetPinValue(KEYPAD_PORT, Local_col, LOW);
    3cec:	82 e0       	ldi	r24, 0x02	; 2
    3cee:	69 89       	ldd	r22, Y+17	; 0x11
    3cf0:	40 e0       	ldi	r20, 0x00	; 0
    3cf2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
			for(Local_row=0; Local_row<ROWS_NO; Local_row++)
    3cf6:	18 8a       	std	Y+16, r1	; 0x10
    3cf8:	97 c0       	rjmp	.+302    	; 0x3e28 <KEYPAD_u8GetPressed+0x15a>
			{
				if(GPIO_u8GetPinValue(KEYPAD_PORT, Local_row+4) == 0)
    3cfa:	88 89       	ldd	r24, Y+16	; 0x10
    3cfc:	98 2f       	mov	r25, r24
    3cfe:	9c 5f       	subi	r25, 0xFC	; 252
    3d00:	82 e0       	ldi	r24, 0x02	; 2
    3d02:	69 2f       	mov	r22, r25
    3d04:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_u8GetPinValue>
    3d08:	88 23       	and	r24, r24
    3d0a:	09 f0       	breq	.+2      	; 0x3d0e <KEYPAD_u8GetPressed+0x40>
    3d0c:	8a c0       	rjmp	.+276    	; 0x3e22 <KEYPAD_u8GetPressed+0x154>
				{
					Local_pressed_key = (Local_row+(Local_col*4)+1);
    3d0e:	89 89       	ldd	r24, Y+17	; 0x11
    3d10:	88 2f       	mov	r24, r24
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	88 0f       	add	r24, r24
    3d1a:	99 1f       	adc	r25, r25
    3d1c:	98 2f       	mov	r25, r24
    3d1e:	88 89       	ldd	r24, Y+16	; 0x10
    3d20:	89 0f       	add	r24, r25
    3d22:	8f 5f       	subi	r24, 0xFF	; 255
    3d24:	8a 8b       	std	Y+18, r24	; 0x12
					while(GPIO_u8GetPinValue(KEYPAD_PORT, Local_row + 4) == 0);
    3d26:	88 89       	ldd	r24, Y+16	; 0x10
    3d28:	98 2f       	mov	r25, r24
    3d2a:	9c 5f       	subi	r25, 0xFC	; 252
    3d2c:	82 e0       	ldi	r24, 0x02	; 2
    3d2e:	69 2f       	mov	r22, r25
    3d30:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_u8GetPinValue>
    3d34:	88 23       	and	r24, r24
    3d36:	b9 f3       	breq	.-18     	; 0x3d26 <KEYPAD_u8GetPressed+0x58>
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	a0 ea       	ldi	r26, 0xA0	; 160
    3d3e:	b0 e4       	ldi	r27, 0x40	; 64
    3d40:	8b 87       	std	Y+11, r24	; 0x0b
    3d42:	9c 87       	std	Y+12, r25	; 0x0c
    3d44:	ad 87       	std	Y+13, r26	; 0x0d
    3d46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	4a ef       	ldi	r20, 0xFA	; 250
    3d56:	54 e4       	ldi	r21, 0x44	; 68
    3d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	8f 83       	std	Y+7, r24	; 0x07
    3d62:	98 87       	std	Y+8, r25	; 0x08
    3d64:	a9 87       	std	Y+9, r26	; 0x09
    3d66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d68:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6a:	78 85       	ldd	r23, Y+8	; 0x08
    3d6c:	89 85       	ldd	r24, Y+9	; 0x09
    3d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	40 e8       	ldi	r20, 0x80	; 128
    3d76:	5f e3       	ldi	r21, 0x3F	; 63
    3d78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d7c:	88 23       	and	r24, r24
    3d7e:	2c f4       	brge	.+10     	; 0x3d8a <KEYPAD_u8GetPressed+0xbc>
		__ticks = 1;
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	9e 83       	std	Y+6, r25	; 0x06
    3d86:	8d 83       	std	Y+5, r24	; 0x05
    3d88:	3f c0       	rjmp	.+126    	; 0x3e08 <KEYPAD_u8GetPressed+0x13a>
	else if (__tmp > 65535)
    3d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d8c:	78 85       	ldd	r23, Y+8	; 0x08
    3d8e:	89 85       	ldd	r24, Y+9	; 0x09
    3d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	3f ef       	ldi	r19, 0xFF	; 255
    3d96:	4f e7       	ldi	r20, 0x7F	; 127
    3d98:	57 e4       	ldi	r21, 0x47	; 71
    3d9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d9e:	18 16       	cp	r1, r24
    3da0:	4c f5       	brge	.+82     	; 0x3df4 <KEYPAD_u8GetPressed+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	40 e2       	ldi	r20, 0x20	; 32
    3db0:	51 e4       	ldi	r21, 0x41	; 65
    3db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	bc 01       	movw	r22, r24
    3dbc:	cd 01       	movw	r24, r26
    3dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	9e 83       	std	Y+6, r25	; 0x06
    3dc8:	8d 83       	std	Y+5, r24	; 0x05
    3dca:	0f c0       	rjmp	.+30     	; 0x3dea <KEYPAD_u8GetPressed+0x11c>
    3dcc:	88 ec       	ldi	r24, 0xC8	; 200
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	9c 83       	std	Y+4, r25	; 0x04
    3dd2:	8b 83       	std	Y+3, r24	; 0x03
    3dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	f1 f7       	brne	.-4      	; 0x3dd8 <KEYPAD_u8GetPressed+0x10a>
    3ddc:	9c 83       	std	Y+4, r25	; 0x04
    3dde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de0:	8d 81       	ldd	r24, Y+5	; 0x05
    3de2:	9e 81       	ldd	r25, Y+6	; 0x06
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	9e 83       	std	Y+6, r25	; 0x06
    3de8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dea:	8d 81       	ldd	r24, Y+5	; 0x05
    3dec:	9e 81       	ldd	r25, Y+6	; 0x06
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	69 f7       	brne	.-38     	; 0x3dcc <KEYPAD_u8GetPressed+0xfe>
    3df2:	14 c0       	rjmp	.+40     	; 0x3e1c <KEYPAD_u8GetPressed+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df4:	6f 81       	ldd	r22, Y+7	; 0x07
    3df6:	78 85       	ldd	r23, Y+8	; 0x08
    3df8:	89 85       	ldd	r24, Y+9	; 0x09
    3dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	9e 83       	std	Y+6, r25	; 0x06
    3e06:	8d 83       	std	Y+5, r24	; 0x05
    3e08:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0c:	9a 83       	std	Y+2, r25	; 0x02
    3e0e:	89 83       	std	Y+1, r24	; 0x01
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	9a 81       	ldd	r25, Y+2	; 0x02
    3e14:	01 97       	sbiw	r24, 0x01	; 1
    3e16:	f1 f7       	brne	.-4      	; 0x3e14 <KEYPAD_u8GetPressed+0x146>
    3e18:	9a 83       	std	Y+2, r25	; 0x02
    3e1a:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(5);
					Local_flag = 1;
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	8f 87       	std	Y+15, r24	; 0x0f
    3e20:	07 c0       	rjmp	.+14     	; 0x3e30 <KEYPAD_u8GetPressed+0x162>
	while (Local_flag == 0)
	{
		for(Local_col=0; Local_col<COLUMNS_NO; Local_col++)
		{
			GPIO_vSetPinValue(KEYPAD_PORT, Local_col, LOW);
			for(Local_row=0; Local_row<ROWS_NO; Local_row++)
    3e22:	88 89       	ldd	r24, Y+16	; 0x10
    3e24:	8f 5f       	subi	r24, 0xFF	; 255
    3e26:	88 8b       	std	Y+16, r24	; 0x10
    3e28:	88 89       	ldd	r24, Y+16	; 0x10
    3e2a:	84 30       	cpi	r24, 0x04	; 4
    3e2c:	08 f4       	brcc	.+2      	; 0x3e30 <KEYPAD_u8GetPressed+0x162>
    3e2e:	65 cf       	rjmp	.-310    	; 0x3cfa <KEYPAD_u8GetPressed+0x2c>
					_delay_ms(5);
					Local_flag = 1;
					break;
				}
			}
			GPIO_vSetPinValue(KEYPAD_PORT, Local_col, HIGH);
    3e30:	82 e0       	ldi	r24, 0x02	; 2
    3e32:	69 89       	ldd	r22, Y+17	; 0x11
    3e34:	41 e0       	ldi	r20, 0x01	; 1
    3e36:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
			if (Local_flag == 1)
    3e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e3c:	81 30       	cpi	r24, 0x01	; 1
    3e3e:	39 f0       	breq	.+14     	; 0x3e4e <KEYPAD_u8GetPressed+0x180>
	u8 Local_pressed_key=0;
	u8 Local_col, Local_row;
	u8 Local_flag = 0;
	while (Local_flag == 0)
	{
		for(Local_col=0; Local_col<COLUMNS_NO; Local_col++)
    3e40:	89 89       	ldd	r24, Y+17	; 0x11
    3e42:	8f 5f       	subi	r24, 0xFF	; 255
    3e44:	89 8b       	std	Y+17, r24	; 0x11
    3e46:	89 89       	ldd	r24, Y+17	; 0x11
    3e48:	84 30       	cpi	r24, 0x04	; 4
    3e4a:	08 f4       	brcc	.+2      	; 0x3e4e <KEYPAD_u8GetPressed+0x180>
    3e4c:	4f cf       	rjmp	.-354    	; 0x3cec <KEYPAD_u8GetPressed+0x1e>

#if 1
	u8 Local_pressed_key=0;
	u8 Local_col, Local_row;
	u8 Local_flag = 0;
	while (Local_flag == 0)
    3e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e50:	88 23       	and	r24, r24
    3e52:	09 f4       	brne	.+2      	; 0x3e56 <KEYPAD_u8GetPressed+0x188>
    3e54:	49 cf       	rjmp	.-366    	; 0x3ce8 <KEYPAD_u8GetPressed+0x1a>
			GPIO_vSetPinValue(KEYPAD_PORT, Local_col, HIGH);
			if (Local_flag == 1)
				break;
		}
	}
	return Local_pressed_key;
    3e56:	8a 89       	ldd	r24, Y+18	; 0x12
#endif

}
    3e58:	62 96       	adiw	r28, 0x12	; 18
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	cf 91       	pop	r28
    3e66:	df 91       	pop	r29
    3e68:	08 95       	ret

00003e6a <APP_voidInit>:
void GS_APP_vON_OFFTheAC(void);
void G_APP_vStartACMotion(void);
u8 G_ON_OFFTheACFlag = 0;

void APP_voidInit(void)
{
    3e6a:	df 93       	push	r29
    3e6c:	cf 93       	push	r28
    3e6e:	cd b7       	in	r28, 0x3d	; 61
    3e70:	de b7       	in	r29, 0x3e	; 62
	I2C_vInit();
    3e72:	0e 94 66 0a 	call	0x14cc	; 0x14cc <I2C_vInit>
	I2C_vStart();
    3e76:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <I2C_vStart>
	I2C_vWrite(0x70);
    3e7a:	80 e7       	ldi	r24, 0x70	; 112
    3e7c:	0e 94 88 0a 	call	0x1510	; 0x1510 <I2C_vWrite>
	LCD_I2C_vInit();
    3e80:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_I2C_vInit>
	KEYPAD_vInit();
    3e84:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <KEYPAD_vInit>
	TIMERS_vInit();
    3e88:	0e 94 75 07 	call	0xeea	; 0xeea <TIMERS_vInit>
	SERVOM_vInit();
    3e8c:	0e 94 a5 11 	call	0x234a	; 0x234a <SERVOM_vInit>
	ADC_vInit();
    3e90:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <ADC_vInit>
}
    3e94:	cf 91       	pop	r28
    3e96:	df 91       	pop	r29
    3e98:	08 95       	ret

00003e9a <APP_voidInitTheSystem>:


void APP_voidInitTheSystem(void)
{
    3e9a:	df 93       	push	r29
    3e9c:	cf 93       	push	r28
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
	// Buzzer direction
	GPIO_vSetPinDirection(APP_BUZZER_PORT, APP_BUZZER_PIN, OUTPUT_PIN);
    3ea2:	84 e0       	ldi	r24, 0x04	; 4
    3ea4:	67 e0       	ldi	r22, 0x07	; 7
    3ea6:	41 e0       	ldi	r20, 0x01	; 1
    3ea8:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
	// RED LED direction
	GPIO_vSetPinDirection(APP_RED_LED_PORT, APP_RED_LED_PIN, OUTPUT_PIN);
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	60 e0       	ldi	r22, 0x00	; 0
    3eb0:	41 e0       	ldi	r20, 0x01	; 1
    3eb2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
	// DCM direction
	GPIO_vSetPinDirection(APP_DCM_PORT, APP_DCM_PIN, OUTPUT_PIN);
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	61 e0       	ldi	r22, 0x01	; 1
    3eba:	41 e0       	ldi	r20, 0x01	; 1
    3ebc:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
	// LCD Saving the heart arrary emoji in the CGRAM of LCD
	LCD_I2C_vSaveCustomChar(heart, 0);
    3ec0:	8e e3       	ldi	r24, 0x3E	; 62
    3ec2:	92 e0       	ldi	r25, 0x02	; 2
    3ec4:	60 e0       	ldi	r22, 0x00	; 0
    3ec6:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_I2C_vSaveCustomChar>
	// AC OFF button direction
	GPIO_vSetPinDirection(APP_AC_ON_OFF_BUTTON_PORT, APP_AC_ON_OFF_BUTTON_PIN, OUTPUT_PIN);
    3eca:	84 e0       	ldi	r24, 0x04	; 4
    3ecc:	63 e0       	ldi	r22, 0x03	; 3
    3ece:	41 e0       	ldi	r20, 0x01	; 1
    3ed0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GPIO_vSetPinDirection>
	// AC OFF button Pull-up activation
	GPIO_vSetPinValue(APP_AC_ON_OFF_BUTTON_PORT, APP_AC_ON_OFF_BUTTON_PIN, HIGH);
    3ed4:	84 e0       	ldi	r24, 0x04	; 4
    3ed6:	63 e0       	ldi	r22, 0x03	; 3
    3ed8:	41 e0       	ldi	r20, 0x01	; 1
    3eda:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
	// Global Interrupt Activation
	GIE_vEnableGIE();
    3ede:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <GIE_vEnableGIE>
	// INT0 Enable (APP EXIT button)
	EXTI_vEnable(EXTI_INT0, EXTI_FALLING_EDGE);
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	62 e0       	ldi	r22, 0x02	; 2
    3ee6:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <EXTI_vEnable>
}
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	08 95       	ret

00003ef0 <APP_voidStartTheSystem>:

void APP_voidStartTheSystem(void)
{
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
	APP_voidInitTheSystem();
    3ef8:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <APP_voidInitTheSystem>
	APP_voidEnterLandingState();
    3efc:	0e 94 29 21 	call	0x4252	; 0x4252 <APP_voidEnterLandingState>
}
    3f00:	cf 91       	pop	r28
    3f02:	df 91       	pop	r29
    3f04:	08 95       	ret

00003f06 <APP_voidWelcomeScreen>:

void APP_voidWelcomeScreen (void)
{
    3f06:	df 93       	push	r29
    3f08:	cf 93       	push	r28
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	6d 97       	sbiw	r28, 0x1d	; 29
    3f10:	0f b6       	in	r0, 0x3f	; 63
    3f12:	f8 94       	cli
    3f14:	de bf       	out	0x3e, r29	; 62
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	cd bf       	out	0x3d, r28	; 61
	/*welcome screen*/
	for(u8 j=0; j<3; j++)
    3f1a:	1d 8e       	std	Y+29, r1	; 0x1d
    3f1c:	f9 c0       	rjmp	.+498    	; 0x4110 <APP_voidWelcomeScreen+0x20a>
	{
		LCD_I2C_vSetCursorPosition(0, 4);
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	64 e0       	ldi	r22, 0x04	; 4
    3f22:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
		LCD_I2C_vSendString(" NAGAH  ");
    3f26:	80 e6       	ldi	r24, 0x60	; 96
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
		LCD_I2C_vSetCursorPosition(1, 3);
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	63 e0       	ldi	r22, 0x03	; 3
    3f32:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
		LCD_I2C_vSendString("Smart Home");
    3f36:	89 e6       	ldi	r24, 0x69	; 105
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	a6 e9       	ldi	r26, 0x96	; 150
    3f44:	b3 e4       	ldi	r27, 0x43	; 67
    3f46:	89 8f       	std	Y+25, r24	; 0x19
    3f48:	9a 8f       	std	Y+26, r25	; 0x1a
    3f4a:	ab 8f       	std	Y+27, r26	; 0x1b
    3f4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f4e:	69 8d       	ldd	r22, Y+25	; 0x19
    3f50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	4a ef       	ldi	r20, 0xFA	; 250
    3f5c:	54 e4       	ldi	r21, 0x44	; 68
    3f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	8d 8b       	std	Y+21, r24	; 0x15
    3f68:	9e 8b       	std	Y+22, r25	; 0x16
    3f6a:	af 8b       	std	Y+23, r26	; 0x17
    3f6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    3f70:	7e 89       	ldd	r23, Y+22	; 0x16
    3f72:	8f 89       	ldd	r24, Y+23	; 0x17
    3f74:	98 8d       	ldd	r25, Y+24	; 0x18
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e8       	ldi	r20, 0x80	; 128
    3f7c:	5f e3       	ldi	r21, 0x3F	; 63
    3f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f82:	88 23       	and	r24, r24
    3f84:	2c f4       	brge	.+10     	; 0x3f90 <APP_voidWelcomeScreen+0x8a>
		__ticks = 1;
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	9c 8b       	std	Y+20, r25	; 0x14
    3f8c:	8b 8b       	std	Y+19, r24	; 0x13
    3f8e:	3f c0       	rjmp	.+126    	; 0x400e <APP_voidWelcomeScreen+0x108>
	else if (__tmp > 65535)
    3f90:	6d 89       	ldd	r22, Y+21	; 0x15
    3f92:	7e 89       	ldd	r23, Y+22	; 0x16
    3f94:	8f 89       	ldd	r24, Y+23	; 0x17
    3f96:	98 8d       	ldd	r25, Y+24	; 0x18
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	3f ef       	ldi	r19, 0xFF	; 255
    3f9c:	4f e7       	ldi	r20, 0x7F	; 127
    3f9e:	57 e4       	ldi	r21, 0x47	; 71
    3fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fa4:	18 16       	cp	r1, r24
    3fa6:	4c f5       	brge	.+82     	; 0x3ffa <APP_voidWelcomeScreen+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa8:	69 8d       	ldd	r22, Y+25	; 0x19
    3faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e2       	ldi	r20, 0x20	; 32
    3fb6:	51 e4       	ldi	r21, 0x41	; 65
    3fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	9c 8b       	std	Y+20, r25	; 0x14
    3fce:	8b 8b       	std	Y+19, r24	; 0x13
    3fd0:	0f c0       	rjmp	.+30     	; 0x3ff0 <APP_voidWelcomeScreen+0xea>
    3fd2:	88 ec       	ldi	r24, 0xC8	; 200
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	9a 8b       	std	Y+18, r25	; 0x12
    3fd8:	89 8b       	std	Y+17, r24	; 0x11
    3fda:	89 89       	ldd	r24, Y+17	; 0x11
    3fdc:	9a 89       	ldd	r25, Y+18	; 0x12
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	f1 f7       	brne	.-4      	; 0x3fde <APP_voidWelcomeScreen+0xd8>
    3fe2:	9a 8b       	std	Y+18, r25	; 0x12
    3fe4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    3fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	9c 8b       	std	Y+20, r25	; 0x14
    3fee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	69 f7       	brne	.-38     	; 0x3fd2 <APP_voidWelcomeScreen+0xcc>
    3ff8:	14 c0       	rjmp	.+40     	; 0x4022 <APP_voidWelcomeScreen+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    3ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    3ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    4000:	98 8d       	ldd	r25, Y+24	; 0x18
    4002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	9c 8b       	std	Y+20, r25	; 0x14
    400c:	8b 8b       	std	Y+19, r24	; 0x13
    400e:	8b 89       	ldd	r24, Y+19	; 0x13
    4010:	9c 89       	ldd	r25, Y+20	; 0x14
    4012:	98 8b       	std	Y+16, r25	; 0x10
    4014:	8f 87       	std	Y+15, r24	; 0x0f
    4016:	8f 85       	ldd	r24, Y+15	; 0x0f
    4018:	98 89       	ldd	r25, Y+16	; 0x10
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	f1 f7       	brne	.-4      	; 0x401a <APP_voidWelcomeScreen+0x114>
    401e:	98 8b       	std	Y+16, r25	; 0x10
    4020:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LCD_I2C_vClear();
    4022:	0e 94 31 16 	call	0x2c62	; 0x2c62 <LCD_I2C_vClear>
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	a6 e9       	ldi	r26, 0x96	; 150
    402c:	b3 e4       	ldi	r27, 0x43	; 67
    402e:	8b 87       	std	Y+11, r24	; 0x0b
    4030:	9c 87       	std	Y+12, r25	; 0x0c
    4032:	ad 87       	std	Y+13, r26	; 0x0d
    4034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4036:	6b 85       	ldd	r22, Y+11	; 0x0b
    4038:	7c 85       	ldd	r23, Y+12	; 0x0c
    403a:	8d 85       	ldd	r24, Y+13	; 0x0d
    403c:	9e 85       	ldd	r25, Y+14	; 0x0e
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	4a ef       	ldi	r20, 0xFA	; 250
    4044:	54 e4       	ldi	r21, 0x44	; 68
    4046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	8f 83       	std	Y+7, r24	; 0x07
    4050:	98 87       	std	Y+8, r25	; 0x08
    4052:	a9 87       	std	Y+9, r26	; 0x09
    4054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4056:	6f 81       	ldd	r22, Y+7	; 0x07
    4058:	78 85       	ldd	r23, Y+8	; 0x08
    405a:	89 85       	ldd	r24, Y+9	; 0x09
    405c:	9a 85       	ldd	r25, Y+10	; 0x0a
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e8       	ldi	r20, 0x80	; 128
    4064:	5f e3       	ldi	r21, 0x3F	; 63
    4066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    406a:	88 23       	and	r24, r24
    406c:	2c f4       	brge	.+10     	; 0x4078 <APP_voidWelcomeScreen+0x172>
		__ticks = 1;
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	9e 83       	std	Y+6, r25	; 0x06
    4074:	8d 83       	std	Y+5, r24	; 0x05
    4076:	3f c0       	rjmp	.+126    	; 0x40f6 <APP_voidWelcomeScreen+0x1f0>
	else if (__tmp > 65535)
    4078:	6f 81       	ldd	r22, Y+7	; 0x07
    407a:	78 85       	ldd	r23, Y+8	; 0x08
    407c:	89 85       	ldd	r24, Y+9	; 0x09
    407e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	3f ef       	ldi	r19, 0xFF	; 255
    4084:	4f e7       	ldi	r20, 0x7F	; 127
    4086:	57 e4       	ldi	r21, 0x47	; 71
    4088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    408c:	18 16       	cp	r1, r24
    408e:	4c f5       	brge	.+82     	; 0x40e2 <APP_voidWelcomeScreen+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4090:	6b 85       	ldd	r22, Y+11	; 0x0b
    4092:	7c 85       	ldd	r23, Y+12	; 0x0c
    4094:	8d 85       	ldd	r24, Y+13	; 0x0d
    4096:	9e 85       	ldd	r25, Y+14	; 0x0e
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e2       	ldi	r20, 0x20	; 32
    409e:	51 e4       	ldi	r21, 0x41	; 65
    40a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	bc 01       	movw	r22, r24
    40aa:	cd 01       	movw	r24, r26
    40ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b0:	dc 01       	movw	r26, r24
    40b2:	cb 01       	movw	r24, r22
    40b4:	9e 83       	std	Y+6, r25	; 0x06
    40b6:	8d 83       	std	Y+5, r24	; 0x05
    40b8:	0f c0       	rjmp	.+30     	; 0x40d8 <APP_voidWelcomeScreen+0x1d2>
    40ba:	88 ec       	ldi	r24, 0xC8	; 200
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	9c 83       	std	Y+4, r25	; 0x04
    40c0:	8b 83       	std	Y+3, r24	; 0x03
    40c2:	8b 81       	ldd	r24, Y+3	; 0x03
    40c4:	9c 81       	ldd	r25, Y+4	; 0x04
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	f1 f7       	brne	.-4      	; 0x40c6 <APP_voidWelcomeScreen+0x1c0>
    40ca:	9c 83       	std	Y+4, r25	; 0x04
    40cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ce:	8d 81       	ldd	r24, Y+5	; 0x05
    40d0:	9e 81       	ldd	r25, Y+6	; 0x06
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	9e 83       	std	Y+6, r25	; 0x06
    40d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d8:	8d 81       	ldd	r24, Y+5	; 0x05
    40da:	9e 81       	ldd	r25, Y+6	; 0x06
    40dc:	00 97       	sbiw	r24, 0x00	; 0
    40de:	69 f7       	brne	.-38     	; 0x40ba <APP_voidWelcomeScreen+0x1b4>
    40e0:	14 c0       	rjmp	.+40     	; 0x410a <APP_voidWelcomeScreen+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e2:	6f 81       	ldd	r22, Y+7	; 0x07
    40e4:	78 85       	ldd	r23, Y+8	; 0x08
    40e6:	89 85       	ldd	r24, Y+9	; 0x09
    40e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	9e 83       	std	Y+6, r25	; 0x06
    40f4:	8d 83       	std	Y+5, r24	; 0x05
    40f6:	8d 81       	ldd	r24, Y+5	; 0x05
    40f8:	9e 81       	ldd	r25, Y+6	; 0x06
    40fa:	9a 83       	std	Y+2, r25	; 0x02
    40fc:	89 83       	std	Y+1, r24	; 0x01
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
    4100:	9a 81       	ldd	r25, Y+2	; 0x02
    4102:	01 97       	sbiw	r24, 0x01	; 1
    4104:	f1 f7       	brne	.-4      	; 0x4102 <APP_voidWelcomeScreen+0x1fc>
    4106:	9a 83       	std	Y+2, r25	; 0x02
    4108:	89 83       	std	Y+1, r24	; 0x01
}

void APP_voidWelcomeScreen (void)
{
	/*welcome screen*/
	for(u8 j=0; j<3; j++)
    410a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    410c:	8f 5f       	subi	r24, 0xFF	; 255
    410e:	8d 8f       	std	Y+29, r24	; 0x1d
    4110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4112:	83 30       	cpi	r24, 0x03	; 3
    4114:	08 f4       	brcc	.+2      	; 0x4118 <APP_voidWelcomeScreen+0x212>
    4116:	03 cf       	rjmp	.-506    	; 0x3f1e <APP_voidWelcomeScreen+0x18>
		LCD_I2C_vSendString("Smart Home");
		_delay_ms(300);
		LCD_I2C_vClear();
		_delay_ms(300);
	}
}
    4118:	6d 96       	adiw	r28, 0x1d	; 29
    411a:	0f b6       	in	r0, 0x3f	; 63
    411c:	f8 94       	cli
    411e:	de bf       	out	0x3e, r29	; 62
    4120:	0f be       	out	0x3f, r0	; 63
    4122:	cd bf       	out	0x3d, r28	; 61
    4124:	cf 91       	pop	r28
    4126:	df 91       	pop	r29
    4128:	08 95       	ret

0000412a <APP_voidUserWelcomeScreen>:

void APP_voidUserWelcomeScreen(void)
{
    412a:	df 93       	push	r29
    412c:	cf 93       	push	r28
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	2e 97       	sbiw	r28, 0x0e	; 14
    4134:	0f b6       	in	r0, 0x3f	; 63
    4136:	f8 94       	cli
    4138:	de bf       	out	0x3e, r29	; 62
    413a:	0f be       	out	0x3f, r0	; 63
    413c:	cd bf       	out	0x3d, r28	; 61
	LCD_I2C_vClear();
    413e:	0e 94 31 16 	call	0x2c62	; 0x2c62 <LCD_I2C_vClear>
	LCD_I2C_vSendString("Welcome ");
    4142:	84 e7       	ldi	r24, 0x74	; 116
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
	LCD_I2C_vSetCursorPosition(0, 10);
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	6a e0       	ldi	r22, 0x0A	; 10
    414e:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
	LCD_I2C_vDisplayCustomChar(0);
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <LCD_I2C_vDisplayCustomChar>
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	aa e7       	ldi	r26, 0x7A	; 122
    415e:	b4 e4       	ldi	r27, 0x44	; 68
    4160:	8b 87       	std	Y+11, r24	; 0x0b
    4162:	9c 87       	std	Y+12, r25	; 0x0c
    4164:	ad 87       	std	Y+13, r26	; 0x0d
    4166:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4168:	6b 85       	ldd	r22, Y+11	; 0x0b
    416a:	7c 85       	ldd	r23, Y+12	; 0x0c
    416c:	8d 85       	ldd	r24, Y+13	; 0x0d
    416e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	4a ef       	ldi	r20, 0xFA	; 250
    4176:	54 e4       	ldi	r21, 0x44	; 68
    4178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	8f 83       	std	Y+7, r24	; 0x07
    4182:	98 87       	std	Y+8, r25	; 0x08
    4184:	a9 87       	std	Y+9, r26	; 0x09
    4186:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4188:	6f 81       	ldd	r22, Y+7	; 0x07
    418a:	78 85       	ldd	r23, Y+8	; 0x08
    418c:	89 85       	ldd	r24, Y+9	; 0x09
    418e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	40 e8       	ldi	r20, 0x80	; 128
    4196:	5f e3       	ldi	r21, 0x3F	; 63
    4198:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    419c:	88 23       	and	r24, r24
    419e:	2c f4       	brge	.+10     	; 0x41aa <APP_voidUserWelcomeScreen+0x80>
		__ticks = 1;
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	9e 83       	std	Y+6, r25	; 0x06
    41a6:	8d 83       	std	Y+5, r24	; 0x05
    41a8:	3f c0       	rjmp	.+126    	; 0x4228 <APP_voidUserWelcomeScreen+0xfe>
	else if (__tmp > 65535)
    41aa:	6f 81       	ldd	r22, Y+7	; 0x07
    41ac:	78 85       	ldd	r23, Y+8	; 0x08
    41ae:	89 85       	ldd	r24, Y+9	; 0x09
    41b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	3f ef       	ldi	r19, 0xFF	; 255
    41b6:	4f e7       	ldi	r20, 0x7F	; 127
    41b8:	57 e4       	ldi	r21, 0x47	; 71
    41ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	4c f5       	brge	.+82     	; 0x4214 <APP_voidUserWelcomeScreen+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	40 e2       	ldi	r20, 0x20	; 32
    41d0:	51 e4       	ldi	r21, 0x41	; 65
    41d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	bc 01       	movw	r22, r24
    41dc:	cd 01       	movw	r24, r26
    41de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	9e 83       	std	Y+6, r25	; 0x06
    41e8:	8d 83       	std	Y+5, r24	; 0x05
    41ea:	0f c0       	rjmp	.+30     	; 0x420a <APP_voidUserWelcomeScreen+0xe0>
    41ec:	88 ec       	ldi	r24, 0xC8	; 200
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	9c 83       	std	Y+4, r25	; 0x04
    41f2:	8b 83       	std	Y+3, r24	; 0x03
    41f4:	8b 81       	ldd	r24, Y+3	; 0x03
    41f6:	9c 81       	ldd	r25, Y+4	; 0x04
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	f1 f7       	brne	.-4      	; 0x41f8 <APP_voidUserWelcomeScreen+0xce>
    41fc:	9c 83       	std	Y+4, r25	; 0x04
    41fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	9e 83       	std	Y+6, r25	; 0x06
    4208:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    420a:	8d 81       	ldd	r24, Y+5	; 0x05
    420c:	9e 81       	ldd	r25, Y+6	; 0x06
    420e:	00 97       	sbiw	r24, 0x00	; 0
    4210:	69 f7       	brne	.-38     	; 0x41ec <APP_voidUserWelcomeScreen+0xc2>
    4212:	14 c0       	rjmp	.+40     	; 0x423c <APP_voidUserWelcomeScreen+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4214:	6f 81       	ldd	r22, Y+7	; 0x07
    4216:	78 85       	ldd	r23, Y+8	; 0x08
    4218:	89 85       	ldd	r24, Y+9	; 0x09
    421a:	9a 85       	ldd	r25, Y+10	; 0x0a
    421c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	9e 83       	std	Y+6, r25	; 0x06
    4226:	8d 83       	std	Y+5, r24	; 0x05
    4228:	8d 81       	ldd	r24, Y+5	; 0x05
    422a:	9e 81       	ldd	r25, Y+6	; 0x06
    422c:	9a 83       	std	Y+2, r25	; 0x02
    422e:	89 83       	std	Y+1, r24	; 0x01
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	9a 81       	ldd	r25, Y+2	; 0x02
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <APP_voidUserWelcomeScreen+0x10a>
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_I2C_vClear();
    423c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <LCD_I2C_vClear>
}
    4240:	2e 96       	adiw	r28, 0x0e	; 14
    4242:	0f b6       	in	r0, 0x3f	; 63
    4244:	f8 94       	cli
    4246:	de bf       	out	0x3e, r29	; 62
    4248:	0f be       	out	0x3f, r0	; 63
    424a:	cd bf       	out	0x3d, r28	; 61
    424c:	cf 91       	pop	r28
    424e:	df 91       	pop	r29
    4250:	08 95       	ret

00004252 <APP_voidEnterLandingState>:

void APP_voidEnterLandingState(void)
{
    4252:	df 93       	push	r29
    4254:	cf 93       	push	r28
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
    425a:	64 97       	sbiw	r28, 0x14	; 20
    425c:	0f b6       	in	r0, 0x3f	; 63
    425e:	f8 94       	cli
    4260:	de bf       	out	0x3e, r29	; 62
    4262:	0f be       	out	0x3f, r0	; 63
    4264:	cd bf       	out	0x3d, r28	; 61
	u16 Pass = 0;
    4266:	1c 8a       	std	Y+20, r1	; 0x14
    4268:	1b 8a       	std	Y+19, r1	; 0x13
	u8 PassTryFlag = 0;
    426a:	1a 8a       	std	Y+18, r1	; 0x12
	u8 PassKey = 0;
    426c:	19 8a       	std	Y+17, r1	; 0x11
	LCD_I2C_vSetCursorPosition(0, 0);
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	60 e0       	ldi	r22, 0x00	; 0
    4272:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
	LCD_I2C_vSendString("Enter pass:");
    4276:	8d e7       	ldi	r24, 0x7D	; 125
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
	u16 i= 1000;
    427e:	88 ee       	ldi	r24, 0xE8	; 232
    4280:	93 e0       	ldi	r25, 0x03	; 3
    4282:	98 8b       	std	Y+16, r25	; 0x10
    4284:	8f 87       	std	Y+15, r24	; 0x0f

	do{
		LCD_I2C_vSetCursorPosition(1,1);
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	61 e0       	ldi	r22, 0x01	; 1
    428a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
		Pass = 0;
    428e:	1c 8a       	std	Y+20, r1	; 0x14
    4290:	1b 8a       	std	Y+19, r1	; 0x13
		PassTryFlag++;
    4292:	8a 89       	ldd	r24, Y+18	; 0x12
    4294:	8f 5f       	subi	r24, 0xFF	; 255
    4296:	8a 8b       	std	Y+18, r24	; 0x12
	while(1)
	{
		PassKey = KEYPAD_u8GetPressed();
    4298:	0e 94 67 1e 	call	0x3cce	; 0x3cce <KEYPAD_u8GetPressed>
    429c:	89 8b       	std	Y+17, r24	; 0x11
		LCD_I2C_vSendChar('*');
    429e:	8a e2       	ldi	r24, 0x2A	; 42
    42a0:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_I2C_vSendChar>
		Pass += PassKey*i;
    42a4:	89 89       	ldd	r24, Y+17	; 0x11
    42a6:	28 2f       	mov	r18, r24
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    42ac:	98 89       	ldd	r25, Y+16	; 0x10
    42ae:	a9 01       	movw	r20, r18
    42b0:	48 9f       	mul	r20, r24
    42b2:	90 01       	movw	r18, r0
    42b4:	49 9f       	mul	r20, r25
    42b6:	30 0d       	add	r19, r0
    42b8:	58 9f       	mul	r21, r24
    42ba:	30 0d       	add	r19, r0
    42bc:	11 24       	eor	r1, r1
    42be:	8b 89       	ldd	r24, Y+19	; 0x13
    42c0:	9c 89       	ldd	r25, Y+20	; 0x14
    42c2:	82 0f       	add	r24, r18
    42c4:	93 1f       	adc	r25, r19
    42c6:	9c 8b       	std	Y+20, r25	; 0x14
    42c8:	8b 8b       	std	Y+19, r24	; 0x13
		i=i/10;
    42ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    42cc:	98 89       	ldd	r25, Y+16	; 0x10
    42ce:	2a e0       	ldi	r18, 0x0A	; 10
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	b9 01       	movw	r22, r18
    42d4:	0e 94 ae 2a 	call	0x555c	; 0x555c <__udivmodhi4>
    42d8:	cb 01       	movw	r24, r22
    42da:	98 8b       	std	Y+16, r25	; 0x10
    42dc:	8f 87       	std	Y+15, r24	; 0x0f
		if (Pass == 1234)//1235 : 5 not 4 because of + in keypad (connection purpose)
    42de:	8b 89       	ldd	r24, Y+19	; 0x13
    42e0:	9c 89       	ldd	r25, Y+20	; 0x14
    42e2:	54 e0       	ldi	r21, 0x04	; 4
    42e4:	82 3d       	cpi	r24, 0xD2	; 210
    42e6:	95 07       	cpc	r25, r21
    42e8:	11 f4       	brne	.+4      	; 0x42ee <APP_voidEnterLandingState+0x9c>
		{
			APP_voidEnterRunningState();
    42ea:	0e 94 37 22 	call	0x446e	; 0x446e <APP_voidEnterRunningState>
		}
		if (i == 0)
    42ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    42f0:	98 89       	ldd	r25, Y+16	; 0x10
    42f2:	00 97       	sbiw	r24, 0x00	; 0
    42f4:	89 f6       	brne	.-94     	; 0x4298 <APP_voidEnterLandingState+0x46>
		{
			i=1000;
    42f6:	88 ee       	ldi	r24, 0xE8	; 232
    42f8:	93 e0       	ldi	r25, 0x03	; 3
    42fa:	98 8b       	std	Y+16, r25	; 0x10
    42fc:	8f 87       	std	Y+15, r24	; 0x0f
			break;
		}

	}
	if(Pass == 1234)
    42fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4300:	9c 89       	ldd	r25, Y+20	; 0x14
    4302:	24 e0       	ldi	r18, 0x04	; 4
    4304:	82 3d       	cpi	r24, 0xD2	; 210
    4306:	92 07       	cpc	r25, r18
    4308:	09 f4       	brne	.+2      	; 0x430c <APP_voidEnterLandingState+0xba>
    430a:	8c c0       	rjmp	.+280    	; 0x4424 <APP_voidEnterLandingState+0x1d2>
	{
		break;
	}
	LCD_I2C_vSetCursorPosition(1,1);
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	61 e0       	ldi	r22, 0x01	; 1
    4310:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
	LCD_I2C_vSendString("Try again !");
    4314:	89 e8       	ldi	r24, 0x89	; 137
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	aa ef       	ldi	r26, 0xFA	; 250
    4322:	b3 e4       	ldi	r27, 0x43	; 67
    4324:	8b 87       	std	Y+11, r24	; 0x0b
    4326:	9c 87       	std	Y+12, r25	; 0x0c
    4328:	ad 87       	std	Y+13, r26	; 0x0d
    432a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    432c:	6b 85       	ldd	r22, Y+11	; 0x0b
    432e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4330:	8d 85       	ldd	r24, Y+13	; 0x0d
    4332:	9e 85       	ldd	r25, Y+14	; 0x0e
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	4a ef       	ldi	r20, 0xFA	; 250
    433a:	54 e4       	ldi	r21, 0x44	; 68
    433c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	8f 83       	std	Y+7, r24	; 0x07
    4346:	98 87       	std	Y+8, r25	; 0x08
    4348:	a9 87       	std	Y+9, r26	; 0x09
    434a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    434c:	6f 81       	ldd	r22, Y+7	; 0x07
    434e:	78 85       	ldd	r23, Y+8	; 0x08
    4350:	89 85       	ldd	r24, Y+9	; 0x09
    4352:	9a 85       	ldd	r25, Y+10	; 0x0a
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e8       	ldi	r20, 0x80	; 128
    435a:	5f e3       	ldi	r21, 0x3F	; 63
    435c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4360:	88 23       	and	r24, r24
    4362:	2c f4       	brge	.+10     	; 0x436e <APP_voidEnterLandingState+0x11c>
		__ticks = 1;
    4364:	81 e0       	ldi	r24, 0x01	; 1
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	9e 83       	std	Y+6, r25	; 0x06
    436a:	8d 83       	std	Y+5, r24	; 0x05
    436c:	3f c0       	rjmp	.+126    	; 0x43ec <APP_voidEnterLandingState+0x19a>
	else if (__tmp > 65535)
    436e:	6f 81       	ldd	r22, Y+7	; 0x07
    4370:	78 85       	ldd	r23, Y+8	; 0x08
    4372:	89 85       	ldd	r24, Y+9	; 0x09
    4374:	9a 85       	ldd	r25, Y+10	; 0x0a
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	3f ef       	ldi	r19, 0xFF	; 255
    437a:	4f e7       	ldi	r20, 0x7F	; 127
    437c:	57 e4       	ldi	r21, 0x47	; 71
    437e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4382:	18 16       	cp	r1, r24
    4384:	4c f5       	brge	.+82     	; 0x43d8 <APP_voidEnterLandingState+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4386:	6b 85       	ldd	r22, Y+11	; 0x0b
    4388:	7c 85       	ldd	r23, Y+12	; 0x0c
    438a:	8d 85       	ldd	r24, Y+13	; 0x0d
    438c:	9e 85       	ldd	r25, Y+14	; 0x0e
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	40 e2       	ldi	r20, 0x20	; 32
    4394:	51 e4       	ldi	r21, 0x41	; 65
    4396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	bc 01       	movw	r22, r24
    43a0:	cd 01       	movw	r24, r26
    43a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	9e 83       	std	Y+6, r25	; 0x06
    43ac:	8d 83       	std	Y+5, r24	; 0x05
    43ae:	0f c0       	rjmp	.+30     	; 0x43ce <APP_voidEnterLandingState+0x17c>
    43b0:	88 ec       	ldi	r24, 0xC8	; 200
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	9c 83       	std	Y+4, r25	; 0x04
    43b6:	8b 83       	std	Y+3, r24	; 0x03
    43b8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ba:	9c 81       	ldd	r25, Y+4	; 0x04
    43bc:	01 97       	sbiw	r24, 0x01	; 1
    43be:	f1 f7       	brne	.-4      	; 0x43bc <APP_voidEnterLandingState+0x16a>
    43c0:	9c 83       	std	Y+4, r25	; 0x04
    43c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c4:	8d 81       	ldd	r24, Y+5	; 0x05
    43c6:	9e 81       	ldd	r25, Y+6	; 0x06
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	9e 83       	std	Y+6, r25	; 0x06
    43cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ce:	8d 81       	ldd	r24, Y+5	; 0x05
    43d0:	9e 81       	ldd	r25, Y+6	; 0x06
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	69 f7       	brne	.-38     	; 0x43b0 <APP_voidEnterLandingState+0x15e>
    43d6:	14 c0       	rjmp	.+40     	; 0x4400 <APP_voidEnterLandingState+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43d8:	6f 81       	ldd	r22, Y+7	; 0x07
    43da:	78 85       	ldd	r23, Y+8	; 0x08
    43dc:	89 85       	ldd	r24, Y+9	; 0x09
    43de:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	9e 83       	std	Y+6, r25	; 0x06
    43ea:	8d 83       	std	Y+5, r24	; 0x05
    43ec:	8d 81       	ldd	r24, Y+5	; 0x05
    43ee:	9e 81       	ldd	r25, Y+6	; 0x06
    43f0:	9a 83       	std	Y+2, r25	; 0x02
    43f2:	89 83       	std	Y+1, r24	; 0x01
    43f4:	89 81       	ldd	r24, Y+1	; 0x01
    43f6:	9a 81       	ldd	r25, Y+2	; 0x02
    43f8:	01 97       	sbiw	r24, 0x01	; 1
    43fa:	f1 f7       	brne	.-4      	; 0x43f8 <APP_voidEnterLandingState+0x1a6>
    43fc:	9a 83       	std	Y+2, r25	; 0x02
    43fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_I2C_vSetCursorPosition(1,1);
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	61 e0       	ldi	r22, 0x01	; 1
    4404:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
	LCD_I2C_vSendString("            ");
    4408:	85 e9       	ldi	r24, 0x95	; 149
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>

	}while(PassTryFlag < 3 && Pass != 1234);
    4410:	8a 89       	ldd	r24, Y+18	; 0x12
    4412:	83 30       	cpi	r24, 0x03	; 3
    4414:	38 f4       	brcc	.+14     	; 0x4424 <APP_voidEnterLandingState+0x1d2>
    4416:	8b 89       	ldd	r24, Y+19	; 0x13
    4418:	9c 89       	ldd	r25, Y+20	; 0x14
    441a:	44 e0       	ldi	r20, 0x04	; 4
    441c:	82 3d       	cpi	r24, 0xD2	; 210
    441e:	94 07       	cpc	r25, r20
    4420:	09 f0       	breq	.+2      	; 0x4424 <APP_voidEnterLandingState+0x1d2>
    4422:	31 cf       	rjmp	.-414    	; 0x4286 <APP_voidEnterLandingState+0x34>
	//After 3 fail attempts it will go out from the while and Enter the Blocked Mode
	if((PassTryFlag == 1 || PassTryFlag == 2 || PassTryFlag == 3)&& Pass != 1234)
    4424:	8a 89       	ldd	r24, Y+18	; 0x12
    4426:	81 30       	cpi	r24, 0x01	; 1
    4428:	31 f0       	breq	.+12     	; 0x4436 <APP_voidEnterLandingState+0x1e4>
    442a:	8a 89       	ldd	r24, Y+18	; 0x12
    442c:	82 30       	cpi	r24, 0x02	; 2
    442e:	19 f0       	breq	.+6      	; 0x4436 <APP_voidEnterLandingState+0x1e4>
    4430:	8a 89       	ldd	r24, Y+18	; 0x12
    4432:	83 30       	cpi	r24, 0x03	; 3
    4434:	41 f4       	brne	.+16     	; 0x4446 <APP_voidEnterLandingState+0x1f4>
    4436:	8b 89       	ldd	r24, Y+19	; 0x13
    4438:	9c 89       	ldd	r25, Y+20	; 0x14
    443a:	54 e0       	ldi	r21, 0x04	; 4
    443c:	82 3d       	cpi	r24, 0xD2	; 210
    443e:	95 07       	cpc	r25, r21
    4440:	11 f0       	breq	.+4      	; 0x4446 <APP_voidEnterLandingState+0x1f4>
	{
		APP_voidEnterBlockedState();
    4442:	0e 94 66 29 	call	0x52cc	; 0x52cc <APP_voidEnterBlockedState>
	}

}
    4446:	64 96       	adiw	r28, 0x14	; 20
    4448:	0f b6       	in	r0, 0x3f	; 63
    444a:	f8 94       	cli
    444c:	de bf       	out	0x3e, r29	; 62
    444e:	0f be       	out	0x3f, r0	; 63
    4450:	cd bf       	out	0x3d, r28	; 61
    4452:	cf 91       	pop	r28
    4454:	df 91       	pop	r29
    4456:	08 95       	ret

00004458 <GS_APP_vEnterOpeningMode>:

static void GS_APP_vEnterOpeningMode(void)
{
    4458:	df 93       	push	r29
    445a:	cf 93       	push	r28
    445c:	cd b7       	in	r28, 0x3d	; 61
    445e:	de b7       	in	r29, 0x3e	; 62
	APP_voidUserWelcomeScreen();
    4460:	0e 94 95 20 	call	0x412a	; 0x412a <APP_voidUserWelcomeScreen>
	APP_voidOpenTheDoor();
    4464:	0e 94 cf 28 	call	0x519e	; 0x519e <APP_voidOpenTheDoor>
}
    4468:	cf 91       	pop	r28
    446a:	df 91       	pop	r29
    446c:	08 95       	ret

0000446e <APP_voidEnterRunningState>:

void APP_voidEnterRunningState(void)
{
    446e:	df 93       	push	r29
    4470:	cf 93       	push	r28
    4472:	cd b7       	in	r28, 0x3d	; 61
    4474:	de b7       	in	r29, 0x3e	; 62
    4476:	ae 97       	sbiw	r28, 0x2e	; 46
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	f8 94       	cli
    447c:	de bf       	out	0x3e, r29	; 62
    447e:	0f be       	out	0x3f, r0	; 63
    4480:	cd bf       	out	0x3d, r28	; 61
	// Opening Mode
	GS_APP_vEnterOpeningMode();
    4482:	0e 94 2c 22 	call	0x4458	; 0x4458 <GS_APP_vEnterOpeningMode>
	while(1)
	{
		// Conversion of the ADC :
		u16 Local_u16DigitalValue = ADC_u16ReadDigitalValue_Sync(ADC_Channel_2);
    4486:	82 e0       	ldi	r24, 0x02	; 2
    4488:	0e 94 ad 10 	call	0x215a	; 0x215a <ADC_u16ReadDigitalValue_Sync>
    448c:	9e a7       	std	Y+46, r25	; 0x2e
    448e:	8d a7       	std	Y+45, r24	; 0x2d
		u16 Local_u16Temp = ((Local_u16DigitalValue*500UL)/(1024));
    4490:	8d a5       	ldd	r24, Y+45	; 0x2d
    4492:	9e a5       	ldd	r25, Y+46	; 0x2e
    4494:	cc 01       	movw	r24, r24
    4496:	a0 e0       	ldi	r26, 0x00	; 0
    4498:	b0 e0       	ldi	r27, 0x00	; 0
    449a:	24 ef       	ldi	r18, 0xF4	; 244
    449c:	31 e0       	ldi	r19, 0x01	; 1
    449e:	40 e0       	ldi	r20, 0x00	; 0
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	bc 01       	movw	r22, r24
    44a4:	cd 01       	movw	r24, r26
    44a6:	0e 94 8f 2a 	call	0x551e	; 0x551e <__mulsi3>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	07 2e       	mov	r0, r23
    44b0:	7a e0       	ldi	r23, 0x0A	; 10
    44b2:	b6 95       	lsr	r27
    44b4:	a7 95       	ror	r26
    44b6:	97 95       	ror	r25
    44b8:	87 95       	ror	r24
    44ba:	7a 95       	dec	r23
    44bc:	d1 f7       	brne	.-12     	; 0x44b2 <APP_voidEnterRunningState+0x44>
    44be:	70 2d       	mov	r23, r0
    44c0:	9c a7       	std	Y+44, r25	; 0x2c
    44c2:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_I2C_vClear();
    44c4:	0e 94 31 16 	call	0x2c62	; 0x2c62 <LCD_I2C_vClear>
		LCD_I2C_vSendString("Temp=   ");
    44c8:	82 ea       	ldi	r24, 0xA2	; 162
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
		LCD_I2C_vSendNumber(Local_u16Temp);
    44d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    44d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    44d4:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCD_I2C_vSendNumber>
		LCD_I2C_vSendString(" C");
    44d8:	8b ea       	ldi	r24, 0xAB	; 171
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
    44e0:	80 e0       	ldi	r24, 0x00	; 0
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	aa ef       	ldi	r26, 0xFA	; 250
    44e6:	b3 e4       	ldi	r27, 0x43	; 67
    44e8:	8f a3       	std	Y+39, r24	; 0x27
    44ea:	98 a7       	std	Y+40, r25	; 0x28
    44ec:	a9 a7       	std	Y+41, r26	; 0x29
    44ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f0:	6f a1       	ldd	r22, Y+39	; 0x27
    44f2:	78 a5       	ldd	r23, Y+40	; 0x28
    44f4:	89 a5       	ldd	r24, Y+41	; 0x29
    44f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    44f8:	20 e0       	ldi	r18, 0x00	; 0
    44fa:	30 e0       	ldi	r19, 0x00	; 0
    44fc:	4a ef       	ldi	r20, 0xFA	; 250
    44fe:	54 e4       	ldi	r21, 0x44	; 68
    4500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4504:	dc 01       	movw	r26, r24
    4506:	cb 01       	movw	r24, r22
    4508:	8b a3       	std	Y+35, r24	; 0x23
    450a:	9c a3       	std	Y+36, r25	; 0x24
    450c:	ad a3       	std	Y+37, r26	; 0x25
    450e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4510:	6b a1       	ldd	r22, Y+35	; 0x23
    4512:	7c a1       	ldd	r23, Y+36	; 0x24
    4514:	8d a1       	ldd	r24, Y+37	; 0x25
    4516:	9e a1       	ldd	r25, Y+38	; 0x26
    4518:	20 e0       	ldi	r18, 0x00	; 0
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	40 e8       	ldi	r20, 0x80	; 128
    451e:	5f e3       	ldi	r21, 0x3F	; 63
    4520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4524:	88 23       	and	r24, r24
    4526:	2c f4       	brge	.+10     	; 0x4532 <APP_voidEnterRunningState+0xc4>
		__ticks = 1;
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	9a a3       	std	Y+34, r25	; 0x22
    452e:	89 a3       	std	Y+33, r24	; 0x21
    4530:	3f c0       	rjmp	.+126    	; 0x45b0 <APP_voidEnterRunningState+0x142>
	else if (__tmp > 65535)
    4532:	6b a1       	ldd	r22, Y+35	; 0x23
    4534:	7c a1       	ldd	r23, Y+36	; 0x24
    4536:	8d a1       	ldd	r24, Y+37	; 0x25
    4538:	9e a1       	ldd	r25, Y+38	; 0x26
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	3f ef       	ldi	r19, 0xFF	; 255
    453e:	4f e7       	ldi	r20, 0x7F	; 127
    4540:	57 e4       	ldi	r21, 0x47	; 71
    4542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4546:	18 16       	cp	r1, r24
    4548:	4c f5       	brge	.+82     	; 0x459c <APP_voidEnterRunningState+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    454a:	6f a1       	ldd	r22, Y+39	; 0x27
    454c:	78 a5       	ldd	r23, Y+40	; 0x28
    454e:	89 a5       	ldd	r24, Y+41	; 0x29
    4550:	9a a5       	ldd	r25, Y+42	; 0x2a
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	40 e2       	ldi	r20, 0x20	; 32
    4558:	51 e4       	ldi	r21, 0x41	; 65
    455a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    455e:	dc 01       	movw	r26, r24
    4560:	cb 01       	movw	r24, r22
    4562:	bc 01       	movw	r22, r24
    4564:	cd 01       	movw	r24, r26
    4566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	9a a3       	std	Y+34, r25	; 0x22
    4570:	89 a3       	std	Y+33, r24	; 0x21
    4572:	0f c0       	rjmp	.+30     	; 0x4592 <APP_voidEnterRunningState+0x124>
    4574:	88 ec       	ldi	r24, 0xC8	; 200
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	98 a3       	std	Y+32, r25	; 0x20
    457a:	8f 8f       	std	Y+31, r24	; 0x1f
    457c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    457e:	98 a1       	ldd	r25, Y+32	; 0x20
    4580:	01 97       	sbiw	r24, 0x01	; 1
    4582:	f1 f7       	brne	.-4      	; 0x4580 <APP_voidEnterRunningState+0x112>
    4584:	98 a3       	std	Y+32, r25	; 0x20
    4586:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4588:	89 a1       	ldd	r24, Y+33	; 0x21
    458a:	9a a1       	ldd	r25, Y+34	; 0x22
    458c:	01 97       	sbiw	r24, 0x01	; 1
    458e:	9a a3       	std	Y+34, r25	; 0x22
    4590:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4592:	89 a1       	ldd	r24, Y+33	; 0x21
    4594:	9a a1       	ldd	r25, Y+34	; 0x22
    4596:	00 97       	sbiw	r24, 0x00	; 0
    4598:	69 f7       	brne	.-38     	; 0x4574 <APP_voidEnterRunningState+0x106>
    459a:	14 c0       	rjmp	.+40     	; 0x45c4 <APP_voidEnterRunningState+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    459c:	6b a1       	ldd	r22, Y+35	; 0x23
    459e:	7c a1       	ldd	r23, Y+36	; 0x24
    45a0:	8d a1       	ldd	r24, Y+37	; 0x25
    45a2:	9e a1       	ldd	r25, Y+38	; 0x26
    45a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a8:	dc 01       	movw	r26, r24
    45aa:	cb 01       	movw	r24, r22
    45ac:	9a a3       	std	Y+34, r25	; 0x22
    45ae:	89 a3       	std	Y+33, r24	; 0x21
    45b0:	89 a1       	ldd	r24, Y+33	; 0x21
    45b2:	9a a1       	ldd	r25, Y+34	; 0x22
    45b4:	9e 8f       	std	Y+30, r25	; 0x1e
    45b6:	8d 8f       	std	Y+29, r24	; 0x1d
    45b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45bc:	01 97       	sbiw	r24, 0x01	; 1
    45be:	f1 f7       	brne	.-4      	; 0x45bc <APP_voidEnterRunningState+0x14e>
    45c0:	9e 8f       	std	Y+30, r25	; 0x1e
    45c2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);

		// if INT0 is entered
		EXTI_vSetCallBack(EXTI_INT0, APP_voidEnterTerminationState);
    45c4:	2f ea       	ldi	r18, 0xAF	; 175
    45c6:	38 e2       	ldi	r19, 0x28	; 40
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	b9 01       	movw	r22, r18
    45cc:	0e 94 43 10 	call	0x2086	; 0x2086 <EXTI_vSetCallBack>
		// if is ACC_OFF button pressed
		if(GPIO_u8GetPinValue(APP_AC_ON_OFF_BUTTON_PORT, APP_AC_ON_OFF_BUTTON_PIN) != 0)
    45d0:	84 e0       	ldi	r24, 0x04	; 4
    45d2:	63 e0       	ldi	r22, 0x03	; 3
    45d4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <GPIO_u8GetPinValue>
    45d8:	88 23       	and	r24, r24
    45da:	09 f4       	brne	.+2      	; 0x45de <APP_voidEnterRunningState+0x170>
    45dc:	90 c0       	rjmp	.+288    	; 0x46fe <APP_voidEnterRunningState+0x290>
		{
			if(Local_u16Temp >= APP_MAX_BEARABLE_TEMP)
    45de:	8b a5       	ldd	r24, Y+43	; 0x2b
    45e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    45e2:	83 32       	cpi	r24, 0x23	; 35
    45e4:	91 05       	cpc	r25, r1
    45e6:	58 f0       	brcs	.+22     	; 0x45fe <APP_voidEnterRunningState+0x190>
			{
				LCD_I2C_vSetCursorPosition(1, 0);
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	60 e0       	ldi	r22, 0x00	; 0
    45ec:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
				LCD_I2C_vSendString("AC is working..");
    45f0:	8e ea       	ldi	r24, 0xAE	; 174
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
				G_APP_vStartACMotion();
    45f8:	0e 94 13 24 	call	0x4826	; 0x4826 <G_APP_vStartACMotion>
    45fc:	44 cf       	rjmp	.-376    	; 0x4486 <APP_voidEnterRunningState+0x18>
			}
			else
			{
				// The weather is beautiful, No need for AC
				LCD_I2C_vSetCursorPosition(1, 0);
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	60 e0       	ldi	r22, 0x00	; 0
    4602:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
				LCD_I2C_vSendString("Fine Weather");
    4606:	8e eb       	ldi	r24, 0xBE	; 190
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
    460e:	80 e0       	ldi	r24, 0x00	; 0
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	aa e7       	ldi	r26, 0x7A	; 122
    4614:	b4 e4       	ldi	r27, 0x44	; 68
    4616:	89 8f       	std	Y+25, r24	; 0x19
    4618:	9a 8f       	std	Y+26, r25	; 0x1a
    461a:	ab 8f       	std	Y+27, r26	; 0x1b
    461c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    461e:	69 8d       	ldd	r22, Y+25	; 0x19
    4620:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4622:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4624:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	4a ef       	ldi	r20, 0xFA	; 250
    462c:	54 e4       	ldi	r21, 0x44	; 68
    462e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	8d 8b       	std	Y+21, r24	; 0x15
    4638:	9e 8b       	std	Y+22, r25	; 0x16
    463a:	af 8b       	std	Y+23, r26	; 0x17
    463c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    463e:	6d 89       	ldd	r22, Y+21	; 0x15
    4640:	7e 89       	ldd	r23, Y+22	; 0x16
    4642:	8f 89       	ldd	r24, Y+23	; 0x17
    4644:	98 8d       	ldd	r25, Y+24	; 0x18
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	40 e8       	ldi	r20, 0x80	; 128
    464c:	5f e3       	ldi	r21, 0x3F	; 63
    464e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4652:	88 23       	and	r24, r24
    4654:	2c f4       	brge	.+10     	; 0x4660 <APP_voidEnterRunningState+0x1f2>
		__ticks = 1;
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	9c 8b       	std	Y+20, r25	; 0x14
    465c:	8b 8b       	std	Y+19, r24	; 0x13
    465e:	3f c0       	rjmp	.+126    	; 0x46de <APP_voidEnterRunningState+0x270>
	else if (__tmp > 65535)
    4660:	6d 89       	ldd	r22, Y+21	; 0x15
    4662:	7e 89       	ldd	r23, Y+22	; 0x16
    4664:	8f 89       	ldd	r24, Y+23	; 0x17
    4666:	98 8d       	ldd	r25, Y+24	; 0x18
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	3f ef       	ldi	r19, 0xFF	; 255
    466c:	4f e7       	ldi	r20, 0x7F	; 127
    466e:	57 e4       	ldi	r21, 0x47	; 71
    4670:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4674:	18 16       	cp	r1, r24
    4676:	4c f5       	brge	.+82     	; 0x46ca <APP_voidEnterRunningState+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4678:	69 8d       	ldd	r22, Y+25	; 0x19
    467a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    467c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    467e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	40 e2       	ldi	r20, 0x20	; 32
    4686:	51 e4       	ldi	r21, 0x41	; 65
    4688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	bc 01       	movw	r22, r24
    4692:	cd 01       	movw	r24, r26
    4694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	9c 8b       	std	Y+20, r25	; 0x14
    469e:	8b 8b       	std	Y+19, r24	; 0x13
    46a0:	0f c0       	rjmp	.+30     	; 0x46c0 <APP_voidEnterRunningState+0x252>
    46a2:	88 ec       	ldi	r24, 0xC8	; 200
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	9a 8b       	std	Y+18, r25	; 0x12
    46a8:	89 8b       	std	Y+17, r24	; 0x11
    46aa:	89 89       	ldd	r24, Y+17	; 0x11
    46ac:	9a 89       	ldd	r25, Y+18	; 0x12
    46ae:	01 97       	sbiw	r24, 0x01	; 1
    46b0:	f1 f7       	brne	.-4      	; 0x46ae <APP_voidEnterRunningState+0x240>
    46b2:	9a 8b       	std	Y+18, r25	; 0x12
    46b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b6:	8b 89       	ldd	r24, Y+19	; 0x13
    46b8:	9c 89       	ldd	r25, Y+20	; 0x14
    46ba:	01 97       	sbiw	r24, 0x01	; 1
    46bc:	9c 8b       	std	Y+20, r25	; 0x14
    46be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c0:	8b 89       	ldd	r24, Y+19	; 0x13
    46c2:	9c 89       	ldd	r25, Y+20	; 0x14
    46c4:	00 97       	sbiw	r24, 0x00	; 0
    46c6:	69 f7       	brne	.-38     	; 0x46a2 <APP_voidEnterRunningState+0x234>
    46c8:	14 c0       	rjmp	.+40     	; 0x46f2 <APP_voidEnterRunningState+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ca:	6d 89       	ldd	r22, Y+21	; 0x15
    46cc:	7e 89       	ldd	r23, Y+22	; 0x16
    46ce:	8f 89       	ldd	r24, Y+23	; 0x17
    46d0:	98 8d       	ldd	r25, Y+24	; 0x18
    46d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	9c 8b       	std	Y+20, r25	; 0x14
    46dc:	8b 8b       	std	Y+19, r24	; 0x13
    46de:	8b 89       	ldd	r24, Y+19	; 0x13
    46e0:	9c 89       	ldd	r25, Y+20	; 0x14
    46e2:	98 8b       	std	Y+16, r25	; 0x10
    46e4:	8f 87       	std	Y+15, r24	; 0x0f
    46e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    46e8:	98 89       	ldd	r25, Y+16	; 0x10
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	f1 f7       	brne	.-4      	; 0x46ea <APP_voidEnterRunningState+0x27c>
    46ee:	98 8b       	std	Y+16, r25	; 0x10
    46f0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				SERVOM_vStart(0);
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	0e 94 b5 11 	call	0x236a	; 0x236a <SERVOM_vStart>
				SERVOM_vStop();
    46f8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SERVOM_vStop>
    46fc:	c4 ce       	rjmp	.-632    	; 0x4486 <APP_voidEnterRunningState+0x18>
			}
		}
		else
		{
			LCD_I2C_vSetCursorPosition(1, 0);
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	60 e0       	ldi	r22, 0x00	; 0
    4702:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
			LCD_I2C_vSendString("AC is disabled");
    4706:	8b ec       	ldi	r24, 0xCB	; 203
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	aa e7       	ldi	r26, 0x7A	; 122
    4714:	b4 e4       	ldi	r27, 0x44	; 68
    4716:	8b 87       	std	Y+11, r24	; 0x0b
    4718:	9c 87       	std	Y+12, r25	; 0x0c
    471a:	ad 87       	std	Y+13, r26	; 0x0d
    471c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    471e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4720:	7c 85       	ldd	r23, Y+12	; 0x0c
    4722:	8d 85       	ldd	r24, Y+13	; 0x0d
    4724:	9e 85       	ldd	r25, Y+14	; 0x0e
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	4a ef       	ldi	r20, 0xFA	; 250
    472c:	54 e4       	ldi	r21, 0x44	; 68
    472e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	8f 83       	std	Y+7, r24	; 0x07
    4738:	98 87       	std	Y+8, r25	; 0x08
    473a:	a9 87       	std	Y+9, r26	; 0x09
    473c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    473e:	6f 81       	ldd	r22, Y+7	; 0x07
    4740:	78 85       	ldd	r23, Y+8	; 0x08
    4742:	89 85       	ldd	r24, Y+9	; 0x09
    4744:	9a 85       	ldd	r25, Y+10	; 0x0a
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	40 e8       	ldi	r20, 0x80	; 128
    474c:	5f e3       	ldi	r21, 0x3F	; 63
    474e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4752:	88 23       	and	r24, r24
    4754:	2c f4       	brge	.+10     	; 0x4760 <APP_voidEnterRunningState+0x2f2>
		__ticks = 1;
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	9e 83       	std	Y+6, r25	; 0x06
    475c:	8d 83       	std	Y+5, r24	; 0x05
    475e:	3f c0       	rjmp	.+126    	; 0x47de <APP_voidEnterRunningState+0x370>
	else if (__tmp > 65535)
    4760:	6f 81       	ldd	r22, Y+7	; 0x07
    4762:	78 85       	ldd	r23, Y+8	; 0x08
    4764:	89 85       	ldd	r24, Y+9	; 0x09
    4766:	9a 85       	ldd	r25, Y+10	; 0x0a
    4768:	20 e0       	ldi	r18, 0x00	; 0
    476a:	3f ef       	ldi	r19, 0xFF	; 255
    476c:	4f e7       	ldi	r20, 0x7F	; 127
    476e:	57 e4       	ldi	r21, 0x47	; 71
    4770:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4774:	18 16       	cp	r1, r24
    4776:	4c f5       	brge	.+82     	; 0x47ca <APP_voidEnterRunningState+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4778:	6b 85       	ldd	r22, Y+11	; 0x0b
    477a:	7c 85       	ldd	r23, Y+12	; 0x0c
    477c:	8d 85       	ldd	r24, Y+13	; 0x0d
    477e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	40 e2       	ldi	r20, 0x20	; 32
    4786:	51 e4       	ldi	r21, 0x41	; 65
    4788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	bc 01       	movw	r22, r24
    4792:	cd 01       	movw	r24, r26
    4794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	9e 83       	std	Y+6, r25	; 0x06
    479e:	8d 83       	std	Y+5, r24	; 0x05
    47a0:	0f c0       	rjmp	.+30     	; 0x47c0 <APP_voidEnterRunningState+0x352>
    47a2:	88 ec       	ldi	r24, 0xC8	; 200
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	9c 83       	std	Y+4, r25	; 0x04
    47a8:	8b 83       	std	Y+3, r24	; 0x03
    47aa:	8b 81       	ldd	r24, Y+3	; 0x03
    47ac:	9c 81       	ldd	r25, Y+4	; 0x04
    47ae:	01 97       	sbiw	r24, 0x01	; 1
    47b0:	f1 f7       	brne	.-4      	; 0x47ae <APP_voidEnterRunningState+0x340>
    47b2:	9c 83       	std	Y+4, r25	; 0x04
    47b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b6:	8d 81       	ldd	r24, Y+5	; 0x05
    47b8:	9e 81       	ldd	r25, Y+6	; 0x06
    47ba:	01 97       	sbiw	r24, 0x01	; 1
    47bc:	9e 83       	std	Y+6, r25	; 0x06
    47be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c0:	8d 81       	ldd	r24, Y+5	; 0x05
    47c2:	9e 81       	ldd	r25, Y+6	; 0x06
    47c4:	00 97       	sbiw	r24, 0x00	; 0
    47c6:	69 f7       	brne	.-38     	; 0x47a2 <APP_voidEnterRunningState+0x334>
    47c8:	14 c0       	rjmp	.+40     	; 0x47f2 <APP_voidEnterRunningState+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ca:	6f 81       	ldd	r22, Y+7	; 0x07
    47cc:	78 85       	ldd	r23, Y+8	; 0x08
    47ce:	89 85       	ldd	r24, Y+9	; 0x09
    47d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	9e 83       	std	Y+6, r25	; 0x06
    47dc:	8d 83       	std	Y+5, r24	; 0x05
    47de:	8d 81       	ldd	r24, Y+5	; 0x05
    47e0:	9e 81       	ldd	r25, Y+6	; 0x06
    47e2:	9a 83       	std	Y+2, r25	; 0x02
    47e4:	89 83       	std	Y+1, r24	; 0x01
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ea:	01 97       	sbiw	r24, 0x01	; 1
    47ec:	f1 f7       	brne	.-4      	; 0x47ea <APP_voidEnterRunningState+0x37c>
    47ee:	9a 83       	std	Y+2, r25	; 0x02
    47f0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			GS_APP_vON_OFFTheAC();
    47f2:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <GS_APP_vON_OFFTheAC>
    47f6:	47 ce       	rjmp	.-882    	; 0x4486 <APP_voidEnterRunningState+0x18>

000047f8 <GS_APP_vON_OFFTheAC>:
	}
}

// Once the ACC_OFF button is pressed
void GS_APP_vON_OFFTheAC(void)
{
    47f8:	df 93       	push	r29
    47fa:	cf 93       	push	r28
    47fc:	cd b7       	in	r28, 0x3d	; 61
    47fe:	de b7       	in	r29, 0x3e	; 62
	LCD_I2C_vSetCursorPosition(1, 0);
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	60 e0       	ldi	r22, 0x00	; 0
    4804:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
	LCD_I2C_vSendString("AC is disabled");
    4808:	8b ec       	ldi	r24, 0xCB	; 203
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
	// Stop AC
	TIMERS_vStartTimer(SERVOM_TIMER);
    4810:	81 e0       	ldi	r24, 0x01	; 1
    4812:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <TIMERS_vStartTimer>
	SERVOM_vStop();
    4816:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SERVOM_vStop>
	TIMERS_vStopTimer(SERVOM_TIMER);
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	0e 94 12 08 	call	0x1024	; 0x1024 <TIMERS_vStopTimer>
}
    4820:	cf 91       	pop	r28
    4822:	df 91       	pop	r29
    4824:	08 95       	ret

00004826 <G_APP_vStartACMotion>:


void G_APP_vStartACMotion(void)
{
    4826:	0f 93       	push	r16
    4828:	1f 93       	push	r17
    482a:	df 93       	push	r29
    482c:	cf 93       	push	r28
    482e:	cd b7       	in	r28, 0x3d	; 61
    4830:	de b7       	in	r29, 0x3e	; 62
    4832:	c0 57       	subi	r28, 0x70	; 112
    4834:	d0 40       	sbci	r29, 0x00	; 0
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	f8 94       	cli
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	cd bf       	out	0x3d, r28	; 61
	TIMERS_vStartTimer(SERVOM_TIMER);
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <TIMERS_vStartTimer>
	// A try to simulate the AC motor motion
	SERVOM_vStop();
    4846:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SERVOM_vStop>
    484a:	fe 01       	movw	r30, r28
    484c:	e3 59       	subi	r30, 0x93	; 147
    484e:	ff 4f       	sbci	r31, 0xFF	; 255
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	aa e7       	ldi	r26, 0x7A	; 122
    4856:	b4 e4       	ldi	r27, 0x44	; 68
    4858:	80 83       	st	Z, r24
    485a:	91 83       	std	Z+1, r25	; 0x01
    485c:	a2 83       	std	Z+2, r26	; 0x02
    485e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4860:	8e 01       	movw	r16, r28
    4862:	07 59       	subi	r16, 0x97	; 151
    4864:	1f 4f       	sbci	r17, 0xFF	; 255
    4866:	fe 01       	movw	r30, r28
    4868:	e3 59       	subi	r30, 0x93	; 147
    486a:	ff 4f       	sbci	r31, 0xFF	; 255
    486c:	60 81       	ld	r22, Z
    486e:	71 81       	ldd	r23, Z+1	; 0x01
    4870:	82 81       	ldd	r24, Z+2	; 0x02
    4872:	93 81       	ldd	r25, Z+3	; 0x03
    4874:	20 e0       	ldi	r18, 0x00	; 0
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	4a ef       	ldi	r20, 0xFA	; 250
    487a:	54 e4       	ldi	r21, 0x44	; 68
    487c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4880:	dc 01       	movw	r26, r24
    4882:	cb 01       	movw	r24, r22
    4884:	f8 01       	movw	r30, r16
    4886:	80 83       	st	Z, r24
    4888:	91 83       	std	Z+1, r25	; 0x01
    488a:	a2 83       	std	Z+2, r26	; 0x02
    488c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    488e:	fe 01       	movw	r30, r28
    4890:	e7 59       	subi	r30, 0x97	; 151
    4892:	ff 4f       	sbci	r31, 0xFF	; 255
    4894:	60 81       	ld	r22, Z
    4896:	71 81       	ldd	r23, Z+1	; 0x01
    4898:	82 81       	ldd	r24, Z+2	; 0x02
    489a:	93 81       	ldd	r25, Z+3	; 0x03
    489c:	20 e0       	ldi	r18, 0x00	; 0
    489e:	30 e0       	ldi	r19, 0x00	; 0
    48a0:	40 e8       	ldi	r20, 0x80	; 128
    48a2:	5f e3       	ldi	r21, 0x3F	; 63
    48a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48a8:	88 23       	and	r24, r24
    48aa:	44 f4       	brge	.+16     	; 0x48bc <G_APP_vStartACMotion+0x96>
		__ticks = 1;
    48ac:	fe 01       	movw	r30, r28
    48ae:	e9 59       	subi	r30, 0x99	; 153
    48b0:	ff 4f       	sbci	r31, 0xFF	; 255
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	91 83       	std	Z+1, r25	; 0x01
    48b8:	80 83       	st	Z, r24
    48ba:	64 c0       	rjmp	.+200    	; 0x4984 <G_APP_vStartACMotion+0x15e>
	else if (__tmp > 65535)
    48bc:	fe 01       	movw	r30, r28
    48be:	e7 59       	subi	r30, 0x97	; 151
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	60 81       	ld	r22, Z
    48c4:	71 81       	ldd	r23, Z+1	; 0x01
    48c6:	82 81       	ldd	r24, Z+2	; 0x02
    48c8:	93 81       	ldd	r25, Z+3	; 0x03
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	3f ef       	ldi	r19, 0xFF	; 255
    48ce:	4f e7       	ldi	r20, 0x7F	; 127
    48d0:	57 e4       	ldi	r21, 0x47	; 71
    48d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48d6:	18 16       	cp	r1, r24
    48d8:	0c f0       	brlt	.+2      	; 0x48dc <G_APP_vStartACMotion+0xb6>
    48da:	43 c0       	rjmp	.+134    	; 0x4962 <G_APP_vStartACMotion+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48dc:	fe 01       	movw	r30, r28
    48de:	e3 59       	subi	r30, 0x93	; 147
    48e0:	ff 4f       	sbci	r31, 0xFF	; 255
    48e2:	60 81       	ld	r22, Z
    48e4:	71 81       	ldd	r23, Z+1	; 0x01
    48e6:	82 81       	ldd	r24, Z+2	; 0x02
    48e8:	93 81       	ldd	r25, Z+3	; 0x03
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	30 e0       	ldi	r19, 0x00	; 0
    48ee:	40 e2       	ldi	r20, 0x20	; 32
    48f0:	51 e4       	ldi	r21, 0x41	; 65
    48f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f6:	dc 01       	movw	r26, r24
    48f8:	cb 01       	movw	r24, r22
    48fa:	8e 01       	movw	r16, r28
    48fc:	09 59       	subi	r16, 0x99	; 153
    48fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4900:	bc 01       	movw	r22, r24
    4902:	cd 01       	movw	r24, r26
    4904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4908:	dc 01       	movw	r26, r24
    490a:	cb 01       	movw	r24, r22
    490c:	f8 01       	movw	r30, r16
    490e:	91 83       	std	Z+1, r25	; 0x01
    4910:	80 83       	st	Z, r24
    4912:	1f c0       	rjmp	.+62     	; 0x4952 <G_APP_vStartACMotion+0x12c>
    4914:	fe 01       	movw	r30, r28
    4916:	eb 59       	subi	r30, 0x9B	; 155
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	88 ec       	ldi	r24, 0xC8	; 200
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	91 83       	std	Z+1, r25	; 0x01
    4920:	80 83       	st	Z, r24
    4922:	fe 01       	movw	r30, r28
    4924:	eb 59       	subi	r30, 0x9B	; 155
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	80 81       	ld	r24, Z
    492a:	91 81       	ldd	r25, Z+1	; 0x01
    492c:	01 97       	sbiw	r24, 0x01	; 1
    492e:	f1 f7       	brne	.-4      	; 0x492c <G_APP_vStartACMotion+0x106>
    4930:	fe 01       	movw	r30, r28
    4932:	eb 59       	subi	r30, 0x9B	; 155
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	91 83       	std	Z+1, r25	; 0x01
    4938:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    493a:	de 01       	movw	r26, r28
    493c:	a9 59       	subi	r26, 0x99	; 153
    493e:	bf 4f       	sbci	r27, 0xFF	; 255
    4940:	fe 01       	movw	r30, r28
    4942:	e9 59       	subi	r30, 0x99	; 153
    4944:	ff 4f       	sbci	r31, 0xFF	; 255
    4946:	80 81       	ld	r24, Z
    4948:	91 81       	ldd	r25, Z+1	; 0x01
    494a:	01 97       	sbiw	r24, 0x01	; 1
    494c:	11 96       	adiw	r26, 0x01	; 1
    494e:	9c 93       	st	X, r25
    4950:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4952:	fe 01       	movw	r30, r28
    4954:	e9 59       	subi	r30, 0x99	; 153
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	80 81       	ld	r24, Z
    495a:	91 81       	ldd	r25, Z+1	; 0x01
    495c:	00 97       	sbiw	r24, 0x00	; 0
    495e:	d1 f6       	brne	.-76     	; 0x4914 <G_APP_vStartACMotion+0xee>
    4960:	27 c0       	rjmp	.+78     	; 0x49b0 <G_APP_vStartACMotion+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4962:	8e 01       	movw	r16, r28
    4964:	09 59       	subi	r16, 0x99	; 153
    4966:	1f 4f       	sbci	r17, 0xFF	; 255
    4968:	fe 01       	movw	r30, r28
    496a:	e7 59       	subi	r30, 0x97	; 151
    496c:	ff 4f       	sbci	r31, 0xFF	; 255
    496e:	60 81       	ld	r22, Z
    4970:	71 81       	ldd	r23, Z+1	; 0x01
    4972:	82 81       	ldd	r24, Z+2	; 0x02
    4974:	93 81       	ldd	r25, Z+3	; 0x03
    4976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    497a:	dc 01       	movw	r26, r24
    497c:	cb 01       	movw	r24, r22
    497e:	f8 01       	movw	r30, r16
    4980:	91 83       	std	Z+1, r25	; 0x01
    4982:	80 83       	st	Z, r24
    4984:	de 01       	movw	r26, r28
    4986:	ad 59       	subi	r26, 0x9D	; 157
    4988:	bf 4f       	sbci	r27, 0xFF	; 255
    498a:	fe 01       	movw	r30, r28
    498c:	e9 59       	subi	r30, 0x99	; 153
    498e:	ff 4f       	sbci	r31, 0xFF	; 255
    4990:	80 81       	ld	r24, Z
    4992:	91 81       	ldd	r25, Z+1	; 0x01
    4994:	8d 93       	st	X+, r24
    4996:	9c 93       	st	X, r25
    4998:	fe 01       	movw	r30, r28
    499a:	ed 59       	subi	r30, 0x9D	; 157
    499c:	ff 4f       	sbci	r31, 0xFF	; 255
    499e:	80 81       	ld	r24, Z
    49a0:	91 81       	ldd	r25, Z+1	; 0x01
    49a2:	01 97       	sbiw	r24, 0x01	; 1
    49a4:	f1 f7       	brne	.-4      	; 0x49a2 <G_APP_vStartACMotion+0x17c>
    49a6:	fe 01       	movw	r30, r28
    49a8:	ed 59       	subi	r30, 0x9D	; 157
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	91 83       	std	Z+1, r25	; 0x01
    49ae:	80 83       	st	Z, r24
	_delay_ms(1000);
	SERVOM_vStart(45);
    49b0:	8d e2       	ldi	r24, 0x2D	; 45
    49b2:	0e 94 b5 11 	call	0x236a	; 0x236a <SERVOM_vStart>
    49b6:	fe 01       	movw	r30, r28
    49b8:	e1 5a       	subi	r30, 0xA1	; 161
    49ba:	ff 4f       	sbci	r31, 0xFF	; 255
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	aa e7       	ldi	r26, 0x7A	; 122
    49c2:	b4 e4       	ldi	r27, 0x44	; 68
    49c4:	80 83       	st	Z, r24
    49c6:	91 83       	std	Z+1, r25	; 0x01
    49c8:	a2 83       	std	Z+2, r26	; 0x02
    49ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49cc:	8e 01       	movw	r16, r28
    49ce:	05 5a       	subi	r16, 0xA5	; 165
    49d0:	1f 4f       	sbci	r17, 0xFF	; 255
    49d2:	fe 01       	movw	r30, r28
    49d4:	e1 5a       	subi	r30, 0xA1	; 161
    49d6:	ff 4f       	sbci	r31, 0xFF	; 255
    49d8:	60 81       	ld	r22, Z
    49da:	71 81       	ldd	r23, Z+1	; 0x01
    49dc:	82 81       	ldd	r24, Z+2	; 0x02
    49de:	93 81       	ldd	r25, Z+3	; 0x03
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	30 e0       	ldi	r19, 0x00	; 0
    49e4:	4a ef       	ldi	r20, 0xFA	; 250
    49e6:	54 e4       	ldi	r21, 0x44	; 68
    49e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	f8 01       	movw	r30, r16
    49f2:	80 83       	st	Z, r24
    49f4:	91 83       	std	Z+1, r25	; 0x01
    49f6:	a2 83       	std	Z+2, r26	; 0x02
    49f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49fa:	fe 01       	movw	r30, r28
    49fc:	e5 5a       	subi	r30, 0xA5	; 165
    49fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4a00:	60 81       	ld	r22, Z
    4a02:	71 81       	ldd	r23, Z+1	; 0x01
    4a04:	82 81       	ldd	r24, Z+2	; 0x02
    4a06:	93 81       	ldd	r25, Z+3	; 0x03
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	40 e8       	ldi	r20, 0x80	; 128
    4a0e:	5f e3       	ldi	r21, 0x3F	; 63
    4a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a14:	88 23       	and	r24, r24
    4a16:	44 f4       	brge	.+16     	; 0x4a28 <G_APP_vStartACMotion+0x202>
		__ticks = 1;
    4a18:	fe 01       	movw	r30, r28
    4a1a:	e7 5a       	subi	r30, 0xA7	; 167
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	91 83       	std	Z+1, r25	; 0x01
    4a24:	80 83       	st	Z, r24
    4a26:	64 c0       	rjmp	.+200    	; 0x4af0 <G_APP_vStartACMotion+0x2ca>
	else if (__tmp > 65535)
    4a28:	fe 01       	movw	r30, r28
    4a2a:	e5 5a       	subi	r30, 0xA5	; 165
    4a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2e:	60 81       	ld	r22, Z
    4a30:	71 81       	ldd	r23, Z+1	; 0x01
    4a32:	82 81       	ldd	r24, Z+2	; 0x02
    4a34:	93 81       	ldd	r25, Z+3	; 0x03
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	3f ef       	ldi	r19, 0xFF	; 255
    4a3a:	4f e7       	ldi	r20, 0x7F	; 127
    4a3c:	57 e4       	ldi	r21, 0x47	; 71
    4a3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a42:	18 16       	cp	r1, r24
    4a44:	0c f0       	brlt	.+2      	; 0x4a48 <G_APP_vStartACMotion+0x222>
    4a46:	43 c0       	rjmp	.+134    	; 0x4ace <G_APP_vStartACMotion+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a48:	fe 01       	movw	r30, r28
    4a4a:	e1 5a       	subi	r30, 0xA1	; 161
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	60 81       	ld	r22, Z
    4a50:	71 81       	ldd	r23, Z+1	; 0x01
    4a52:	82 81       	ldd	r24, Z+2	; 0x02
    4a54:	93 81       	ldd	r25, Z+3	; 0x03
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	30 e0       	ldi	r19, 0x00	; 0
    4a5a:	40 e2       	ldi	r20, 0x20	; 32
    4a5c:	51 e4       	ldi	r21, 0x41	; 65
    4a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	8e 01       	movw	r16, r28
    4a68:	07 5a       	subi	r16, 0xA7	; 167
    4a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6c:	bc 01       	movw	r22, r24
    4a6e:	cd 01       	movw	r24, r26
    4a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a74:	dc 01       	movw	r26, r24
    4a76:	cb 01       	movw	r24, r22
    4a78:	f8 01       	movw	r30, r16
    4a7a:	91 83       	std	Z+1, r25	; 0x01
    4a7c:	80 83       	st	Z, r24
    4a7e:	1f c0       	rjmp	.+62     	; 0x4abe <G_APP_vStartACMotion+0x298>
    4a80:	fe 01       	movw	r30, r28
    4a82:	e9 5a       	subi	r30, 0xA9	; 169
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	88 ec       	ldi	r24, 0xC8	; 200
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	91 83       	std	Z+1, r25	; 0x01
    4a8c:	80 83       	st	Z, r24
    4a8e:	fe 01       	movw	r30, r28
    4a90:	e9 5a       	subi	r30, 0xA9	; 169
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	80 81       	ld	r24, Z
    4a96:	91 81       	ldd	r25, Z+1	; 0x01
    4a98:	01 97       	sbiw	r24, 0x01	; 1
    4a9a:	f1 f7       	brne	.-4      	; 0x4a98 <G_APP_vStartACMotion+0x272>
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	e9 5a       	subi	r30, 0xA9	; 169
    4aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa2:	91 83       	std	Z+1, r25	; 0x01
    4aa4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aa6:	de 01       	movw	r26, r28
    4aa8:	a7 5a       	subi	r26, 0xA7	; 167
    4aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    4aac:	fe 01       	movw	r30, r28
    4aae:	e7 5a       	subi	r30, 0xA7	; 167
    4ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab2:	80 81       	ld	r24, Z
    4ab4:	91 81       	ldd	r25, Z+1	; 0x01
    4ab6:	01 97       	sbiw	r24, 0x01	; 1
    4ab8:	11 96       	adiw	r26, 0x01	; 1
    4aba:	9c 93       	st	X, r25
    4abc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4abe:	fe 01       	movw	r30, r28
    4ac0:	e7 5a       	subi	r30, 0xA7	; 167
    4ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac4:	80 81       	ld	r24, Z
    4ac6:	91 81       	ldd	r25, Z+1	; 0x01
    4ac8:	00 97       	sbiw	r24, 0x00	; 0
    4aca:	d1 f6       	brne	.-76     	; 0x4a80 <G_APP_vStartACMotion+0x25a>
    4acc:	27 c0       	rjmp	.+78     	; 0x4b1c <G_APP_vStartACMotion+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ace:	8e 01       	movw	r16, r28
    4ad0:	07 5a       	subi	r16, 0xA7	; 167
    4ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	e5 5a       	subi	r30, 0xA5	; 165
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	60 81       	ld	r22, Z
    4adc:	71 81       	ldd	r23, Z+1	; 0x01
    4ade:	82 81       	ldd	r24, Z+2	; 0x02
    4ae0:	93 81       	ldd	r25, Z+3	; 0x03
    4ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	f8 01       	movw	r30, r16
    4aec:	91 83       	std	Z+1, r25	; 0x01
    4aee:	80 83       	st	Z, r24
    4af0:	de 01       	movw	r26, r28
    4af2:	ab 5a       	subi	r26, 0xAB	; 171
    4af4:	bf 4f       	sbci	r27, 0xFF	; 255
    4af6:	fe 01       	movw	r30, r28
    4af8:	e7 5a       	subi	r30, 0xA7	; 167
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	80 81       	ld	r24, Z
    4afe:	91 81       	ldd	r25, Z+1	; 0x01
    4b00:	8d 93       	st	X+, r24
    4b02:	9c 93       	st	X, r25
    4b04:	fe 01       	movw	r30, r28
    4b06:	eb 5a       	subi	r30, 0xAB	; 171
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	80 81       	ld	r24, Z
    4b0c:	91 81       	ldd	r25, Z+1	; 0x01
    4b0e:	01 97       	sbiw	r24, 0x01	; 1
    4b10:	f1 f7       	brne	.-4      	; 0x4b0e <G_APP_vStartACMotion+0x2e8>
    4b12:	fe 01       	movw	r30, r28
    4b14:	eb 5a       	subi	r30, 0xAB	; 171
    4b16:	ff 4f       	sbci	r31, 0xFF	; 255
    4b18:	91 83       	std	Z+1, r25	; 0x01
    4b1a:	80 83       	st	Z, r24
	_delay_ms(1000);
	SERVOM_vStart(90);
    4b1c:	8a e5       	ldi	r24, 0x5A	; 90
    4b1e:	0e 94 b5 11 	call	0x236a	; 0x236a <SERVOM_vStart>
    4b22:	fe 01       	movw	r30, r28
    4b24:	ef 5a       	subi	r30, 0xAF	; 175
    4b26:	ff 4f       	sbci	r31, 0xFF	; 255
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	aa e7       	ldi	r26, 0x7A	; 122
    4b2e:	b4 e4       	ldi	r27, 0x44	; 68
    4b30:	80 83       	st	Z, r24
    4b32:	91 83       	std	Z+1, r25	; 0x01
    4b34:	a2 83       	std	Z+2, r26	; 0x02
    4b36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b38:	8e 01       	movw	r16, r28
    4b3a:	03 5b       	subi	r16, 0xB3	; 179
    4b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b3e:	fe 01       	movw	r30, r28
    4b40:	ef 5a       	subi	r30, 0xAF	; 175
    4b42:	ff 4f       	sbci	r31, 0xFF	; 255
    4b44:	60 81       	ld	r22, Z
    4b46:	71 81       	ldd	r23, Z+1	; 0x01
    4b48:	82 81       	ldd	r24, Z+2	; 0x02
    4b4a:	93 81       	ldd	r25, Z+3	; 0x03
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	4a ef       	ldi	r20, 0xFA	; 250
    4b52:	54 e4       	ldi	r21, 0x44	; 68
    4b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	f8 01       	movw	r30, r16
    4b5e:	80 83       	st	Z, r24
    4b60:	91 83       	std	Z+1, r25	; 0x01
    4b62:	a2 83       	std	Z+2, r26	; 0x02
    4b64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b66:	fe 01       	movw	r30, r28
    4b68:	e3 5b       	subi	r30, 0xB3	; 179
    4b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6c:	60 81       	ld	r22, Z
    4b6e:	71 81       	ldd	r23, Z+1	; 0x01
    4b70:	82 81       	ldd	r24, Z+2	; 0x02
    4b72:	93 81       	ldd	r25, Z+3	; 0x03
    4b74:	20 e0       	ldi	r18, 0x00	; 0
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	40 e8       	ldi	r20, 0x80	; 128
    4b7a:	5f e3       	ldi	r21, 0x3F	; 63
    4b7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b80:	88 23       	and	r24, r24
    4b82:	44 f4       	brge	.+16     	; 0x4b94 <G_APP_vStartACMotion+0x36e>
		__ticks = 1;
    4b84:	fe 01       	movw	r30, r28
    4b86:	e5 5b       	subi	r30, 0xB5	; 181
    4b88:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	91 83       	std	Z+1, r25	; 0x01
    4b90:	80 83       	st	Z, r24
    4b92:	64 c0       	rjmp	.+200    	; 0x4c5c <G_APP_vStartACMotion+0x436>
	else if (__tmp > 65535)
    4b94:	fe 01       	movw	r30, r28
    4b96:	e3 5b       	subi	r30, 0xB3	; 179
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	60 81       	ld	r22, Z
    4b9c:	71 81       	ldd	r23, Z+1	; 0x01
    4b9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ba0:	93 81       	ldd	r25, Z+3	; 0x03
    4ba2:	20 e0       	ldi	r18, 0x00	; 0
    4ba4:	3f ef       	ldi	r19, 0xFF	; 255
    4ba6:	4f e7       	ldi	r20, 0x7F	; 127
    4ba8:	57 e4       	ldi	r21, 0x47	; 71
    4baa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bae:	18 16       	cp	r1, r24
    4bb0:	0c f0       	brlt	.+2      	; 0x4bb4 <G_APP_vStartACMotion+0x38e>
    4bb2:	43 c0       	rjmp	.+134    	; 0x4c3a <G_APP_vStartACMotion+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	ef 5a       	subi	r30, 0xAF	; 175
    4bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bba:	60 81       	ld	r22, Z
    4bbc:	71 81       	ldd	r23, Z+1	; 0x01
    4bbe:	82 81       	ldd	r24, Z+2	; 0x02
    4bc0:	93 81       	ldd	r25, Z+3	; 0x03
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	40 e2       	ldi	r20, 0x20	; 32
    4bc8:	51 e4       	ldi	r21, 0x41	; 65
    4bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	8e 01       	movw	r16, r28
    4bd4:	05 5b       	subi	r16, 0xB5	; 181
    4bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd8:	bc 01       	movw	r22, r24
    4bda:	cd 01       	movw	r24, r26
    4bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be0:	dc 01       	movw	r26, r24
    4be2:	cb 01       	movw	r24, r22
    4be4:	f8 01       	movw	r30, r16
    4be6:	91 83       	std	Z+1, r25	; 0x01
    4be8:	80 83       	st	Z, r24
    4bea:	1f c0       	rjmp	.+62     	; 0x4c2a <G_APP_vStartACMotion+0x404>
    4bec:	fe 01       	movw	r30, r28
    4bee:	e7 5b       	subi	r30, 0xB7	; 183
    4bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf2:	88 ec       	ldi	r24, 0xC8	; 200
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	91 83       	std	Z+1, r25	; 0x01
    4bf8:	80 83       	st	Z, r24
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e7 5b       	subi	r30, 0xB7	; 183
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	80 81       	ld	r24, Z
    4c02:	91 81       	ldd	r25, Z+1	; 0x01
    4c04:	01 97       	sbiw	r24, 0x01	; 1
    4c06:	f1 f7       	brne	.-4      	; 0x4c04 <G_APP_vStartACMotion+0x3de>
    4c08:	fe 01       	movw	r30, r28
    4c0a:	e7 5b       	subi	r30, 0xB7	; 183
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	91 83       	std	Z+1, r25	; 0x01
    4c10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c12:	de 01       	movw	r26, r28
    4c14:	a5 5b       	subi	r26, 0xB5	; 181
    4c16:	bf 4f       	sbci	r27, 0xFF	; 255
    4c18:	fe 01       	movw	r30, r28
    4c1a:	e5 5b       	subi	r30, 0xB5	; 181
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	80 81       	ld	r24, Z
    4c20:	91 81       	ldd	r25, Z+1	; 0x01
    4c22:	01 97       	sbiw	r24, 0x01	; 1
    4c24:	11 96       	adiw	r26, 0x01	; 1
    4c26:	9c 93       	st	X, r25
    4c28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	e5 5b       	subi	r30, 0xB5	; 181
    4c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c30:	80 81       	ld	r24, Z
    4c32:	91 81       	ldd	r25, Z+1	; 0x01
    4c34:	00 97       	sbiw	r24, 0x00	; 0
    4c36:	d1 f6       	brne	.-76     	; 0x4bec <G_APP_vStartACMotion+0x3c6>
    4c38:	27 c0       	rjmp	.+78     	; 0x4c88 <G_APP_vStartACMotion+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c3a:	8e 01       	movw	r16, r28
    4c3c:	05 5b       	subi	r16, 0xB5	; 181
    4c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c40:	fe 01       	movw	r30, r28
    4c42:	e3 5b       	subi	r30, 0xB3	; 179
    4c44:	ff 4f       	sbci	r31, 0xFF	; 255
    4c46:	60 81       	ld	r22, Z
    4c48:	71 81       	ldd	r23, Z+1	; 0x01
    4c4a:	82 81       	ldd	r24, Z+2	; 0x02
    4c4c:	93 81       	ldd	r25, Z+3	; 0x03
    4c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c52:	dc 01       	movw	r26, r24
    4c54:	cb 01       	movw	r24, r22
    4c56:	f8 01       	movw	r30, r16
    4c58:	91 83       	std	Z+1, r25	; 0x01
    4c5a:	80 83       	st	Z, r24
    4c5c:	de 01       	movw	r26, r28
    4c5e:	a9 5b       	subi	r26, 0xB9	; 185
    4c60:	bf 4f       	sbci	r27, 0xFF	; 255
    4c62:	fe 01       	movw	r30, r28
    4c64:	e5 5b       	subi	r30, 0xB5	; 181
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	80 81       	ld	r24, Z
    4c6a:	91 81       	ldd	r25, Z+1	; 0x01
    4c6c:	8d 93       	st	X+, r24
    4c6e:	9c 93       	st	X, r25
    4c70:	fe 01       	movw	r30, r28
    4c72:	e9 5b       	subi	r30, 0xB9	; 185
    4c74:	ff 4f       	sbci	r31, 0xFF	; 255
    4c76:	80 81       	ld	r24, Z
    4c78:	91 81       	ldd	r25, Z+1	; 0x01
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	f1 f7       	brne	.-4      	; 0x4c7a <G_APP_vStartACMotion+0x454>
    4c7e:	fe 01       	movw	r30, r28
    4c80:	e9 5b       	subi	r30, 0xB9	; 185
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	91 83       	std	Z+1, r25	; 0x01
    4c86:	80 83       	st	Z, r24
	_delay_ms(1000);
	SERVOM_vStart(135);
    4c88:	87 e8       	ldi	r24, 0x87	; 135
    4c8a:	0e 94 b5 11 	call	0x236a	; 0x236a <SERVOM_vStart>
    4c8e:	fe 01       	movw	r30, r28
    4c90:	ed 5b       	subi	r30, 0xBD	; 189
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	80 e0       	ldi	r24, 0x00	; 0
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	aa e7       	ldi	r26, 0x7A	; 122
    4c9a:	b4 e4       	ldi	r27, 0x44	; 68
    4c9c:	80 83       	st	Z, r24
    4c9e:	91 83       	std	Z+1, r25	; 0x01
    4ca0:	a2 83       	std	Z+2, r26	; 0x02
    4ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ca4:	8e 01       	movw	r16, r28
    4ca6:	01 5c       	subi	r16, 0xC1	; 193
    4ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    4caa:	fe 01       	movw	r30, r28
    4cac:	ed 5b       	subi	r30, 0xBD	; 189
    4cae:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb0:	60 81       	ld	r22, Z
    4cb2:	71 81       	ldd	r23, Z+1	; 0x01
    4cb4:	82 81       	ldd	r24, Z+2	; 0x02
    4cb6:	93 81       	ldd	r25, Z+3	; 0x03
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	4a ef       	ldi	r20, 0xFA	; 250
    4cbe:	54 e4       	ldi	r21, 0x44	; 68
    4cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	f8 01       	movw	r30, r16
    4cca:	80 83       	st	Z, r24
    4ccc:	91 83       	std	Z+1, r25	; 0x01
    4cce:	a2 83       	std	Z+2, r26	; 0x02
    4cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	ff 96       	adiw	r30, 0x3f	; 63
    4cd6:	60 81       	ld	r22, Z
    4cd8:	71 81       	ldd	r23, Z+1	; 0x01
    4cda:	82 81       	ldd	r24, Z+2	; 0x02
    4cdc:	93 81       	ldd	r25, Z+3	; 0x03
    4cde:	20 e0       	ldi	r18, 0x00	; 0
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	40 e8       	ldi	r20, 0x80	; 128
    4ce4:	5f e3       	ldi	r21, 0x3F	; 63
    4ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cea:	88 23       	and	r24, r24
    4cec:	2c f4       	brge	.+10     	; 0x4cf8 <G_APP_vStartACMotion+0x4d2>
		__ticks = 1;
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	9e af       	std	Y+62, r25	; 0x3e
    4cf4:	8d af       	std	Y+61, r24	; 0x3d
    4cf6:	46 c0       	rjmp	.+140    	; 0x4d84 <G_APP_vStartACMotion+0x55e>
	else if (__tmp > 65535)
    4cf8:	fe 01       	movw	r30, r28
    4cfa:	ff 96       	adiw	r30, 0x3f	; 63
    4cfc:	60 81       	ld	r22, Z
    4cfe:	71 81       	ldd	r23, Z+1	; 0x01
    4d00:	82 81       	ldd	r24, Z+2	; 0x02
    4d02:	93 81       	ldd	r25, Z+3	; 0x03
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	3f ef       	ldi	r19, 0xFF	; 255
    4d08:	4f e7       	ldi	r20, 0x7F	; 127
    4d0a:	57 e4       	ldi	r21, 0x47	; 71
    4d0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d10:	18 16       	cp	r1, r24
    4d12:	64 f5       	brge	.+88     	; 0x4d6c <G_APP_vStartACMotion+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d14:	fe 01       	movw	r30, r28
    4d16:	ed 5b       	subi	r30, 0xBD	; 189
    4d18:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1a:	60 81       	ld	r22, Z
    4d1c:	71 81       	ldd	r23, Z+1	; 0x01
    4d1e:	82 81       	ldd	r24, Z+2	; 0x02
    4d20:	93 81       	ldd	r25, Z+3	; 0x03
    4d22:	20 e0       	ldi	r18, 0x00	; 0
    4d24:	30 e0       	ldi	r19, 0x00	; 0
    4d26:	40 e2       	ldi	r20, 0x20	; 32
    4d28:	51 e4       	ldi	r21, 0x41	; 65
    4d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d2e:	dc 01       	movw	r26, r24
    4d30:	cb 01       	movw	r24, r22
    4d32:	bc 01       	movw	r22, r24
    4d34:	cd 01       	movw	r24, r26
    4d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d3a:	dc 01       	movw	r26, r24
    4d3c:	cb 01       	movw	r24, r22
    4d3e:	9e af       	std	Y+62, r25	; 0x3e
    4d40:	8d af       	std	Y+61, r24	; 0x3d
    4d42:	0f c0       	rjmp	.+30     	; 0x4d62 <G_APP_vStartACMotion+0x53c>
    4d44:	88 ec       	ldi	r24, 0xC8	; 200
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	9c af       	std	Y+60, r25	; 0x3c
    4d4a:	8b af       	std	Y+59, r24	; 0x3b
    4d4c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d4e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4d50:	01 97       	sbiw	r24, 0x01	; 1
    4d52:	f1 f7       	brne	.-4      	; 0x4d50 <G_APP_vStartACMotion+0x52a>
    4d54:	9c af       	std	Y+60, r25	; 0x3c
    4d56:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d58:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d5c:	01 97       	sbiw	r24, 0x01	; 1
    4d5e:	9e af       	std	Y+62, r25	; 0x3e
    4d60:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d62:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d64:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d66:	00 97       	sbiw	r24, 0x00	; 0
    4d68:	69 f7       	brne	.-38     	; 0x4d44 <G_APP_vStartACMotion+0x51e>
    4d6a:	16 c0       	rjmp	.+44     	; 0x4d98 <G_APP_vStartACMotion+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	ff 96       	adiw	r30, 0x3f	; 63
    4d70:	60 81       	ld	r22, Z
    4d72:	71 81       	ldd	r23, Z+1	; 0x01
    4d74:	82 81       	ldd	r24, Z+2	; 0x02
    4d76:	93 81       	ldd	r25, Z+3	; 0x03
    4d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	9e af       	std	Y+62, r25	; 0x3e
    4d82:	8d af       	std	Y+61, r24	; 0x3d
    4d84:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d86:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d88:	9a af       	std	Y+58, r25	; 0x3a
    4d8a:	89 af       	std	Y+57, r24	; 0x39
    4d8c:	89 ad       	ldd	r24, Y+57	; 0x39
    4d8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d90:	01 97       	sbiw	r24, 0x01	; 1
    4d92:	f1 f7       	brne	.-4      	; 0x4d90 <G_APP_vStartACMotion+0x56a>
    4d94:	9a af       	std	Y+58, r25	; 0x3a
    4d96:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	SERVOM_vStart(180);
    4d98:	84 eb       	ldi	r24, 0xB4	; 180
    4d9a:	0e 94 b5 11 	call	0x236a	; 0x236a <SERVOM_vStart>
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	aa e7       	ldi	r26, 0x7A	; 122
    4da4:	b4 e4       	ldi	r27, 0x44	; 68
    4da6:	8d ab       	std	Y+53, r24	; 0x35
    4da8:	9e ab       	std	Y+54, r25	; 0x36
    4daa:	af ab       	std	Y+55, r26	; 0x37
    4dac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dae:	6d a9       	ldd	r22, Y+53	; 0x35
    4db0:	7e a9       	ldd	r23, Y+54	; 0x36
    4db2:	8f a9       	ldd	r24, Y+55	; 0x37
    4db4:	98 ad       	ldd	r25, Y+56	; 0x38
    4db6:	20 e0       	ldi	r18, 0x00	; 0
    4db8:	30 e0       	ldi	r19, 0x00	; 0
    4dba:	4a ef       	ldi	r20, 0xFA	; 250
    4dbc:	54 e4       	ldi	r21, 0x44	; 68
    4dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	89 ab       	std	Y+49, r24	; 0x31
    4dc8:	9a ab       	std	Y+50, r25	; 0x32
    4dca:	ab ab       	std	Y+51, r26	; 0x33
    4dcc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4dce:	69 a9       	ldd	r22, Y+49	; 0x31
    4dd0:	7a a9       	ldd	r23, Y+50	; 0x32
    4dd2:	8b a9       	ldd	r24, Y+51	; 0x33
    4dd4:	9c a9       	ldd	r25, Y+52	; 0x34
    4dd6:	20 e0       	ldi	r18, 0x00	; 0
    4dd8:	30 e0       	ldi	r19, 0x00	; 0
    4dda:	40 e8       	ldi	r20, 0x80	; 128
    4ddc:	5f e3       	ldi	r21, 0x3F	; 63
    4dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4de2:	88 23       	and	r24, r24
    4de4:	2c f4       	brge	.+10     	; 0x4df0 <G_APP_vStartACMotion+0x5ca>
		__ticks = 1;
    4de6:	81 e0       	ldi	r24, 0x01	; 1
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	98 ab       	std	Y+48, r25	; 0x30
    4dec:	8f a7       	std	Y+47, r24	; 0x2f
    4dee:	3f c0       	rjmp	.+126    	; 0x4e6e <G_APP_vStartACMotion+0x648>
	else if (__tmp > 65535)
    4df0:	69 a9       	ldd	r22, Y+49	; 0x31
    4df2:	7a a9       	ldd	r23, Y+50	; 0x32
    4df4:	8b a9       	ldd	r24, Y+51	; 0x33
    4df6:	9c a9       	ldd	r25, Y+52	; 0x34
    4df8:	20 e0       	ldi	r18, 0x00	; 0
    4dfa:	3f ef       	ldi	r19, 0xFF	; 255
    4dfc:	4f e7       	ldi	r20, 0x7F	; 127
    4dfe:	57 e4       	ldi	r21, 0x47	; 71
    4e00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e04:	18 16       	cp	r1, r24
    4e06:	4c f5       	brge	.+82     	; 0x4e5a <G_APP_vStartACMotion+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e08:	6d a9       	ldd	r22, Y+53	; 0x35
    4e0a:	7e a9       	ldd	r23, Y+54	; 0x36
    4e0c:	8f a9       	ldd	r24, Y+55	; 0x37
    4e0e:	98 ad       	ldd	r25, Y+56	; 0x38
    4e10:	20 e0       	ldi	r18, 0x00	; 0
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	40 e2       	ldi	r20, 0x20	; 32
    4e16:	51 e4       	ldi	r21, 0x41	; 65
    4e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1c:	dc 01       	movw	r26, r24
    4e1e:	cb 01       	movw	r24, r22
    4e20:	bc 01       	movw	r22, r24
    4e22:	cd 01       	movw	r24, r26
    4e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e28:	dc 01       	movw	r26, r24
    4e2a:	cb 01       	movw	r24, r22
    4e2c:	98 ab       	std	Y+48, r25	; 0x30
    4e2e:	8f a7       	std	Y+47, r24	; 0x2f
    4e30:	0f c0       	rjmp	.+30     	; 0x4e50 <G_APP_vStartACMotion+0x62a>
    4e32:	88 ec       	ldi	r24, 0xC8	; 200
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	9e a7       	std	Y+46, r25	; 0x2e
    4e38:	8d a7       	std	Y+45, r24	; 0x2d
    4e3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4e3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4e3e:	01 97       	sbiw	r24, 0x01	; 1
    4e40:	f1 f7       	brne	.-4      	; 0x4e3e <G_APP_vStartACMotion+0x618>
    4e42:	9e a7       	std	Y+46, r25	; 0x2e
    4e44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e48:	98 a9       	ldd	r25, Y+48	; 0x30
    4e4a:	01 97       	sbiw	r24, 0x01	; 1
    4e4c:	98 ab       	std	Y+48, r25	; 0x30
    4e4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e52:	98 a9       	ldd	r25, Y+48	; 0x30
    4e54:	00 97       	sbiw	r24, 0x00	; 0
    4e56:	69 f7       	brne	.-38     	; 0x4e32 <G_APP_vStartACMotion+0x60c>
    4e58:	14 c0       	rjmp	.+40     	; 0x4e82 <G_APP_vStartACMotion+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e5a:	69 a9       	ldd	r22, Y+49	; 0x31
    4e5c:	7a a9       	ldd	r23, Y+50	; 0x32
    4e5e:	8b a9       	ldd	r24, Y+51	; 0x33
    4e60:	9c a9       	ldd	r25, Y+52	; 0x34
    4e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e66:	dc 01       	movw	r26, r24
    4e68:	cb 01       	movw	r24, r22
    4e6a:	98 ab       	std	Y+48, r25	; 0x30
    4e6c:	8f a7       	std	Y+47, r24	; 0x2f
    4e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e70:	98 a9       	ldd	r25, Y+48	; 0x30
    4e72:	9c a7       	std	Y+44, r25	; 0x2c
    4e74:	8b a7       	std	Y+43, r24	; 0x2b
    4e76:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e78:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e7a:	01 97       	sbiw	r24, 0x01	; 1
    4e7c:	f1 f7       	brne	.-4      	; 0x4e7a <G_APP_vStartACMotion+0x654>
    4e7e:	9c a7       	std	Y+44, r25	; 0x2c
    4e80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	SERVOM_vStart(135);
    4e82:	87 e8       	ldi	r24, 0x87	; 135
    4e84:	0e 94 b5 11 	call	0x236a	; 0x236a <SERVOM_vStart>
    4e88:	80 e0       	ldi	r24, 0x00	; 0
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	aa e7       	ldi	r26, 0x7A	; 122
    4e8e:	b4 e4       	ldi	r27, 0x44	; 68
    4e90:	8f a3       	std	Y+39, r24	; 0x27
    4e92:	98 a7       	std	Y+40, r25	; 0x28
    4e94:	a9 a7       	std	Y+41, r26	; 0x29
    4e96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e98:	6f a1       	ldd	r22, Y+39	; 0x27
    4e9a:	78 a5       	ldd	r23, Y+40	; 0x28
    4e9c:	89 a5       	ldd	r24, Y+41	; 0x29
    4e9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	4a ef       	ldi	r20, 0xFA	; 250
    4ea6:	54 e4       	ldi	r21, 0x44	; 68
    4ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eac:	dc 01       	movw	r26, r24
    4eae:	cb 01       	movw	r24, r22
    4eb0:	8b a3       	std	Y+35, r24	; 0x23
    4eb2:	9c a3       	std	Y+36, r25	; 0x24
    4eb4:	ad a3       	std	Y+37, r26	; 0x25
    4eb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4eb8:	6b a1       	ldd	r22, Y+35	; 0x23
    4eba:	7c a1       	ldd	r23, Y+36	; 0x24
    4ebc:	8d a1       	ldd	r24, Y+37	; 0x25
    4ebe:	9e a1       	ldd	r25, Y+38	; 0x26
    4ec0:	20 e0       	ldi	r18, 0x00	; 0
    4ec2:	30 e0       	ldi	r19, 0x00	; 0
    4ec4:	40 e8       	ldi	r20, 0x80	; 128
    4ec6:	5f e3       	ldi	r21, 0x3F	; 63
    4ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ecc:	88 23       	and	r24, r24
    4ece:	2c f4       	brge	.+10     	; 0x4eda <G_APP_vStartACMotion+0x6b4>
		__ticks = 1;
    4ed0:	81 e0       	ldi	r24, 0x01	; 1
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	9a a3       	std	Y+34, r25	; 0x22
    4ed6:	89 a3       	std	Y+33, r24	; 0x21
    4ed8:	3f c0       	rjmp	.+126    	; 0x4f58 <G_APP_vStartACMotion+0x732>
	else if (__tmp > 65535)
    4eda:	6b a1       	ldd	r22, Y+35	; 0x23
    4edc:	7c a1       	ldd	r23, Y+36	; 0x24
    4ede:	8d a1       	ldd	r24, Y+37	; 0x25
    4ee0:	9e a1       	ldd	r25, Y+38	; 0x26
    4ee2:	20 e0       	ldi	r18, 0x00	; 0
    4ee4:	3f ef       	ldi	r19, 0xFF	; 255
    4ee6:	4f e7       	ldi	r20, 0x7F	; 127
    4ee8:	57 e4       	ldi	r21, 0x47	; 71
    4eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eee:	18 16       	cp	r1, r24
    4ef0:	4c f5       	brge	.+82     	; 0x4f44 <G_APP_vStartACMotion+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef2:	6f a1       	ldd	r22, Y+39	; 0x27
    4ef4:	78 a5       	ldd	r23, Y+40	; 0x28
    4ef6:	89 a5       	ldd	r24, Y+41	; 0x29
    4ef8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4efa:	20 e0       	ldi	r18, 0x00	; 0
    4efc:	30 e0       	ldi	r19, 0x00	; 0
    4efe:	40 e2       	ldi	r20, 0x20	; 32
    4f00:	51 e4       	ldi	r21, 0x41	; 65
    4f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f06:	dc 01       	movw	r26, r24
    4f08:	cb 01       	movw	r24, r22
    4f0a:	bc 01       	movw	r22, r24
    4f0c:	cd 01       	movw	r24, r26
    4f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f12:	dc 01       	movw	r26, r24
    4f14:	cb 01       	movw	r24, r22
    4f16:	9a a3       	std	Y+34, r25	; 0x22
    4f18:	89 a3       	std	Y+33, r24	; 0x21
    4f1a:	0f c0       	rjmp	.+30     	; 0x4f3a <G_APP_vStartACMotion+0x714>
    4f1c:	88 ec       	ldi	r24, 0xC8	; 200
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	98 a3       	std	Y+32, r25	; 0x20
    4f22:	8f 8f       	std	Y+31, r24	; 0x1f
    4f24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f26:	98 a1       	ldd	r25, Y+32	; 0x20
    4f28:	01 97       	sbiw	r24, 0x01	; 1
    4f2a:	f1 f7       	brne	.-4      	; 0x4f28 <G_APP_vStartACMotion+0x702>
    4f2c:	98 a3       	std	Y+32, r25	; 0x20
    4f2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f30:	89 a1       	ldd	r24, Y+33	; 0x21
    4f32:	9a a1       	ldd	r25, Y+34	; 0x22
    4f34:	01 97       	sbiw	r24, 0x01	; 1
    4f36:	9a a3       	std	Y+34, r25	; 0x22
    4f38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    4f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    4f3e:	00 97       	sbiw	r24, 0x00	; 0
    4f40:	69 f7       	brne	.-38     	; 0x4f1c <G_APP_vStartACMotion+0x6f6>
    4f42:	14 c0       	rjmp	.+40     	; 0x4f6c <G_APP_vStartACMotion+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f44:	6b a1       	ldd	r22, Y+35	; 0x23
    4f46:	7c a1       	ldd	r23, Y+36	; 0x24
    4f48:	8d a1       	ldd	r24, Y+37	; 0x25
    4f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    4f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f50:	dc 01       	movw	r26, r24
    4f52:	cb 01       	movw	r24, r22
    4f54:	9a a3       	std	Y+34, r25	; 0x22
    4f56:	89 a3       	std	Y+33, r24	; 0x21
    4f58:	89 a1       	ldd	r24, Y+33	; 0x21
    4f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    4f5c:	9e 8f       	std	Y+30, r25	; 0x1e
    4f5e:	8d 8f       	std	Y+29, r24	; 0x1d
    4f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f64:	01 97       	sbiw	r24, 0x01	; 1
    4f66:	f1 f7       	brne	.-4      	; 0x4f64 <G_APP_vStartACMotion+0x73e>
    4f68:	9e 8f       	std	Y+30, r25	; 0x1e
    4f6a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	SERVOM_vStart(90);
    4f6c:	8a e5       	ldi	r24, 0x5A	; 90
    4f6e:	0e 94 b5 11 	call	0x236a	; 0x236a <SERVOM_vStart>
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	aa e7       	ldi	r26, 0x7A	; 122
    4f78:	b4 e4       	ldi	r27, 0x44	; 68
    4f7a:	89 8f       	std	Y+25, r24	; 0x19
    4f7c:	9a 8f       	std	Y+26, r25	; 0x1a
    4f7e:	ab 8f       	std	Y+27, r26	; 0x1b
    4f80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f82:	69 8d       	ldd	r22, Y+25	; 0x19
    4f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	4a ef       	ldi	r20, 0xFA	; 250
    4f90:	54 e4       	ldi	r21, 0x44	; 68
    4f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f96:	dc 01       	movw	r26, r24
    4f98:	cb 01       	movw	r24, r22
    4f9a:	8d 8b       	std	Y+21, r24	; 0x15
    4f9c:	9e 8b       	std	Y+22, r25	; 0x16
    4f9e:	af 8b       	std	Y+23, r26	; 0x17
    4fa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    4fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    4fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    4fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    4faa:	20 e0       	ldi	r18, 0x00	; 0
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    4fae:	40 e8       	ldi	r20, 0x80	; 128
    4fb0:	5f e3       	ldi	r21, 0x3F	; 63
    4fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fb6:	88 23       	and	r24, r24
    4fb8:	2c f4       	brge	.+10     	; 0x4fc4 <G_APP_vStartACMotion+0x79e>
		__ticks = 1;
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	9c 8b       	std	Y+20, r25	; 0x14
    4fc0:	8b 8b       	std	Y+19, r24	; 0x13
    4fc2:	3f c0       	rjmp	.+126    	; 0x5042 <G_APP_vStartACMotion+0x81c>
	else if (__tmp > 65535)
    4fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    4fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    4fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    4fca:	98 8d       	ldd	r25, Y+24	; 0x18
    4fcc:	20 e0       	ldi	r18, 0x00	; 0
    4fce:	3f ef       	ldi	r19, 0xFF	; 255
    4fd0:	4f e7       	ldi	r20, 0x7F	; 127
    4fd2:	57 e4       	ldi	r21, 0x47	; 71
    4fd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fd8:	18 16       	cp	r1, r24
    4fda:	4c f5       	brge	.+82     	; 0x502e <G_APP_vStartACMotion+0x808>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    4fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	40 e2       	ldi	r20, 0x20	; 32
    4fea:	51 e4       	ldi	r21, 0x41	; 65
    4fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ff0:	dc 01       	movw	r26, r24
    4ff2:	cb 01       	movw	r24, r22
    4ff4:	bc 01       	movw	r22, r24
    4ff6:	cd 01       	movw	r24, r26
    4ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ffc:	dc 01       	movw	r26, r24
    4ffe:	cb 01       	movw	r24, r22
    5000:	9c 8b       	std	Y+20, r25	; 0x14
    5002:	8b 8b       	std	Y+19, r24	; 0x13
    5004:	0f c0       	rjmp	.+30     	; 0x5024 <G_APP_vStartACMotion+0x7fe>
    5006:	88 ec       	ldi	r24, 0xC8	; 200
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	9a 8b       	std	Y+18, r25	; 0x12
    500c:	89 8b       	std	Y+17, r24	; 0x11
    500e:	89 89       	ldd	r24, Y+17	; 0x11
    5010:	9a 89       	ldd	r25, Y+18	; 0x12
    5012:	01 97       	sbiw	r24, 0x01	; 1
    5014:	f1 f7       	brne	.-4      	; 0x5012 <G_APP_vStartACMotion+0x7ec>
    5016:	9a 8b       	std	Y+18, r25	; 0x12
    5018:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    501a:	8b 89       	ldd	r24, Y+19	; 0x13
    501c:	9c 89       	ldd	r25, Y+20	; 0x14
    501e:	01 97       	sbiw	r24, 0x01	; 1
    5020:	9c 8b       	std	Y+20, r25	; 0x14
    5022:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5024:	8b 89       	ldd	r24, Y+19	; 0x13
    5026:	9c 89       	ldd	r25, Y+20	; 0x14
    5028:	00 97       	sbiw	r24, 0x00	; 0
    502a:	69 f7       	brne	.-38     	; 0x5006 <G_APP_vStartACMotion+0x7e0>
    502c:	14 c0       	rjmp	.+40     	; 0x5056 <G_APP_vStartACMotion+0x830>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    502e:	6d 89       	ldd	r22, Y+21	; 0x15
    5030:	7e 89       	ldd	r23, Y+22	; 0x16
    5032:	8f 89       	ldd	r24, Y+23	; 0x17
    5034:	98 8d       	ldd	r25, Y+24	; 0x18
    5036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    503a:	dc 01       	movw	r26, r24
    503c:	cb 01       	movw	r24, r22
    503e:	9c 8b       	std	Y+20, r25	; 0x14
    5040:	8b 8b       	std	Y+19, r24	; 0x13
    5042:	8b 89       	ldd	r24, Y+19	; 0x13
    5044:	9c 89       	ldd	r25, Y+20	; 0x14
    5046:	98 8b       	std	Y+16, r25	; 0x10
    5048:	8f 87       	std	Y+15, r24	; 0x0f
    504a:	8f 85       	ldd	r24, Y+15	; 0x0f
    504c:	98 89       	ldd	r25, Y+16	; 0x10
    504e:	01 97       	sbiw	r24, 0x01	; 1
    5050:	f1 f7       	brne	.-4      	; 0x504e <G_APP_vStartACMotion+0x828>
    5052:	98 8b       	std	Y+16, r25	; 0x10
    5054:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	SERVOM_vStart(45);
    5056:	8d e2       	ldi	r24, 0x2D	; 45
    5058:	0e 94 b5 11 	call	0x236a	; 0x236a <SERVOM_vStart>
    505c:	80 e0       	ldi	r24, 0x00	; 0
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	aa e7       	ldi	r26, 0x7A	; 122
    5062:	b4 e4       	ldi	r27, 0x44	; 68
    5064:	8b 87       	std	Y+11, r24	; 0x0b
    5066:	9c 87       	std	Y+12, r25	; 0x0c
    5068:	ad 87       	std	Y+13, r26	; 0x0d
    506a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    506c:	6b 85       	ldd	r22, Y+11	; 0x0b
    506e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5070:	8d 85       	ldd	r24, Y+13	; 0x0d
    5072:	9e 85       	ldd	r25, Y+14	; 0x0e
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	4a ef       	ldi	r20, 0xFA	; 250
    507a:	54 e4       	ldi	r21, 0x44	; 68
    507c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	8f 83       	std	Y+7, r24	; 0x07
    5086:	98 87       	std	Y+8, r25	; 0x08
    5088:	a9 87       	std	Y+9, r26	; 0x09
    508a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    508c:	6f 81       	ldd	r22, Y+7	; 0x07
    508e:	78 85       	ldd	r23, Y+8	; 0x08
    5090:	89 85       	ldd	r24, Y+9	; 0x09
    5092:	9a 85       	ldd	r25, Y+10	; 0x0a
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	40 e8       	ldi	r20, 0x80	; 128
    509a:	5f e3       	ldi	r21, 0x3F	; 63
    509c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50a0:	88 23       	and	r24, r24
    50a2:	2c f4       	brge	.+10     	; 0x50ae <G_APP_vStartACMotion+0x888>
		__ticks = 1;
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	9e 83       	std	Y+6, r25	; 0x06
    50aa:	8d 83       	std	Y+5, r24	; 0x05
    50ac:	3f c0       	rjmp	.+126    	; 0x512c <G_APP_vStartACMotion+0x906>
	else if (__tmp > 65535)
    50ae:	6f 81       	ldd	r22, Y+7	; 0x07
    50b0:	78 85       	ldd	r23, Y+8	; 0x08
    50b2:	89 85       	ldd	r24, Y+9	; 0x09
    50b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b6:	20 e0       	ldi	r18, 0x00	; 0
    50b8:	3f ef       	ldi	r19, 0xFF	; 255
    50ba:	4f e7       	ldi	r20, 0x7F	; 127
    50bc:	57 e4       	ldi	r21, 0x47	; 71
    50be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50c2:	18 16       	cp	r1, r24
    50c4:	4c f5       	brge	.+82     	; 0x5118 <G_APP_vStartACMotion+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    50c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    50ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    50cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	40 e2       	ldi	r20, 0x20	; 32
    50d4:	51 e4       	ldi	r21, 0x41	; 65
    50d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50da:	dc 01       	movw	r26, r24
    50dc:	cb 01       	movw	r24, r22
    50de:	bc 01       	movw	r22, r24
    50e0:	cd 01       	movw	r24, r26
    50e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e6:	dc 01       	movw	r26, r24
    50e8:	cb 01       	movw	r24, r22
    50ea:	9e 83       	std	Y+6, r25	; 0x06
    50ec:	8d 83       	std	Y+5, r24	; 0x05
    50ee:	0f c0       	rjmp	.+30     	; 0x510e <G_APP_vStartACMotion+0x8e8>
    50f0:	88 ec       	ldi	r24, 0xC8	; 200
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	9c 83       	std	Y+4, r25	; 0x04
    50f6:	8b 83       	std	Y+3, r24	; 0x03
    50f8:	8b 81       	ldd	r24, Y+3	; 0x03
    50fa:	9c 81       	ldd	r25, Y+4	; 0x04
    50fc:	01 97       	sbiw	r24, 0x01	; 1
    50fe:	f1 f7       	brne	.-4      	; 0x50fc <G_APP_vStartACMotion+0x8d6>
    5100:	9c 83       	std	Y+4, r25	; 0x04
    5102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5104:	8d 81       	ldd	r24, Y+5	; 0x05
    5106:	9e 81       	ldd	r25, Y+6	; 0x06
    5108:	01 97       	sbiw	r24, 0x01	; 1
    510a:	9e 83       	std	Y+6, r25	; 0x06
    510c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    510e:	8d 81       	ldd	r24, Y+5	; 0x05
    5110:	9e 81       	ldd	r25, Y+6	; 0x06
    5112:	00 97       	sbiw	r24, 0x00	; 0
    5114:	69 f7       	brne	.-38     	; 0x50f0 <G_APP_vStartACMotion+0x8ca>
    5116:	14 c0       	rjmp	.+40     	; 0x5140 <G_APP_vStartACMotion+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5118:	6f 81       	ldd	r22, Y+7	; 0x07
    511a:	78 85       	ldd	r23, Y+8	; 0x08
    511c:	89 85       	ldd	r24, Y+9	; 0x09
    511e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	9e 83       	std	Y+6, r25	; 0x06
    512a:	8d 83       	std	Y+5, r24	; 0x05
    512c:	8d 81       	ldd	r24, Y+5	; 0x05
    512e:	9e 81       	ldd	r25, Y+6	; 0x06
    5130:	9a 83       	std	Y+2, r25	; 0x02
    5132:	89 83       	std	Y+1, r24	; 0x01
    5134:	89 81       	ldd	r24, Y+1	; 0x01
    5136:	9a 81       	ldd	r25, Y+2	; 0x02
    5138:	01 97       	sbiw	r24, 0x01	; 1
    513a:	f1 f7       	brne	.-4      	; 0x5138 <G_APP_vStartACMotion+0x912>
    513c:	9a 83       	std	Y+2, r25	; 0x02
    513e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	TIMERS_vStopTimer(SERVOM_TIMER);
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	0e 94 12 08 	call	0x1024	; 0x1024 <TIMERS_vStopTimer>
}
    5146:	c0 59       	subi	r28, 0x90	; 144
    5148:	df 4f       	sbci	r29, 0xFF	; 255
    514a:	0f b6       	in	r0, 0x3f	; 63
    514c:	f8 94       	cli
    514e:	de bf       	out	0x3e, r29	; 62
    5150:	0f be       	out	0x3f, r0	; 63
    5152:	cd bf       	out	0x3d, r28	; 61
    5154:	cf 91       	pop	r28
    5156:	df 91       	pop	r29
    5158:	1f 91       	pop	r17
    515a:	0f 91       	pop	r16
    515c:	08 95       	ret

0000515e <APP_voidEnterTerminationState>:

// Once the Exit button is pressed, this callback function will executed
void APP_voidEnterTerminationState(void)
{
    515e:	df 93       	push	r29
    5160:	cf 93       	push	r28
    5162:	cd b7       	in	r28, 0x3d	; 61
    5164:	de b7       	in	r29, 0x3e	; 62
	// Let's stop all the working peripherials first before being stuck in the infinte loop
	ADC_vDisable();
    5166:	0e 94 52 11 	call	0x22a4	; 0x22a4 <ADC_vDisable>
	EXTI_vDisable(EXTI_INT0);
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <EXTI_vDisable>

	TIMERS_vStartTimer(SERVOM_TIMER);
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <TIMERS_vStartTimer>
	SERVOM_vStop();
    5176:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SERVOM_vStop>
	TIMERS_vStopTimer(SERVOM_TIMER);
    517a:	81 e0       	ldi	r24, 0x01	; 1
    517c:	0e 94 12 08 	call	0x1024	; 0x1024 <TIMERS_vStopTimer>

	// say ByeBye to your System :)
	LCD_I2C_vClear();
    5180:	0e 94 31 16 	call	0x2c62	; 0x2c62 <LCD_I2C_vClear>
	LCD_I2C_vSendString("Glag to Serve");
    5184:	8a ed       	ldi	r24, 0xDA	; 218
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
	LCD_I2C_vSetCursorPosition(1, 5);
    518c:	81 e0       	ldi	r24, 0x01	; 1
    518e:	65 e0       	ldi	r22, 0x05	; 5
    5190:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_I2C_vSetCursorPosition>
	LCD_I2C_vSendString("^_^");
    5194:	88 ee       	ldi	r24, 0xE8	; 232
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
    519c:	ff cf       	rjmp	.-2      	; 0x519c <APP_voidEnterTerminationState+0x3e>

0000519e <APP_voidOpenTheDoor>:
	while(1){}
}

void APP_voidOpenTheDoor(void)
{
    519e:	df 93       	push	r29
    51a0:	cf 93       	push	r28
    51a2:	cd b7       	in	r28, 0x3d	; 61
    51a4:	de b7       	in	r29, 0x3e	; 62
    51a6:	2e 97       	sbiw	r28, 0x0e	; 14
    51a8:	0f b6       	in	r0, 0x3f	; 63
    51aa:	f8 94       	cli
    51ac:	de bf       	out	0x3e, r29	; 62
    51ae:	0f be       	out	0x3f, r0	; 63
    51b0:	cd bf       	out	0x3d, r28	; 61
	LCD_I2C_vClear();
    51b2:	0e 94 31 16 	call	0x2c62	; 0x2c62 <LCD_I2C_vClear>
	LCD_I2C_vSendString("Opening the door ...");
    51b6:	8c ee       	ldi	r24, 0xEC	; 236
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
	GPIO_vSetPinValue(APP_DCM_PORT, APP_DCM_PIN, HIGH);
    51be:	81 e0       	ldi	r24, 0x01	; 1
    51c0:	61 e0       	ldi	r22, 0x01	; 1
    51c2:	41 e0       	ldi	r20, 0x01	; 1
    51c4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	90 e8       	ldi	r25, 0x80	; 128
    51cc:	ab e3       	ldi	r26, 0x3B	; 59
    51ce:	b5 e4       	ldi	r27, 0x45	; 69
    51d0:	8b 87       	std	Y+11, r24	; 0x0b
    51d2:	9c 87       	std	Y+12, r25	; 0x0c
    51d4:	ad 87       	std	Y+13, r26	; 0x0d
    51d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    51da:	7c 85       	ldd	r23, Y+12	; 0x0c
    51dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    51de:	9e 85       	ldd	r25, Y+14	; 0x0e
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	4a ef       	ldi	r20, 0xFA	; 250
    51e6:	54 e4       	ldi	r21, 0x44	; 68
    51e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ec:	dc 01       	movw	r26, r24
    51ee:	cb 01       	movw	r24, r22
    51f0:	8f 83       	std	Y+7, r24	; 0x07
    51f2:	98 87       	std	Y+8, r25	; 0x08
    51f4:	a9 87       	std	Y+9, r26	; 0x09
    51f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51f8:	6f 81       	ldd	r22, Y+7	; 0x07
    51fa:	78 85       	ldd	r23, Y+8	; 0x08
    51fc:	89 85       	ldd	r24, Y+9	; 0x09
    51fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	40 e8       	ldi	r20, 0x80	; 128
    5206:	5f e3       	ldi	r21, 0x3F	; 63
    5208:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    520c:	88 23       	and	r24, r24
    520e:	2c f4       	brge	.+10     	; 0x521a <APP_voidOpenTheDoor+0x7c>
		__ticks = 1;
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	9e 83       	std	Y+6, r25	; 0x06
    5216:	8d 83       	std	Y+5, r24	; 0x05
    5218:	3f c0       	rjmp	.+126    	; 0x5298 <APP_voidOpenTheDoor+0xfa>
	else if (__tmp > 65535)
    521a:	6f 81       	ldd	r22, Y+7	; 0x07
    521c:	78 85       	ldd	r23, Y+8	; 0x08
    521e:	89 85       	ldd	r24, Y+9	; 0x09
    5220:	9a 85       	ldd	r25, Y+10	; 0x0a
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	3f ef       	ldi	r19, 0xFF	; 255
    5226:	4f e7       	ldi	r20, 0x7F	; 127
    5228:	57 e4       	ldi	r21, 0x47	; 71
    522a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    522e:	18 16       	cp	r1, r24
    5230:	4c f5       	brge	.+82     	; 0x5284 <APP_voidOpenTheDoor+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5232:	6b 85       	ldd	r22, Y+11	; 0x0b
    5234:	7c 85       	ldd	r23, Y+12	; 0x0c
    5236:	8d 85       	ldd	r24, Y+13	; 0x0d
    5238:	9e 85       	ldd	r25, Y+14	; 0x0e
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	30 e0       	ldi	r19, 0x00	; 0
    523e:	40 e2       	ldi	r20, 0x20	; 32
    5240:	51 e4       	ldi	r21, 0x41	; 65
    5242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5246:	dc 01       	movw	r26, r24
    5248:	cb 01       	movw	r24, r22
    524a:	bc 01       	movw	r22, r24
    524c:	cd 01       	movw	r24, r26
    524e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5252:	dc 01       	movw	r26, r24
    5254:	cb 01       	movw	r24, r22
    5256:	9e 83       	std	Y+6, r25	; 0x06
    5258:	8d 83       	std	Y+5, r24	; 0x05
    525a:	0f c0       	rjmp	.+30     	; 0x527a <APP_voidOpenTheDoor+0xdc>
    525c:	88 ec       	ldi	r24, 0xC8	; 200
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	9c 83       	std	Y+4, r25	; 0x04
    5262:	8b 83       	std	Y+3, r24	; 0x03
    5264:	8b 81       	ldd	r24, Y+3	; 0x03
    5266:	9c 81       	ldd	r25, Y+4	; 0x04
    5268:	01 97       	sbiw	r24, 0x01	; 1
    526a:	f1 f7       	brne	.-4      	; 0x5268 <APP_voidOpenTheDoor+0xca>
    526c:	9c 83       	std	Y+4, r25	; 0x04
    526e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5270:	8d 81       	ldd	r24, Y+5	; 0x05
    5272:	9e 81       	ldd	r25, Y+6	; 0x06
    5274:	01 97       	sbiw	r24, 0x01	; 1
    5276:	9e 83       	std	Y+6, r25	; 0x06
    5278:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    527a:	8d 81       	ldd	r24, Y+5	; 0x05
    527c:	9e 81       	ldd	r25, Y+6	; 0x06
    527e:	00 97       	sbiw	r24, 0x00	; 0
    5280:	69 f7       	brne	.-38     	; 0x525c <APP_voidOpenTheDoor+0xbe>
    5282:	14 c0       	rjmp	.+40     	; 0x52ac <APP_voidOpenTheDoor+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5284:	6f 81       	ldd	r22, Y+7	; 0x07
    5286:	78 85       	ldd	r23, Y+8	; 0x08
    5288:	89 85       	ldd	r24, Y+9	; 0x09
    528a:	9a 85       	ldd	r25, Y+10	; 0x0a
    528c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	9e 83       	std	Y+6, r25	; 0x06
    5296:	8d 83       	std	Y+5, r24	; 0x05
    5298:	8d 81       	ldd	r24, Y+5	; 0x05
    529a:	9e 81       	ldd	r25, Y+6	; 0x06
    529c:	9a 83       	std	Y+2, r25	; 0x02
    529e:	89 83       	std	Y+1, r24	; 0x01
    52a0:	89 81       	ldd	r24, Y+1	; 0x01
    52a2:	9a 81       	ldd	r25, Y+2	; 0x02
    52a4:	01 97       	sbiw	r24, 0x01	; 1
    52a6:	f1 f7       	brne	.-4      	; 0x52a4 <APP_voidOpenTheDoor+0x106>
    52a8:	9a 83       	std	Y+2, r25	; 0x02
    52aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	GPIO_vSetPinValue(APP_DCM_PORT, APP_DCM_PIN, LOW);
    52ac:	81 e0       	ldi	r24, 0x01	; 1
    52ae:	61 e0       	ldi	r22, 0x01	; 1
    52b0:	40 e0       	ldi	r20, 0x00	; 0
    52b2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
	LCD_I2C_vClear();
    52b6:	0e 94 31 16 	call	0x2c62	; 0x2c62 <LCD_I2C_vClear>
}
    52ba:	2e 96       	adiw	r28, 0x0e	; 14
    52bc:	0f b6       	in	r0, 0x3f	; 63
    52be:	f8 94       	cli
    52c0:	de bf       	out	0x3e, r29	; 62
    52c2:	0f be       	out	0x3f, r0	; 63
    52c4:	cd bf       	out	0x3d, r28	; 61
    52c6:	cf 91       	pop	r28
    52c8:	df 91       	pop	r29
    52ca:	08 95       	ret

000052cc <APP_voidEnterBlockedState>:

void APP_voidEnterBlockedState(void)
{
    52cc:	df 93       	push	r29
    52ce:	cf 93       	push	r28
    52d0:	cd b7       	in	r28, 0x3d	; 61
    52d2:	de b7       	in	r29, 0x3e	; 62
    52d4:	6d 97       	sbiw	r28, 0x1d	; 29
    52d6:	0f b6       	in	r0, 0x3f	; 63
    52d8:	f8 94       	cli
    52da:	de bf       	out	0x3e, r29	; 62
    52dc:	0f be       	out	0x3f, r0	; 63
    52de:	cd bf       	out	0x3d, r28	; 61
	TIMERS_vStartTimer(TIMER2);
    52e0:	82 e0       	ldi	r24, 0x02	; 2
    52e2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <TIMERS_vStartTimer>
	for(u8 i=0; i<3; i++)
    52e6:	1d 8e       	std	Y+29, r1	; 0x1d
    52e8:	07 c1       	rjmp	.+526    	; 0x54f8 <APP_voidEnterBlockedState+0x22c>
	{
		LCD_I2C_vClear();
    52ea:	0e 94 31 16 	call	0x2c62	; 0x2c62 <LCD_I2C_vClear>
		LCD_I2C_vSendString("Access is denied");
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	91 e0       	ldi	r25, 0x01	; 1
    52f2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
		// Buzzer will Beep 3 times with the red led at the same time
		TIMERS_vSetCompareMatchValue(TIMER2, 0, 128);
    52f6:	82 e0       	ldi	r24, 0x02	; 2
    52f8:	60 e0       	ldi	r22, 0x00	; 0
    52fa:	40 e8       	ldi	r20, 0x80	; 128
    52fc:	50 e0       	ldi	r21, 0x00	; 0
    52fe:	0e 94 9f 08 	call	0x113e	; 0x113e <TIMERS_vSetCompareMatchValue>
		GPIO_vSetPinValue(APP_RED_LED_PORT, APP_RED_LED_PIN, HIGH);
    5302:	81 e0       	ldi	r24, 0x01	; 1
    5304:	60 e0       	ldi	r22, 0x00	; 0
    5306:	41 e0       	ldi	r20, 0x01	; 1
    5308:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	aa ef       	ldi	r26, 0xFA	; 250
    5312:	b3 e4       	ldi	r27, 0x43	; 67
    5314:	89 8f       	std	Y+25, r24	; 0x19
    5316:	9a 8f       	std	Y+26, r25	; 0x1a
    5318:	ab 8f       	std	Y+27, r26	; 0x1b
    531a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    531c:	69 8d       	ldd	r22, Y+25	; 0x19
    531e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5320:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5322:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5324:	20 e0       	ldi	r18, 0x00	; 0
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	4a ef       	ldi	r20, 0xFA	; 250
    532a:	54 e4       	ldi	r21, 0x44	; 68
    532c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5330:	dc 01       	movw	r26, r24
    5332:	cb 01       	movw	r24, r22
    5334:	8d 8b       	std	Y+21, r24	; 0x15
    5336:	9e 8b       	std	Y+22, r25	; 0x16
    5338:	af 8b       	std	Y+23, r26	; 0x17
    533a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    533c:	6d 89       	ldd	r22, Y+21	; 0x15
    533e:	7e 89       	ldd	r23, Y+22	; 0x16
    5340:	8f 89       	ldd	r24, Y+23	; 0x17
    5342:	98 8d       	ldd	r25, Y+24	; 0x18
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	40 e8       	ldi	r20, 0x80	; 128
    534a:	5f e3       	ldi	r21, 0x3F	; 63
    534c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5350:	88 23       	and	r24, r24
    5352:	2c f4       	brge	.+10     	; 0x535e <APP_voidEnterBlockedState+0x92>
		__ticks = 1;
    5354:	81 e0       	ldi	r24, 0x01	; 1
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	9c 8b       	std	Y+20, r25	; 0x14
    535a:	8b 8b       	std	Y+19, r24	; 0x13
    535c:	3f c0       	rjmp	.+126    	; 0x53dc <APP_voidEnterBlockedState+0x110>
	else if (__tmp > 65535)
    535e:	6d 89       	ldd	r22, Y+21	; 0x15
    5360:	7e 89       	ldd	r23, Y+22	; 0x16
    5362:	8f 89       	ldd	r24, Y+23	; 0x17
    5364:	98 8d       	ldd	r25, Y+24	; 0x18
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	3f ef       	ldi	r19, 0xFF	; 255
    536a:	4f e7       	ldi	r20, 0x7F	; 127
    536c:	57 e4       	ldi	r21, 0x47	; 71
    536e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5372:	18 16       	cp	r1, r24
    5374:	4c f5       	brge	.+82     	; 0x53c8 <APP_voidEnterBlockedState+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5376:	69 8d       	ldd	r22, Y+25	; 0x19
    5378:	7a 8d       	ldd	r23, Y+26	; 0x1a
    537a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    537c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    537e:	20 e0       	ldi	r18, 0x00	; 0
    5380:	30 e0       	ldi	r19, 0x00	; 0
    5382:	40 e2       	ldi	r20, 0x20	; 32
    5384:	51 e4       	ldi	r21, 0x41	; 65
    5386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    538a:	dc 01       	movw	r26, r24
    538c:	cb 01       	movw	r24, r22
    538e:	bc 01       	movw	r22, r24
    5390:	cd 01       	movw	r24, r26
    5392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5396:	dc 01       	movw	r26, r24
    5398:	cb 01       	movw	r24, r22
    539a:	9c 8b       	std	Y+20, r25	; 0x14
    539c:	8b 8b       	std	Y+19, r24	; 0x13
    539e:	0f c0       	rjmp	.+30     	; 0x53be <APP_voidEnterBlockedState+0xf2>
    53a0:	88 ec       	ldi	r24, 0xC8	; 200
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	9a 8b       	std	Y+18, r25	; 0x12
    53a6:	89 8b       	std	Y+17, r24	; 0x11
    53a8:	89 89       	ldd	r24, Y+17	; 0x11
    53aa:	9a 89       	ldd	r25, Y+18	; 0x12
    53ac:	01 97       	sbiw	r24, 0x01	; 1
    53ae:	f1 f7       	brne	.-4      	; 0x53ac <APP_voidEnterBlockedState+0xe0>
    53b0:	9a 8b       	std	Y+18, r25	; 0x12
    53b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53b4:	8b 89       	ldd	r24, Y+19	; 0x13
    53b6:	9c 89       	ldd	r25, Y+20	; 0x14
    53b8:	01 97       	sbiw	r24, 0x01	; 1
    53ba:	9c 8b       	std	Y+20, r25	; 0x14
    53bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53be:	8b 89       	ldd	r24, Y+19	; 0x13
    53c0:	9c 89       	ldd	r25, Y+20	; 0x14
    53c2:	00 97       	sbiw	r24, 0x00	; 0
    53c4:	69 f7       	brne	.-38     	; 0x53a0 <APP_voidEnterBlockedState+0xd4>
    53c6:	14 c0       	rjmp	.+40     	; 0x53f0 <APP_voidEnterBlockedState+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53c8:	6d 89       	ldd	r22, Y+21	; 0x15
    53ca:	7e 89       	ldd	r23, Y+22	; 0x16
    53cc:	8f 89       	ldd	r24, Y+23	; 0x17
    53ce:	98 8d       	ldd	r25, Y+24	; 0x18
    53d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53d4:	dc 01       	movw	r26, r24
    53d6:	cb 01       	movw	r24, r22
    53d8:	9c 8b       	std	Y+20, r25	; 0x14
    53da:	8b 8b       	std	Y+19, r24	; 0x13
    53dc:	8b 89       	ldd	r24, Y+19	; 0x13
    53de:	9c 89       	ldd	r25, Y+20	; 0x14
    53e0:	98 8b       	std	Y+16, r25	; 0x10
    53e2:	8f 87       	std	Y+15, r24	; 0x0f
    53e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    53e6:	98 89       	ldd	r25, Y+16	; 0x10
    53e8:	01 97       	sbiw	r24, 0x01	; 1
    53ea:	f1 f7       	brne	.-4      	; 0x53e8 <APP_voidEnterBlockedState+0x11c>
    53ec:	98 8b       	std	Y+16, r25	; 0x10
    53ee:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_I2C_vSendString("                   ");
    53f0:	82 e1       	ldi	r24, 0x12	; 18
    53f2:	91 e0       	ldi	r25, 0x01	; 1
    53f4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_I2C_vSendString>
		TIMERS_vSetCompareMatchValue(TIMER2, 0, 0);
    53f8:	82 e0       	ldi	r24, 0x02	; 2
    53fa:	60 e0       	ldi	r22, 0x00	; 0
    53fc:	40 e0       	ldi	r20, 0x00	; 0
    53fe:	50 e0       	ldi	r21, 0x00	; 0
    5400:	0e 94 9f 08 	call	0x113e	; 0x113e <TIMERS_vSetCompareMatchValue>
		GPIO_vSetPinValue(APP_RED_LED_PORT, APP_RED_LED_PIN, LOW);
    5404:	81 e0       	ldi	r24, 0x01	; 1
    5406:	60 e0       	ldi	r22, 0x00	; 0
    5408:	40 e0       	ldi	r20, 0x00	; 0
    540a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <GPIO_vSetPinValue>
    540e:	80 e0       	ldi	r24, 0x00	; 0
    5410:	90 e0       	ldi	r25, 0x00	; 0
    5412:	aa ef       	ldi	r26, 0xFA	; 250
    5414:	b3 e4       	ldi	r27, 0x43	; 67
    5416:	8b 87       	std	Y+11, r24	; 0x0b
    5418:	9c 87       	std	Y+12, r25	; 0x0c
    541a:	ad 87       	std	Y+13, r26	; 0x0d
    541c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    541e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5420:	7c 85       	ldd	r23, Y+12	; 0x0c
    5422:	8d 85       	ldd	r24, Y+13	; 0x0d
    5424:	9e 85       	ldd	r25, Y+14	; 0x0e
    5426:	20 e0       	ldi	r18, 0x00	; 0
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	4a ef       	ldi	r20, 0xFA	; 250
    542c:	54 e4       	ldi	r21, 0x44	; 68
    542e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5432:	dc 01       	movw	r26, r24
    5434:	cb 01       	movw	r24, r22
    5436:	8f 83       	std	Y+7, r24	; 0x07
    5438:	98 87       	std	Y+8, r25	; 0x08
    543a:	a9 87       	std	Y+9, r26	; 0x09
    543c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    543e:	6f 81       	ldd	r22, Y+7	; 0x07
    5440:	78 85       	ldd	r23, Y+8	; 0x08
    5442:	89 85       	ldd	r24, Y+9	; 0x09
    5444:	9a 85       	ldd	r25, Y+10	; 0x0a
    5446:	20 e0       	ldi	r18, 0x00	; 0
    5448:	30 e0       	ldi	r19, 0x00	; 0
    544a:	40 e8       	ldi	r20, 0x80	; 128
    544c:	5f e3       	ldi	r21, 0x3F	; 63
    544e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5452:	88 23       	and	r24, r24
    5454:	2c f4       	brge	.+10     	; 0x5460 <APP_voidEnterBlockedState+0x194>
		__ticks = 1;
    5456:	81 e0       	ldi	r24, 0x01	; 1
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	9e 83       	std	Y+6, r25	; 0x06
    545c:	8d 83       	std	Y+5, r24	; 0x05
    545e:	3f c0       	rjmp	.+126    	; 0x54de <APP_voidEnterBlockedState+0x212>
	else if (__tmp > 65535)
    5460:	6f 81       	ldd	r22, Y+7	; 0x07
    5462:	78 85       	ldd	r23, Y+8	; 0x08
    5464:	89 85       	ldd	r24, Y+9	; 0x09
    5466:	9a 85       	ldd	r25, Y+10	; 0x0a
    5468:	20 e0       	ldi	r18, 0x00	; 0
    546a:	3f ef       	ldi	r19, 0xFF	; 255
    546c:	4f e7       	ldi	r20, 0x7F	; 127
    546e:	57 e4       	ldi	r21, 0x47	; 71
    5470:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5474:	18 16       	cp	r1, r24
    5476:	4c f5       	brge	.+82     	; 0x54ca <APP_voidEnterBlockedState+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5478:	6b 85       	ldd	r22, Y+11	; 0x0b
    547a:	7c 85       	ldd	r23, Y+12	; 0x0c
    547c:	8d 85       	ldd	r24, Y+13	; 0x0d
    547e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5480:	20 e0       	ldi	r18, 0x00	; 0
    5482:	30 e0       	ldi	r19, 0x00	; 0
    5484:	40 e2       	ldi	r20, 0x20	; 32
    5486:	51 e4       	ldi	r21, 0x41	; 65
    5488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    548c:	dc 01       	movw	r26, r24
    548e:	cb 01       	movw	r24, r22
    5490:	bc 01       	movw	r22, r24
    5492:	cd 01       	movw	r24, r26
    5494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5498:	dc 01       	movw	r26, r24
    549a:	cb 01       	movw	r24, r22
    549c:	9e 83       	std	Y+6, r25	; 0x06
    549e:	8d 83       	std	Y+5, r24	; 0x05
    54a0:	0f c0       	rjmp	.+30     	; 0x54c0 <APP_voidEnterBlockedState+0x1f4>
    54a2:	88 ec       	ldi	r24, 0xC8	; 200
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	9c 83       	std	Y+4, r25	; 0x04
    54a8:	8b 83       	std	Y+3, r24	; 0x03
    54aa:	8b 81       	ldd	r24, Y+3	; 0x03
    54ac:	9c 81       	ldd	r25, Y+4	; 0x04
    54ae:	01 97       	sbiw	r24, 0x01	; 1
    54b0:	f1 f7       	brne	.-4      	; 0x54ae <APP_voidEnterBlockedState+0x1e2>
    54b2:	9c 83       	std	Y+4, r25	; 0x04
    54b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54b6:	8d 81       	ldd	r24, Y+5	; 0x05
    54b8:	9e 81       	ldd	r25, Y+6	; 0x06
    54ba:	01 97       	sbiw	r24, 0x01	; 1
    54bc:	9e 83       	std	Y+6, r25	; 0x06
    54be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54c0:	8d 81       	ldd	r24, Y+5	; 0x05
    54c2:	9e 81       	ldd	r25, Y+6	; 0x06
    54c4:	00 97       	sbiw	r24, 0x00	; 0
    54c6:	69 f7       	brne	.-38     	; 0x54a2 <APP_voidEnterBlockedState+0x1d6>
    54c8:	14 c0       	rjmp	.+40     	; 0x54f2 <APP_voidEnterBlockedState+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54ca:	6f 81       	ldd	r22, Y+7	; 0x07
    54cc:	78 85       	ldd	r23, Y+8	; 0x08
    54ce:	89 85       	ldd	r24, Y+9	; 0x09
    54d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    54d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54d6:	dc 01       	movw	r26, r24
    54d8:	cb 01       	movw	r24, r22
    54da:	9e 83       	std	Y+6, r25	; 0x06
    54dc:	8d 83       	std	Y+5, r24	; 0x05
    54de:	8d 81       	ldd	r24, Y+5	; 0x05
    54e0:	9e 81       	ldd	r25, Y+6	; 0x06
    54e2:	9a 83       	std	Y+2, r25	; 0x02
    54e4:	89 83       	std	Y+1, r24	; 0x01
    54e6:	89 81       	ldd	r24, Y+1	; 0x01
    54e8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ea:	01 97       	sbiw	r24, 0x01	; 1
    54ec:	f1 f7       	brne	.-4      	; 0x54ea <APP_voidEnterBlockedState+0x21e>
    54ee:	9a 83       	std	Y+2, r25	; 0x02
    54f0:	89 83       	std	Y+1, r24	; 0x01
}

void APP_voidEnterBlockedState(void)
{
	TIMERS_vStartTimer(TIMER2);
	for(u8 i=0; i<3; i++)
    54f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    54f4:	8f 5f       	subi	r24, 0xFF	; 255
    54f6:	8d 8f       	std	Y+29, r24	; 0x1d
    54f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    54fa:	83 30       	cpi	r24, 0x03	; 3
    54fc:	08 f4       	brcc	.+2      	; 0x5500 <APP_voidEnterBlockedState+0x234>
    54fe:	f5 ce       	rjmp	.-534    	; 0x52ea <APP_voidEnterBlockedState+0x1e>
		LCD_I2C_vSendString("                   ");
		TIMERS_vSetCompareMatchValue(TIMER2, 0, 0);
		GPIO_vSetPinValue(APP_RED_LED_PORT, APP_RED_LED_PIN, LOW);
		_delay_ms(500);
	}
	TIMERS_vStopTimer(TIMER2);
    5500:	82 e0       	ldi	r24, 0x02	; 2
    5502:	0e 94 12 08 	call	0x1024	; 0x1024 <TIMERS_vStopTimer>
    5506:	ff cf       	rjmp	.-2      	; 0x5506 <APP_voidEnterBlockedState+0x23a>

00005508 <main>:
/*********************** APP Includes ************************/
#include "App/APP_interface.h"

/*********************** main Function ************************/
int main(void)
{
    5508:	df 93       	push	r29
    550a:	cf 93       	push	r28
    550c:	cd b7       	in	r28, 0x3d	; 61
    550e:	de b7       	in	r29, 0x3e	; 62
	/*************** peripheral initializations ***************/
	APP_voidInit();
    5510:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <APP_voidInit>

	// welcome message on LCD at the start of the system
	APP_voidWelcomeScreen();
    5514:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <APP_voidWelcomeScreen>

	/********************** infinite loop *********************/
	while(1)
	{
		APP_voidStartTheSystem();
    5518:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <APP_voidStartTheSystem>
    551c:	fd cf       	rjmp	.-6      	; 0x5518 <main+0x10>

0000551e <__mulsi3>:
    551e:	62 9f       	mul	r22, r18
    5520:	d0 01       	movw	r26, r0
    5522:	73 9f       	mul	r23, r19
    5524:	f0 01       	movw	r30, r0
    5526:	82 9f       	mul	r24, r18
    5528:	e0 0d       	add	r30, r0
    552a:	f1 1d       	adc	r31, r1
    552c:	64 9f       	mul	r22, r20
    552e:	e0 0d       	add	r30, r0
    5530:	f1 1d       	adc	r31, r1
    5532:	92 9f       	mul	r25, r18
    5534:	f0 0d       	add	r31, r0
    5536:	83 9f       	mul	r24, r19
    5538:	f0 0d       	add	r31, r0
    553a:	74 9f       	mul	r23, r20
    553c:	f0 0d       	add	r31, r0
    553e:	65 9f       	mul	r22, r21
    5540:	f0 0d       	add	r31, r0
    5542:	99 27       	eor	r25, r25
    5544:	72 9f       	mul	r23, r18
    5546:	b0 0d       	add	r27, r0
    5548:	e1 1d       	adc	r30, r1
    554a:	f9 1f       	adc	r31, r25
    554c:	63 9f       	mul	r22, r19
    554e:	b0 0d       	add	r27, r0
    5550:	e1 1d       	adc	r30, r1
    5552:	f9 1f       	adc	r31, r25
    5554:	bd 01       	movw	r22, r26
    5556:	cf 01       	movw	r24, r30
    5558:	11 24       	eor	r1, r1
    555a:	08 95       	ret

0000555c <__udivmodhi4>:
    555c:	aa 1b       	sub	r26, r26
    555e:	bb 1b       	sub	r27, r27
    5560:	51 e1       	ldi	r21, 0x11	; 17
    5562:	07 c0       	rjmp	.+14     	; 0x5572 <__udivmodhi4_ep>

00005564 <__udivmodhi4_loop>:
    5564:	aa 1f       	adc	r26, r26
    5566:	bb 1f       	adc	r27, r27
    5568:	a6 17       	cp	r26, r22
    556a:	b7 07       	cpc	r27, r23
    556c:	10 f0       	brcs	.+4      	; 0x5572 <__udivmodhi4_ep>
    556e:	a6 1b       	sub	r26, r22
    5570:	b7 0b       	sbc	r27, r23

00005572 <__udivmodhi4_ep>:
    5572:	88 1f       	adc	r24, r24
    5574:	99 1f       	adc	r25, r25
    5576:	5a 95       	dec	r21
    5578:	a9 f7       	brne	.-22     	; 0x5564 <__udivmodhi4_loop>
    557a:	80 95       	com	r24
    557c:	90 95       	com	r25
    557e:	bc 01       	movw	r22, r24
    5580:	cd 01       	movw	r24, r26
    5582:	08 95       	ret

00005584 <__divmodhi4>:
    5584:	97 fb       	bst	r25, 7
    5586:	09 2e       	mov	r0, r25
    5588:	07 26       	eor	r0, r23
    558a:	0a d0       	rcall	.+20     	; 0x55a0 <__divmodhi4_neg1>
    558c:	77 fd       	sbrc	r23, 7
    558e:	04 d0       	rcall	.+8      	; 0x5598 <__divmodhi4_neg2>
    5590:	e5 df       	rcall	.-54     	; 0x555c <__udivmodhi4>
    5592:	06 d0       	rcall	.+12     	; 0x55a0 <__divmodhi4_neg1>
    5594:	00 20       	and	r0, r0
    5596:	1a f4       	brpl	.+6      	; 0x559e <__divmodhi4_exit>

00005598 <__divmodhi4_neg2>:
    5598:	70 95       	com	r23
    559a:	61 95       	neg	r22
    559c:	7f 4f       	sbci	r23, 0xFF	; 255

0000559e <__divmodhi4_exit>:
    559e:	08 95       	ret

000055a0 <__divmodhi4_neg1>:
    55a0:	f6 f7       	brtc	.-4      	; 0x559e <__divmodhi4_exit>
    55a2:	90 95       	com	r25
    55a4:	81 95       	neg	r24
    55a6:	9f 4f       	sbci	r25, 0xFF	; 255
    55a8:	08 95       	ret

000055aa <__prologue_saves__>:
    55aa:	2f 92       	push	r2
    55ac:	3f 92       	push	r3
    55ae:	4f 92       	push	r4
    55b0:	5f 92       	push	r5
    55b2:	6f 92       	push	r6
    55b4:	7f 92       	push	r7
    55b6:	8f 92       	push	r8
    55b8:	9f 92       	push	r9
    55ba:	af 92       	push	r10
    55bc:	bf 92       	push	r11
    55be:	cf 92       	push	r12
    55c0:	df 92       	push	r13
    55c2:	ef 92       	push	r14
    55c4:	ff 92       	push	r15
    55c6:	0f 93       	push	r16
    55c8:	1f 93       	push	r17
    55ca:	cf 93       	push	r28
    55cc:	df 93       	push	r29
    55ce:	cd b7       	in	r28, 0x3d	; 61
    55d0:	de b7       	in	r29, 0x3e	; 62
    55d2:	ca 1b       	sub	r28, r26
    55d4:	db 0b       	sbc	r29, r27
    55d6:	0f b6       	in	r0, 0x3f	; 63
    55d8:	f8 94       	cli
    55da:	de bf       	out	0x3e, r29	; 62
    55dc:	0f be       	out	0x3f, r0	; 63
    55de:	cd bf       	out	0x3d, r28	; 61
    55e0:	09 94       	ijmp

000055e2 <__epilogue_restores__>:
    55e2:	2a 88       	ldd	r2, Y+18	; 0x12
    55e4:	39 88       	ldd	r3, Y+17	; 0x11
    55e6:	48 88       	ldd	r4, Y+16	; 0x10
    55e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    55ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    55ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    55ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    55f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    55f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    55f4:	b9 84       	ldd	r11, Y+9	; 0x09
    55f6:	c8 84       	ldd	r12, Y+8	; 0x08
    55f8:	df 80       	ldd	r13, Y+7	; 0x07
    55fa:	ee 80       	ldd	r14, Y+6	; 0x06
    55fc:	fd 80       	ldd	r15, Y+5	; 0x05
    55fe:	0c 81       	ldd	r16, Y+4	; 0x04
    5600:	1b 81       	ldd	r17, Y+3	; 0x03
    5602:	aa 81       	ldd	r26, Y+2	; 0x02
    5604:	b9 81       	ldd	r27, Y+1	; 0x01
    5606:	ce 0f       	add	r28, r30
    5608:	d1 1d       	adc	r29, r1
    560a:	0f b6       	in	r0, 0x3f	; 63
    560c:	f8 94       	cli
    560e:	de bf       	out	0x3e, r29	; 62
    5610:	0f be       	out	0x3f, r0	; 63
    5612:	cd bf       	out	0x3d, r28	; 61
    5614:	ed 01       	movw	r28, r26
    5616:	08 95       	ret

00005618 <_exit>:
    5618:	f8 94       	cli

0000561a <__stop_program>:
    561a:	ff cf       	rjmp	.-2      	; 0x561a <__stop_program>
